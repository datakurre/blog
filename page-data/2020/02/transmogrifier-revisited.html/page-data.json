{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/02/transmogrifier-revisited.html/","result":{"data":{"site":{"siteMetadata":{"title":"Asko Soukka","author":"Asko Soukka"}},"markdownRemark":{"id":"4a88f949-fb5f-5096-af5f-84c6da21a569","fields":{"slug":"/2020/02/transmogrifier-revisited.html/"},"excerpt":"TL;DR; This blog post ends with minimal example of creating Plone 5.2 content with\nPython 3 compatible Transmogrifier pipeline with command line execution…","html":"<p>TL;DR; This blog post ends with minimal example of creating Plone 5.2 content with\nPython 3 compatible Transmogrifier pipeline with command line execution.</p>\n<p>Years ago, I forked the famous Plone content migration tool <a href=\"https://pypi.org/project/collective.transmogrifier/\">Transmogrifier</a> into a Plone independent and Python 3 compatible version, but <a href=\"https://github.com/collective/transmogrifier/\">never released the fork to avoid maintenance burden</a>. Unfortunately, I was informed that <a href=\"../../../2014/11/transmogrifier-python-migration.html/\">my old examples of using my transmogrifier fork with Plone</a> no longer worked, so I had to review the situation.</p>\n<p>The resolution: I found that I had changed some of the built-in reusable blueprints after the post, <a href=\"../../../2014/11/transmogrifier-python-migration.html/\">I updated the old post</a>, fixed a compatibility issue related to updates in Zope Component Architecture dependencies, and tested the results with the latest Plone 5.2 on Python 3.</p>\n<h2>Transmogrifying RSS into Plone</h2>\n<p>So, here goes a minimal example for creating Plone 5.2 content with Python 3 Transmogrifier pipeline using my fork:</p>\n<p>At first <code>./buildout.cfg</code> for the Plone instance:</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[buildout]</span><span>\n</span><span class=\"cm-def\">extends </span><span>=</span><span class=\"cm-quote\"> http</span><span>:</span><span class=\"cm-quote\">//dist.plone.org/release/5-latest/versions.cfg</span><span>\n</span><span class=\"cm-def\">parts </span><span>=</span><span class=\"cm-quote\"> instance plonesite</span><span>\n</span><span class=\"cm-def\">versions </span><span>=</span><span class=\"cm-quote\"> versions</span><span>\n\n</span><span class=\"cm-def\">extensions </span><span>=</span><span class=\"cm-quote\"> mr.developer</span><span>\n</span><span class=\"cm-def\">sources </span><span>=</span><span class=\"cm-quote\"> sources</span><span>\n</span><span class=\"cm-def\">auto-checkout </span><span>=</span><span class=\"cm-quote\"> *</span><span>\n\n</span><span class=\"cm-header\">[sources]</span><span>\n</span><span class=\"cm-def\">transmogrifier </span><span>=</span><span class=\"cm-quote\"> git https</span><span>:</span><span class=\"cm-quote\">//github.com/collective/transmogrifier</span><span>\n\n</span><span class=\"cm-header\">[instance]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> plone.recipe.zope2instance</span><span>\n</span><span class=\"cm-def\">eggs </span><span>=</span><span>\n</span><span class=\"cm-def\">    Plone</span><span>\n</span><span class=\"cm-def\">    transmogrifier</span><span>\n</span><span class=\"cm-def\">user </span><span>=</span><span class=\"cm-quote\"> admin</span><span>:</span><span class=\"cm-quote\">admin</span><span>\n\n</span><span class=\"cm-header\">[plonesite]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> collective.recipe.plonesite</span><span>\n</span><span class=\"cm-def\">site-id </span><span>=</span><span class=\"cm-quote\"> Plone</span><span>\n</span><span class=\"cm-def\">instance </span><span>=</span><span class=\"cm-quote\"> instance</span></code></pre>\n    </div>\n<p>Then <code>buildout</code> must be run to create the instance with a Plone site:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ buildout</span></code></pre>\n    </div>\n<p>Next the transmogrifier <code>./pipeline.cfg</code> must be created to define the pipeline:</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[transmogrifier]</span><span>\n</span><span class=\"cm-def\">pipeline </span><span>=</span><span>\n</span><span class=\"cm-def\">    from_rss</span><span>\n</span><span class=\"cm-def\">    prepare</span><span>\n</span><span class=\"cm-def\">    create</span><span>\n</span><span class=\"cm-def\">    patch</span><span>\n</span><span class=\"cm-def\">    commit</span><span>\n\n</span><span class=\"cm-header\">[from_rss]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.from</span><span>\n</span><span class=\"cm-def\">modules </span><span>=</span><span class=\"cm-quote\"> feedparser</span><span>\n</span><span class=\"cm-def\">expression </span><span>=</span><span class=\"cm-quote\"> python</span><span>:</span><span class=\"cm-quote\">modules['feedparser'].parse(options['url']).get('entries', [])</span><span>\n</span><span class=\"cm-def\">url </span><span>=</span><span class=\"cm-quote\"> http</span><span>:</span><span class=\"cm-quote\">//rss.slashdot.org/Slashdot/slashdot</span><span>\n\n</span><span class=\"cm-header\">[prepare]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.set</span><span>\n</span><span class=\"cm-def\">portal_type </span><span>=</span><span class=\"cm-quote\"> string</span><span>:</span><span class=\"cm-quote\">Document</span><span>\n</span><span class=\"cm-def\">id </span><span>=</span><span class=\"cm-quote\"> python</span><span>:</span><span class=\"cm-quote\">None</span><span>\n</span><span class=\"cm-def\">text </span><span>=</span><span class=\"cm-quote\"> path</span><span>:</span><span class=\"cm-quote\">item/summary</span><span>\n</span><span class=\"cm-def\">_container </span><span>=</span><span class=\"cm-quote\"> python</span><span>:</span><span class=\"cm-quote\">context.get('slashdot') or modules['plone.api'].content.create(container</span><span>=</span><span class=\"cm-quote\">context, type</span><span>=</span><span class=\"cm-quote\">'Folder', id</span><span>=</span><span class=\"cm-quote\">'slashdot')</span><span>\n\n</span><span class=\"cm-header\">[create]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.set</span><span>\n</span><span class=\"cm-def\">modules </span><span>=</span><span class=\"cm-quote\"> plone.api</span><span>\n</span><span class=\"cm-def\">object </span><span>=</span><span class=\"cm-quote\"> python</span><span>:</span><span class=\"cm-quote\">modules['plone.api'].content.create(container</span><span>=</span><span class=\"cm-quote\">item.pop('_container'), type</span><span>=</span><span class=\"cm-quote\">'Document', **item)</span><span>\n\n</span><span class=\"cm-header\">[patch]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.transform</span><span>\n</span><span class=\"cm-def\">modules </span><span>=</span><span class=\"cm-quote\"> plone.app.textfield</span><span>\n</span><span class=\"cm-def\">patch </span><span>=</span><span class=\"cm-quote\"> python</span><span>:</span><span class=\"cm-quote\">setattr(item['object'], 'text', modules['plone.app.textfield'].value.RichTextValue(item['object'].text, 'text/html', 'text/x-html-safe'))</span><span>\n\n</span><span class=\"cm-header\">[commit]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.finally</span><span>\n</span><span class=\"cm-def\">modules </span><span>=</span><span class=\"cm-quote\"> transaction</span><span>\n</span><span class=\"cm-def\">commit </span><span>=</span><span class=\"cm-quote\"> modules['transaction'].commit()</span></code></pre>\n    </div>\n<p>Finally, the execution of transmogrifier with Plone site as its context (remember that this version of transmogrifier also works outside Plone ecosystem, but for a convenience <code>transmogrify</code>-script also supports calling with <code>instance run</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ bin</span><span>/instance </span><span class=\"cm-attribute\">-OPlone</span><span> run bin/transmogrify pipeline.cfg </span><span class=\"cm-attribute\">--context</span><span class=\"cm-operator\">=</span><span>zope.component.hooks.getSite</span></code></pre>\n    </div>\n<p>This example should result with the latest Slashdot posts in a Plone site. And, because this example is not perfect, running this again would create duplicates.</p>\n<h2>Transmogrifying JSON files into Plone</h2>\n<p>There’s never enough simple tutorials on how to build your own Transmogrifier pipelines from scratch. Especially now, when many old pipeline packages have not been ported to Python 3 yet.</p>\n<p>In this example we configure a buildout with local custom Transmogrifier blueprints in python and use them to do minimal import from a JSON export generated using <a href=\"https://pypi.org/project/collective.jsonify/\">collective.jsonify</a>, which is a one of many legacy ways to generate intermediate export. (That said, it might be good to know, that nowadays <a href=\"https://github.com/collective/gatsby-source-plone/tree/master/demo/fixture\">trivial migrations could be done with just Plone REST API and a little shell scripting</a>.)</p>\n<p>At first, we will define a <code>./buildout.cfg</code> that expects a local directory <code>./local</code> to contain a Python module <code>./local/custom</code> and include ZCML configuration from <code>./local/custom/configure.zcml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[buildout]</span><span>\n</span><span class=\"cm-def\">extends </span><span>=</span><span class=\"cm-quote\"> http</span><span>:</span><span class=\"cm-quote\">//dist.plone.org/release/5-latest/versions.cfg</span><span>\n</span><span class=\"cm-def\">parts </span><span>=</span><span class=\"cm-quote\"> instance plonesite</span><span>\n</span><span class=\"cm-def\">versions </span><span>=</span><span class=\"cm-quote\"> versions</span><span>\n\n</span><span class=\"cm-def\">extensions </span><span>=</span><span class=\"cm-quote\"> mr.developer</span><span>\n</span><span class=\"cm-def\">sources </span><span>=</span><span class=\"cm-quote\"> sources</span><span>\n</span><span class=\"cm-def\">auto-checkout </span><span>=</span><span class=\"cm-quote\"> *</span><span>\n\n</span><span class=\"cm-header\">[sources]</span><span>\n</span><span class=\"cm-def\">transmogrifier </span><span>=</span><span class=\"cm-quote\"> git https</span><span>:</span><span class=\"cm-quote\">//github.com/collective/transmogrifier</span><span>\n\n</span><span class=\"cm-header\">[instance]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> plone.recipe.zope2instance</span><span>\n</span><span class=\"cm-def\">eggs </span><span>=</span><span>\n</span><span class=\"cm-def\">    Plone</span><span>\n</span><span class=\"cm-def\">    transmogrifier</span><span>\n</span><span class=\"cm-def\">    plone.restapi</span><span>\n</span><span class=\"cm-def\">user </span><span>=</span><span class=\"cm-quote\"> admin</span><span>:</span><span class=\"cm-quote\">admin</span><span>\n</span><span class=\"cm-def\">extra-paths </span><span>=</span><span class=\"cm-quote\"> local</span><span>\n</span><span class=\"cm-def\">zcml </span><span>=</span><span class=\"cm-quote\"> custom</span><span>\n\n</span><span class=\"cm-header\">[plonesite]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> collective.recipe.plonesite</span><span>\n</span><span class=\"cm-def\">site-id </span><span>=</span><span class=\"cm-quote\"> Plone</span><span>\n</span><span class=\"cm-def\">instance </span><span>=</span><span class=\"cm-quote\"> instance</span></code></pre>\n    </div>\n<p>Before running <code>buildout</code> we ensure a proper local Python module structure with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ mkdir</span><span> </span><span class=\"cm-attribute\">-p</span><span> local/custom</span><span>\n</span><span class=\"cm-def\">$ touch</span><span> local/custom/__init__.py</span><span>\n</span><span class=\"cm-def\">$ echo</span><span> </span><span class=\"cm-string\">'&lt;configure xmlns=\"http://namespaces.zope.org/zope\" /&gt;'</span><span> &gt; local/custom/__init__.py</span></code></pre>\n    </div>\n<p>Only then we run buildout as usually:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ buildout</span></code></pre>\n    </div>\n<p>Now, let’s populate our custom module with a Python module <code>./local/custom/blueprints.py</code> defining a couple of custom blueprints:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-comment\"># -*- coding: utf-8 -*-</span><span>\n</span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">transmogrifier</span><span>.</span><span class=\"cm-property\">blueprints</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">Blueprint</span><span>\n\n</span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">json</span><span>\n</span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">pathlib</span><span>\n\n\n</span><span class=\"cm-keyword\">class</span><span> </span><span class=\"cm-def\">Glob</span><span>(</span><span class=\"cm-variable\">Blueprint</span><span>):</span><span>\n</span><span>    </span><span class=\"cm-string\">\"\"\"Produce JSON items from files matching globbing from option `glob`.\"\"\"</span><span>\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">__iter__</span><span>(</span><span class=\"cm-variable-2\">self</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-keyword\">for</span><span> </span><span class=\"cm-variable\">item</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">previous</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-keyword\">yield</span><span> </span><span class=\"cm-variable\">item</span><span>\n</span><span>        </span><span class=\"cm-keyword\">for</span><span> </span><span class=\"cm-variable\">p</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-variable\">pathlib</span><span>.</span><span class=\"cm-property\">Path</span><span>(</span><span class=\"cm-string\">\".\"</span><span>).</span><span class=\"cm-property\">glob</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">options</span><span>[</span><span class=\"cm-string\">\"glob\"</span><span>]):</span><span>\n</span><span>            </span><span class=\"cm-keyword\">with</span><span> </span><span class=\"cm-builtin\">open</span><span>(</span><span class=\"cm-variable\">p</span><span>, </span><span class=\"cm-variable\">encoding</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">\"utf-8\"</span><span>) </span><span class=\"cm-keyword\">as</span><span> </span><span class=\"cm-variable\">fp</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-keyword\">yield</span><span> </span><span class=\"cm-variable\">json</span><span>.</span><span class=\"cm-property\">load</span><span>(</span><span class=\"cm-variable\">fp</span><span>)</span><span>\n\n\n</span><span class=\"cm-keyword\">class</span><span> </span><span class=\"cm-def\">Folders</span><span>(</span><span class=\"cm-variable\">Blueprint</span><span>):</span><span>\n</span><span>    </span><span class=\"cm-string\">\"\"\"Minimal Folder item producer to ensure that items have containers.\"\"\"</span><span>\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">__iter__</span><span>(</span><span class=\"cm-variable-2\">self</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-variable\">context</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">transmogrifier</span><span>.</span><span class=\"cm-property\">context</span><span>\n</span><span>        </span><span class=\"cm-keyword\">for</span><span> </span><span class=\"cm-variable\">item</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">previous</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-variable\">parts</span><span> </span><span class=\"cm-operator\">=</span><span> (</span><span class=\"cm-variable\">item</span><span>.</span><span class=\"cm-property\">get</span><span>(</span><span class=\"cm-string\">'_path'</span><span>) </span><span class=\"cm-keyword\">or</span><span> </span><span class=\"cm-string\">''</span><span>).</span><span class=\"cm-property\">strip</span><span>(</span><span class=\"cm-string\">'/'</span><span>).</span><span class=\"cm-property\">split</span><span>(</span><span class=\"cm-string\">'/'</span><span>)[:</span><span class=\"cm-operator\">-</span><span class=\"cm-number\">1</span><span>]</span><span>\n</span><span>            </span><span class=\"cm-variable\">path</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-string\">''</span><span>\n</span><span>            </span><span class=\"cm-keyword\">for</span><span> </span><span class=\"cm-variable\">part</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-variable\">parts</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-variable\">path</span><span> </span><span class=\"cm-operator\">+=</span><span> </span><span class=\"cm-string\">'/'</span><span> </span><span class=\"cm-operator\">+</span><span> </span><span class=\"cm-variable\">part</span><span>\n</span><span>                </span><span class=\"cm-keyword\">try</span><span>:</span><span>\n</span><span>                    </span><span class=\"cm-variable\">context</span><span>.</span><span class=\"cm-property\">restrictedTraverse</span><span>(</span><span class=\"cm-variable\">path</span><span>)</span><span>\n</span><span>                </span><span class=\"cm-keyword\">except</span><span> </span><span class=\"cm-variable\">KeyError</span><span>:</span><span>\n</span><span>                    </span><span class=\"cm-keyword\">yield</span><span> {</span><span>\n</span><span>                        </span><span class=\"cm-string\">\"_path\"</span><span>: </span><span class=\"cm-variable\">path</span><span>,</span><span>\n</span><span>                        </span><span class=\"cm-string\">\"_type\"</span><span>: </span><span class=\"cm-string\">\"Folder\"</span><span>,</span><span>\n</span><span>                        </span><span class=\"cm-string\">\"id\"</span><span>: </span><span class=\"cm-variable\">part</span><span>\n</span><span>                    }</span><span>\n</span><span>            </span><span class=\"cm-keyword\">yield</span><span> </span><span class=\"cm-variable\">item</span></code></pre>\n    </div>\n<p>And complete ZCML configuration at <code>./local/custom/configure.zcml</code> with matching blueprint registrations:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">configure</span><span>\n</span><span>    </span><span class=\"cm-attribute\">xmlns</span><span>=</span><span class=\"cm-string\">\"http://namespaces.zope.org/zope\"</span><span>\n</span><span>    </span><span class=\"cm-attribute\">xmlns:transmogrifier</span><span>=</span><span class=\"cm-string\">\"http://namespaces.plone.org/transmogrifier\"</span><span class=\"cm-tag bracket\">&gt;</span><span>\n\n</span><span>  </span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">include</span><span> </span><span class=\"cm-attribute\">package</span><span>=</span><span class=\"cm-string\">\"transmogrifier\"</span><span> </span><span class=\"cm-attribute\">file</span><span>=</span><span class=\"cm-string\">\"meta.zcml\"</span><span> </span><span class=\"cm-tag bracket\">/&gt;</span><span>\n\n</span><span>  </span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">transmogrifier:blueprint</span><span>\n</span><span>      </span><span class=\"cm-attribute\">component</span><span>=</span><span class=\"cm-string\">\".blueprints.Glob\"</span><span>\n</span><span>      </span><span class=\"cm-attribute\">name</span><span>=</span><span class=\"cm-string\">\"custom.glob\"</span><span>\n</span><span>      </span><span class=\"cm-tag bracket\">/&gt;</span><span>\n\n</span><span>  </span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">transmogrifier:blueprint</span><span>\n</span><span>      </span><span class=\"cm-attribute\">component</span><span>=</span><span class=\"cm-string\">\".blueprints.Folders\"</span><span>\n</span><span>      </span><span class=\"cm-attribute\">name</span><span>=</span><span class=\"cm-string\">\"custom.folders\"</span><span>\n</span><span>      </span><span class=\"cm-tag bracket\">/&gt;</span><span>\n\n</span><span class=\"cm-tag bracket\">&lt;/</span><span class=\"cm-tag\">configure</span><span class=\"cm-tag bracket\">&gt;</span></code></pre>\n    </div>\n<p>Now, by using these two new blueprints and minimal content creating pipeline parts based on <a href=\"https://github.com/collective/transmogrifier/tree/master/docs/blueprints\">built-in expression blueprints</a>, it is possible to:</p>\n<ul>\n<li>generate new pipeline items from exported JSON files</li>\n<li>inject folder items into pipeline to ensure that containers are created before items (because we cannot quarentee any order from the export)</li>\n<li>create minimal Folder and Document objects with plone.api.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[transmogrifier]</span><span>\n</span><span class=\"cm-def\">pipeline </span><span>=</span><span>\n</span><span class=\"cm-def\">    generate_from_json</span><span>\n</span><span class=\"cm-def\">    generate_containers</span><span>\n</span><span class=\"cm-def\">    set_container</span><span>\n</span><span class=\"cm-def\">    create_folder</span><span>\n</span><span class=\"cm-def\">    create_document</span><span>\n</span><span class=\"cm-def\">    commit</span><span>\n\n</span><span class=\"cm-header\">[generate_from_json]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> custom.glob</span><span>\n</span><span class=\"cm-def\">glob </span><span>=</span><span class=\"cm-quote\"> data/**/*.json</span><span>\n\n</span><span class=\"cm-header\">[generate_containers]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> custom.folders</span><span>\n\n</span><span class=\"cm-header\">[set_container]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.set</span><span>\n</span><span class=\"cm-def\">_container </span><span>=</span><span class=\"cm-quote\"> python</span><span>:</span><span class=\"cm-quote\">context.restrictedTraverse(item[\"_path\"].rsplit(\"/\", 1)[0])</span><span>\n\n</span><span class=\"cm-header\">[create_folder]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.set</span><span>\n</span><span class=\"cm-def\">condition </span><span>=</span><span class=\"cm-quote\"> python</span><span>:</span><span class=\"cm-quote\">item.get(\"_type\") </span><span>==</span><span class=\"cm-quote\"> \"Folder\"</span><span>\n</span><span class=\"cm-def\">modules </span><span>=</span><span class=\"cm-quote\"> plone.api</span><span>\n</span><span class=\"cm-def\">_object </span><span>=</span><span class=\"cm-quote\"> python</span><span>:</span><span class=\"cm-quote\">modules[\"plone.api\"].content.get(item[\"_path\"]) or modules[\"plone.api\"].content.create(container</span><span>=</span><span class=\"cm-quote\">item[\"_container\"], type</span><span>=</span><span class=\"cm-quote\">\"Folder\", id</span><span>=</span><span class=\"cm-quote\">item[\"id\"])</span><span>\n\n</span><span class=\"cm-header\">[create_document]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.set</span><span>\n</span><span class=\"cm-def\">condition </span><span>=</span><span class=\"cm-quote\"> python</span><span>:</span><span class=\"cm-quote\">item.get(\"_type\") </span><span>==</span><span class=\"cm-quote\"> \"Document\"</span><span>\n</span><span class=\"cm-def\">modules </span><span>=</span><span>\n</span><span class=\"cm-def\">  plone.api</span><span>\n</span><span class=\"cm-def\">  plone.app.textfield</span><span>\n</span><span class=\"cm-def\">_object </span><span>=</span><span class=\"cm-quote\"> python</span><span>:</span><span class=\"cm-quote\">modules[\"plone.api\"].content.get(item[\"_path\"]) or modules[\"plone.api\"].content.create(container</span><span>=</span><span class=\"cm-quote\">item[\"_container\"], type</span><span>=</span><span class=\"cm-quote\">\"Document\", id</span><span>=</span><span class=\"cm-quote\">item[\"id\"], title</span><span>=</span><span class=\"cm-quote\">item[\"title\"], text</span><span>=</span><span class=\"cm-quote\">modules['plone.app.textfield'].value.RichTextValue(item[\"text\"], 'text/html', 'text/x-html-safe'))</span><span>\n\n</span><span class=\"cm-header\">[commit]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.finally</span><span>\n</span><span class=\"cm-def\">modules </span><span>=</span><span class=\"cm-quote\"> transaction</span><span>\n</span><span class=\"cm-def\">commit </span><span>=</span><span class=\"cm-quote\"> modules['transaction'].commit()</span></code></pre>\n    </div>\n<p>Finally, the pipeline can be run and content imported with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ bin</span><span>/instance </span><span class=\"cm-attribute\">-OPlone</span><span> run bin/transmogrify pipeline.cfg </span><span class=\"cm-attribute\">--context</span><span class=\"cm-operator\">=</span><span>zope.component.hooks.getSite</span></code></pre>\n    </div>\n<p>Obviously, in a real migration, the pipeline parts <code>[create_folder]</code> and <code>[create_document]</code> should be implemented in Python to properly populate all metadata fields, handle possible exceptions, etc, but consider that as homework.</p>\n<hr>\n<p>If this post raised more questions than gave answers, please, feel free to ask more at: <a href=\"https://github.com/collective/transmogrifier/issues\">https://github.com/collective/transmogrifier/issues</a>.</p>","frontmatter":{"title":"Creating Plone content with Transmogrifier on Python 3","tags":["Plone","Python","Transmogrifier","API"],"date":"February 25, 2020","published":"2020-02-25 12:00:00"}}},"pageContext":{"slug":"/2020/02/transmogrifier-revisited.html/","previous":{"fields":{"slug":"/2019/09/introducing-robotlab.html/"},"frontmatter":{"title":"Introducing RobotLab"}},"next":{"fields":{"slug":"/2020/04/refreshing-cms-in-a-theme-with-plone/"},"frontmatter":{"title":"Refreshing CMS, in a theme, with Plone"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}