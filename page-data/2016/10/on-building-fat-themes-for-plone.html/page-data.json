{"componentChunkName":"component---src-templates-blog-post-js","path":"/2016/10/on-building-fat-themes-for-plone.html/","result":{"data":{"site":{"siteMetadata":{"title":"Asko Soukka","author":"Asko Soukka"}},"markdownRemark":{"id":"a4423624-2037-58ed-9054-c6d389a6a646","fields":{"slug":"/2016/10/on-building-fat-themes-for-plone.html/"},"excerpt":"Could fat themes become the common ground between filesystem Plone\ndevelopers and through-the-web integrators? Plone ships with a lot of bundled batteries for…","html":"<p>Could fat themes become the common ground between filesystem Plone\ndevelopers and through-the-web integrators?</p>\n<p><a href=\"https://plone.org/\">Plone</a> ships with a lot of bundled batteries for\nbuilding sophisticated content management solutions. Content types,\nworkflows, portlets and event based content rules can all be customized\njust by using browser without writing a single line of new code. Yet,\nbad early experiences from maintaining such <em>through-the-web</em>\nimplementations, have made it common to disregard that approach, and\nprefer (more technical) file system based approach instead.</p>\n<p>During the last few years, thanks to\n<a href=\"http://docs.diazo.org/en/latest/\">Diazo</a> based <a href=\"https://pypi.python.org/pypi/plone.app.theming\">theming framework for\nPlone</a>, there has been a\nslow renaissance of <em>through-the-web</em> customization of Plone. Besides\nDiazo itself, the new theming framework introduced a clever new storage\nlayer, <a href=\"https://pypi.python.org/pypi/plone.resource\">plone.resource</a>,\nwhich supported both python packaged and through-the-web* developed\nthemes. In addition, the new theming editor made it easy to export\n<em>through-the-web</em> developed themes as re-usable zip packages.</p>\n<p>Initially, I was hoping for some kind of new TTW add-on approach to\nemerge on top <em>plone.resource</em>. Nowadays it’s getting clear that we are\njust going add more features into themes instead. Maybe it’s better\nthat way.</p>\n<p>By fat themes, I mean themes which do not only provide look, but also\nsome behavior for the site. Most of my such themes have provided all\ncustomizable configuration for their sites. The main benefit has been\nfaster iterations, because I’ve been able to deliver updates without\nrunning buildout or restarting the site.</p>\n<p>Obviously, configuring everything in theme is not yet possible with\nvanilla Plone, but requires selected theming related add-ons and tools:</p>\n<h2>collective.themefragments</h2>\n<p><a href=\"https://pypi.python.org/pypi/collective.themefragments\">collective.themefragments</a>\nmakes it possible to include Zope/Chameleon page template fragments in\nyour theme, and inject them into rendered content using\n<a href=\"http://docs.diazo.org/en/latest/\">Diazo</a> rules. It was originally\nproposed as a core feature for Plone theming (by Martin Aspeli), but\nbecause it was rejected, I had to to release it as its own add-on. Later\nI added support for restricted python scripts (callable from those\nfragments) and a tile to make fragments addable into Plone Mosaic\nlayouts.</p>\n<p>Use of themefragments requires the add-on to be available for Plone\n(e.g. by adding it to eggs in buildout and running the buildout) and\nwriting fragment templates into fragments* subdirectory of theme:</p>\n<p><strong>./fragments/title.pt:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\" cm-s-solarized\"><code><span>&lt;html&gt;\n&lt;title&gt;&lt;/title&gt;\n&lt;body&gt;\n  &lt;h1 tal:content=\"context/Title\"&gt;Title&lt;/h1&gt;\n&lt;body&gt;\n&lt;/html&gt;</span></code></pre>\n    </div>\n<p>And injecting them in <strong>./rules.xml</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">replace</span><span> </span><span class=\"cm-attribute\">css:theme</span><span>=</span><span class=\"cm-string\">\"h1\"</span><span> </span><span class=\"cm-attribute\">css:content</span><span>=</span><span class=\"cm-string\">\"h1\"</span><span> </span><span class=\"cm-attribute\">href</span><span>=</span><span class=\"cm-string\">\"/@@theme-fragment/title\"</span><span> </span><span class=\"cm-tag bracket\">/&gt;</span></code></pre>\n    </div>\n<p>or:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">replace</span><span> </span><span class=\"cm-attribute\">css:theme</span><span>=</span><span class=\"cm-string\">\"h1\"</span><span class=\"cm-tag bracket\">&gt;</span><span>\n</span><span>  </span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">xsl:copy-of</span><span> </span><span class=\"cm-attribute\">select</span><span>=</span><span class=\"cm-string\">\"document('@@theme-fragment/title',</span><span>\n</span><span>                       </span><span class=\"cm-string\">$diazo-base-document)/html/body/*\"</span><span> </span><span class=\"cm-tag bracket\">/&gt;</span><span>\n</span><span class=\"cm-tag bracket\">&lt;/</span><span class=\"cm-tag\">replace</span><span class=\"cm-tag bracket\">&gt;</span></code></pre>\n    </div>\n<p>depending on the flavor of your Diazo rules.</p>\n<p>It’s good to know that rendering fragments and executing their scripts\nrely on Zope 2 restricted python, and may cause unexpected\n<em>Unauthorized</em> exceptions (because you write them as admin, but viewers\nmay be unauthenticated). More than once I’ve needed to set the\nverbose-security flag to figure out the real reason of causing a such\nexception…</p>\n<h2>rapido.plone</h2>\n<p><a href=\"https://pypi.python.org/pypi/rapido.plone\">rapido.plone</a> must be\nmentioned, even I don’t have it in production yet by myself. Rapido\ngoes beyond just customizing existing features of Plone by making it\npossible to implement completely new interactive features purely in\ntheme. Rapido is the spiritual successor of\n<a href=\"https://pypi.python.org/pypi/Products.CMFPlomino\">Plomino</a> and probably\nthe most powerful add-on out there when it comes to customizing Plone.</p>\n<p>When compared to to themefragments, Rapido is more permissive in its\nscripts (e.g. allows use of plone.api).It also provides its own fast\nstorage layer (<a href=\"https://pypi.python.org/pypi/souper\">Souper</a>) for\nstoring, indexing and accessing custom data.</p>\n<h2>collective.themesitesetup</h2>\n<p><a href=\"https://pypi.python.org/pypi/collective.themesitesetup\">collective.themesitesetup</a>\nhas become my “Swiss Army knife” for configuring Plone sites from\ntheme. It’s a theming plugin, which imports <a href=\"https://pypi.python.org/pypi/Products.GenericSetup\">Generic\nSetup</a> steps\ndirectly from theme, when the theme is being activated. It also includes\nhelper views for exporting the current exportable site configuration\ninto editable theme directories.</p>\n<p>This is the theming add-on, which makes it possible to bundle custom\ncontent types, workflows, portlets, content rule configurations,\nregistry configuration and other <a href=\"https://pypi.python.org/pypi/Products.GenericSetup\">Generic\nSetup</a>-configurable\nstuff in a theme.</p>\n<p>Recently, I also added additional support for importing also translation\ndomains, XML schemas and custom permissions.</p>\n<p>A theme manifest enabling the plugin (once the plugin is available for\nPlone) could look like the:</p>\n<p><strong>./manifest.cfg:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">...</span><span>\n\n</span><span class=\"cm-header\">[theme:genericsetup]</span><span>\n</span><span class=\"cm-def\">permissions </span><span>=</span><span>\n</span><span class=\"cm-def\">    MyProject.AddBlogpost    MyProject</span><span>:</span><span class=\"cm-quote\"> Add Blogpost</span></code></pre>\n    </div>\n<p>and the theme package might include files like:</p>\n<div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-solarized\"><code><span>./install/registry.xml\n./install/rolemap.xml\n./install/types/Blog.xml\n./install/types.xml\n./install/workflows/blog_workflow/definition.xml\n./install/workflows/blog_workflow/scripts\n./install/workflows/blog_workflow/scripts/addExpirationDate.py\n./install/workflows.xml\n\n./models/Blog.xml\n\n./locales/manual.pot\n./locales/myproject.pot\n./locales/plone.pot\n./locales/fi/LC_MESSAGES/myproject.po\n./locales/fi/LC_MESSAGES/plone.po</span></code></pre>\n    </div>\n<h2>collective.taxonomy</h2>\n<p><a href=\"https://pypi.python.org/pypi/collective.taxonomy\">collective.taxonomy</a>\nis not really a theming plugin, but makes it possible to include large\nnamed vocabularies with translations in a <a href=\"https://pypi.python.org/pypi/Products.GenericSetup\">Generic\nSetup</a> profile. That\nmakes it a nice companion to\n<a href=\"https://pypi.python.org/pypi/collective.themesitesetup\">collective.themesitesetup</a>\nby keeping XML schemas clean from large vocabularies.</p>\n<h2>collective.dexteritytextindexer</h2>\n<p><a href=\"https://pypi.python.org/pypi/collective.dexteritytextindexer\">collective.dexteritytextindexer</a>\nis also “just” a normal add-on, but because it adds searchable text\nindexing support for custom fields of custom content types, it is a\nmandatory add-on when theme contains new content types.</p>\n<h2>plonetheme.webpacktemplate</h2>\n<p>Of course, the core of any theme is still about CSS and JavaScript to\nmake the site frontend look and feel good. Since\n<a href=\"http://plone.github.io/mockup/dev/\">Mockup</a> and Plone 5, we’ve had\n<a href=\"http://requirejs.org/\">RequireJS</a> based JavaScript modules and bundles\nfor Plone, and <a href=\"http://lesscss.org/\">LESS</a> based default theme,\n<a href=\"https://github.com/plone/plonetheme.barceloneta\">Barceloneta</a> (with\nalso <a href=\"https://github.com/plone/plonetheme.barceloneta/tree/less2sass\">SASS\nversion</a>\navailable). Unfortunately, thanks to the ever-changing state of\nJavaScript ecosystem, there’s currently no single correct tool or\nre-building and customizing these Plone frontend resource.</p>\n<p>My current tool of choice for building frontend resources for a Plone\ntheme is <a href=\"https://webpack.github.io/\">Webpack</a>, which (with help of my\n<a href=\"https://www.npmjs.com/package/plonetheme-webpack-plugin\">plugin</a>) makes\nit possible to bundle (almost) all frontend resources from Plone\nresource registry into theme, and inject my customizations while doing\nthat. And with a single “publicPath”, setting, the resulting theme\ncould load those bundles from a CDN.</p>\n<p>Configuring <a href=\"https://webpack.github.io/\">Webpack</a> is not the easiest\nthing to learn, and debugging possible bundle build issues could be even\nharder. Yet, I’ve tried to make it easy to try it out with\n<a href=\"https://github.com/ebrehault/plonetheme.webpacktemplate\">plonetheme.webpacktemplate</a>\n<a href=\"https://pypi.python.org/pypi/mr.bob\">mr.bob</a>-template.</p>\n<h2>plonetheme-upload</h2>\n<p>It should be clear by now, that even my themes are compatible and\ncustomizable with through-the-web* approach, I still work on filesystem\nwith version control and traditional Plone add-on development toolchain\n(I may even have automated acceptance tests for non-trivial theme\nfeatures). For a long time, I just configured a global\n<em>plone.resource</em>-directory in buildout and rsync’d theme updates to\nservers. It was about time to automate that.</p>\n<p><a href=\"https://www.npmjs.com/package/plonetheme-upload\">plonetheme-upload</a> is\na npm installable NodeJS-package, which provides a simple command line\ntool for uploading theme directory into Plone using <em>Upload Zip file</em>\nfeature of Plone Theme settings. Its usage is as simple as:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ plonetheme</span><span class=\"cm-attribute\">-upload</span><span> my-theme-dir http://my.plone.domain</span></code></pre>\n    </div>\n<p>Possibly the next version shoud include another CLI tool,\nplonetheme-download*, to help also <em>through-the-web</em> themers to keep\ntheir themes under version control.</p>","frontmatter":{"title":"On building fat themes for Plone","tags":["Diazo","Plone","RequireJS","Theming","TTW","Webpack"],"date":"October 04, 2016","published":"2016-10-04 06:00:00"}}},"pageContext":{"slug":"/2016/10/on-building-fat-themes-for-plone.html/","previous":{"fields":{"slug":"/2016/05/plone-barcelona-sprint-2016-report.html/"},"frontmatter":{"title":"Plone Barcelona Sprint 2016 Report"}},"next":{"fields":{"slug":"/2017/02/tile-based-layouts-and-esi-on-plone.html/"},"frontmatter":{"title":"Tile based layouts and ESI on Plone"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}