{"componentChunkName":"component---src-templates-blog-post-js","path":"/2016/05/plone-barcelona-sprint-2016-report.html/","result":{"data":{"site":{"siteMetadata":{"title":"Asko Soukka","author":"Asko Soukka"}},"markdownRemark":{"id":"4b9f1fd6-7c7a-5680-8448-8ac59b1fc6d8","fields":{"slug":"/2016/05/plone-barcelona-sprint-2016-report.html/"},"excerpt":"For the last week, I was lucky enough to be allowed to participate\nPlone community sprint at\nBarcelona.\nThe print was about polishing the new RESTful API for…","html":"<p>For the last week, I was lucky enough to be allowed to participate\n<a href=\"https://plone.com/\">Plone</a> <a href=\"https://plone.org/\">community</a> <a href=\"https://plone.org/events/sprints/barcelona-strategic-sprint-2016\">sprint at\nBarcelona</a>.\nThe print was about polishing the new RESTful API for Plone, and\nexperimenting with new front end and backend ideas, to prepare Plone for\nthe next decade (as visioned in its\n<a href=\"https://plone.org/roadmap/plone-2020\">roadmap</a>). And once again, the\ncommunity proved the power of its deeply rooted sprinting culture\n(<a href=\"https://en.wikipedia.org/wiki/Sprint_(software_development)#In_open_source\">adopted from the Zope\ncommunity</a>\nin the early 2000).</p>\n<p>Just think about this: You need to get some new features for your\nsophisticated software framework, but you don’t have resources to do it\non your own. So, you set up a community sprint: reserve the dates and\nthe venue, choose the topics for the sprint, advertise it or invite the\npeople you want, and get a dozen of experienced developers to\nenthusiastically work on your topics for more for a full week, mostly at\ntheir own cost. It’s a crazy bargain. More than too good to be true.\nYet, that’s just what seems to happen in the Plone community, over and\nover again.</p>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <iframe src=\"https://www.youtube.com/embed/NZN0A0U6ysg\" frameborder=\"0\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p>To summarize, the sprint had three tracks: At first there was the\ncompletion of <a href=\"https://github.com/plone/plone.restapi\">plone.restapi</a> —\na high quality and fully documented RESTful hypermedia API for all of\nthe currently supported Plone versions. And after this productive\nsprint, the first official release for that should be out at any time\nnow.</p>\n<p>Then there was the research and prototyping of a completely new REST API\nbased user interface for Plone 5 and 6: An extensible Angular 2 based\napp, which does all its interaction with Plone backend through the new\nRESTful API, and would universally support both server side and browser\nside rendering for fast response time, SEO and accessibility. Also these\ngoals were reached, all the major blockers were resolved, and the chosen\ntechnologies were proven to be working together. To pick of my favorite\nsideproduct from that track: <a href=\"https://github.com/plone/plonetheme.barceloneta/tree/less2sass\">Albert Casado, the designer of Plone 5\ndefault theme in LESS, appeared to migrate the theme to\nSASS</a>.</p>\n<p>Finally, there was our small backend moonshot team: Ramon and Aleix from\n<a href=\"http://iskra.cat\">Iskra</a> / <a href=\"http://www.intranetum.net\">Intranetum</a>\n(Catalonia), Eric from <a href=\"https://ampsport.com\">AMP Sport</a> (U.S.), Nathan\nfrom <a href=\"https://www.wildcardcorp.com\">Wildcard</a> (U.S.) and yours truly\nfrom <a href=\"https://jyu.fi/en\">University of Jyväskylä</a> (Finland). Our goal\nwas to start with an alternative lightweight REST backend for the new\nexperimental frontend, re-using the best parts of the current Plone\nstack when possible. Eventually, to meet our goals within the given time\nconstraints, we agreed on the following stack:\n<a href=\"http://aiohttp.readthedocs.io\">aiohttp</a> based HTTP server, the Plone\n<a href=\"https://pypi.python.org/pypi/plone.dexterity\">Dexterity content-type\nframework</a> (without any\nHTML views or forms) built around <a href=\"http://docs.zope.org/zopetoolkit\">Zope\nToolkit</a>, and\n<a href=\"http://www.zodb.org\">ZODB</a> as our database, all on Python 3.5 or\ngreater. Yet, <a href=\"http://docs.pylonsproject.org/projects/pyramid\">Pyramid</a>\nremains as a possible alternative for\n<a href=\"http://docs.zope.org/zopetoolkit\">ZTK</a> later.</p>\n<p><img src=\"/a38b9ba4c16351bc59e3336afc10e539/IMG_0599.jpg\" alt=\"image\"></p>\n<p>I was responsible for preparing the backend track in advance, and got us\nstarted with a <a href=\"https://github.com/plone/plone.server/blob/49461997a7f39e187d31c209c7a45ee590359ce6/sandbox.py\">a simple aiohttp based HTTP backend with experimental\nZODB connection supporting multiple concurrent transaction (when handled\nwith\ncare)</a>.\nMost of my actual sprint time went into upgrading Plone Dexterity\ncontent-type framework (and its tests) <a href=\"https://travis-ci.org/pyrenees\">to support Python\n3.5</a>. That also resulted in backwards\ncompatible fixes and pull requests for Python 3.5 support for all its\ndependencies in <code>plone.*</code> namespace.</p>\n<p>Ramon took the lead in integrating ZTK into the new backend, implemented\na content-negotiation and content-language aware traversal, and kept us\nmotivated by rising the sprint goal once features started clicking\ntogether. Aleix implemented an example <a href=\"https://github.com/pyrenees/docker\">docker-compose\n-setup</a> for everything being\ndevelopd at the sprint, and open-sourced their in-house OAuth-server as\n<a href=\"https://github.com/pyrenees/plone.oauth\">plone.oauth</a>. Nathan worked\noriginally in the frontend-team, but joined us for the last third of the\nsprint for pytest-based test setup and asyncio-integrated Elasticsearch\nintegration. Eric replaced Zope2-remains in our Dexterity fork with ZTK\nequivalents, and researched all the available options in integrating\ncontent serialization of\n<a href=\"https://github.com/plone/plone.restapi\">plone.restapi</a> into our\nindependent backend, eventually leading into a new package called\n<a href=\"https://github.com/pyrenees/plone.jsonserializer\">plone.jsonserializer</a>.</p>\n<p>The status of our <a href=\"https://github.com/plone/plone.server\">backend\nexperiment</a> after the sprint?\nSurprisingly good. We got far enough, that it’s almost easier to point\nthe missing and incomplete pieces that still remain on our to do:</p>\n<ul>\n<li>We ported all Plone Dexterity content-type framework dependencies to\nPython 3.5. We only had to fork the main\n<a href=\"https://github.com/pyrenees/plone.dexterity\">plone.dexterity</a>-package,\nwhich still has some details in its ZTK integration to do and tests\nto be fixed. Also special fields (namely files, richtext and maybe\nrelations) are still to be done.</li>\n<li>Deserialization from JSON to Dexterity was left incomplete, because\nwe were not able to fully re-use the existing\n<a href=\"https://github.com/plone/plone.restapi\">plone.restapi</a>-code (it\ndepends on z3c.form-deserializers, which we cannot depend on).</li>\n<li>We got a basic aiohttp-based Python 3.5 asyncio server running with\nZODB and asynchronous traverse, permissions, REST-service mapping\nand JSON-serialization of Dexterity content. Integration with the\nnew <a href=\"https://github.com/pyrenees/plone.oauth\">plone.oauth</a> and\n<a href=\"https://github.com/zopefoundation/zope.security\">zope.security</a> was\nalso almost done, and Ramon promised to continue to work on that to\nget the server ready for their in-house projects.</li>\n<li>Workflows and their integration are to be done. We planned to try\n[repoze.worklfow]{.title-ref} at first, and if that’s not a fit,\nthen look again into porting DCWorkflow or other 3rd party\nlibraries.</li>\n<li>Optimization for asyncio still needs more work, once the basic\nCRUD-features are in place.</li>\n</ul>\n<p>So, that was a lot of checkbox ticked in a single sprint, really\nsomething to be proud of. And if not enough, an overlapping <a href=\"http://gil.badall.net/2016/05/20/berlin-2016-sprint-update\">Plone\nsprint at Berlin got Python 3.5 upgrades of our stack even\nfurther</a>, my\nfavorite result being <a href=\"http://pythonhosted.org/zodb.py3migrate\">a helper tool for migrating Python 2 version ZODB\ndatabases to Python 3</a>. These\ntwo sprints really transformed the nearing end-of-life of Python 2 from\na threat into a possibility for our communitt, and confirmed that Plone\nhas a viable roadmap well beyond 2020.</p>\n<p>Personally, I just cannot wait for a suitable project with Dexterity\nbased content-types on a modern asyncio based http server, or the next\nchange meet our wonderful Catalan friends! :)</p>","frontmatter":{"title":"Plone Barcelona Sprint 2016 Report","tags":["AioHttp","Async","Dexterity","Plone","Sprint","Zodb"],"date":"May 22, 2016","published":"2016-05-22 06:00:00"}}},"pageContext":{"slug":"/2016/05/plone-barcelona-sprint-2016-report.html/","previous":{"fields":{"slug":"/2016/04/evolution-of-our-makefile-for-docker.html/"},"frontmatter":{"title":"Evolution of a Makefile for building projects with Docker"}},"next":{"fields":{"slug":"/2016/10/on-building-fat-themes-for-plone.html/"},"frontmatter":{"title":"On building fat themes for Plone"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}