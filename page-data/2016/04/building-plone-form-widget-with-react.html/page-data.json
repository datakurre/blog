{"componentChunkName":"component---src-templates-blog-post-js","path":"/2016/04/building-plone-form-widget-with-react.html/","result":{"data":{"site":{"siteMetadata":{"title":"Asko Soukka","author":"Asko Soukka"}},"markdownRemark":{"id":"2257bd98-0af6-5a29-bd05-f5335c0601e7","fields":{"slug":"/2016/04/building-plone-form-widget-with-react.html/"},"excerpt":"As much I love the new through-the-web resource registries in Plone 5 (I\nreally do), for the current Plone 5 sites in development or already in\nproduction, I’ve…","html":"<p>As much I love the new through-the-web resource registries in Plone 5 (I\nreally do), for the current Plone 5 sites in development or already in\nproduction, <a href=\"http://datakurre.pandala.org/2016/02/building-plone-theme-with-webpack.html\">I’ve ended up bundling all front-end resources into theme\nwith\nWebpack.</a>\nThat gives me the same “state of art” frontend toolchain to other\ncurrent projects, but also adds some overhead, because I need to do\nextra work for each new add-on with front-end resources. So, I still\ncannot really recommend <a href=\"https://webpack.github.io\">Webpack</a> for Plone,\nunless you are already familiar with Webpack. Yet, <a href=\"https://survivejs.com\">learning to bundle\neverything with Webpack</a> really helps to\nappreciate, how well Plone 5 resource registries already work.</p>\n<p>My current workflow, in brief, is to add all common configration into\n<a href=\"https://github.com/datakurre/plonetheme.webpack\">plonetheme.webpack</a>\nand re-use that as a git submodule in individual projects, similarly to\n<a href=\"https://github.com/datakurre/plonetheme.webpackexample\">plonetheme.webpackexample</a>.\nThe latter also includes the example code for this post. I was asked,\nhow everything goes together when using React and Redux for building\nwidgets for Plone. Here’s how…</p>\n<p>(You can see the complete example in\n<a href=\"https://github.com/datakurre/plonetheme.webpackexample\">plonetheme.webpackexample</a>,\nparticuarly in\n<a href=\"https://raw.githubusercontent.com/datakurre/plonetheme.webpackexample/master/resources/src/webpack/rules.xml\">1</a>\nand\n<a href=\"https://raw.githubusercontent.com/datakurre/plonetheme.webpackexample/master/resources/src/webpack/license-selector.jsx\">2</a>.)</p>\n<h2>Injecting a pattern with Diazo</h2>\n<p>In a usual use case, I have a custom content type (maybe TTW designed)\nwith simple textline or lines (textarea) fields, which require rich\nJavaScript widgets to ease entering of valid input.</p>\n<p>The current Plone convention for such widgets is to implement the widget\nas a <a href=\"http://patternslib.com\">Patternslib</a> compatible pattern. The\nrequired classname (and options) for the pattern initialization could,\nof course, be injected by registering a custom z3c.form widget for the\nfield, but it can also be done with a relatively simple\n<a href=\"http://diazo.org\">Diazo</a> rule with some XSLT:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-comment\">&lt;!-- Inject license selector pattern --&gt;</span><span>\n</span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">replace</span><span> </span><span class=\"cm-attribute\">css:content</span><span>=</span><span class=\"cm-string\">\"textarea#form-widgets-IDublinCore-rights\"</span><span class=\"cm-tag bracket\">&gt;</span><span>\n</span><span>  </span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">xsl:copy</span><span class=\"cm-tag bracket\">&gt;</span><span>\n</span><span>    </span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">xsl:attribute</span><span> </span><span class=\"cm-attribute\">name</span><span>=</span><span class=\"cm-string\">\"class\"</span><span class=\"cm-tag bracket\">&gt;</span><span>\n</span><span>      </span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">xsl:value-of</span><span> </span><span class=\"cm-attribute\">select</span><span>=</span><span class=\"cm-string\">\"concat(@class, ' pat-license-selector')\"</span><span> </span><span class=\"cm-tag bracket\">/&gt;</span><span>\n</span><span>    </span><span class=\"cm-tag bracket\">&lt;/</span><span class=\"cm-tag\">xsl:attribute</span><span class=\"cm-tag bracket\">&gt;</span><span>\n</span><span>    </span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">xsl:apply-templates</span><span> </span><span class=\"cm-attribute\">select</span><span>=</span><span class=\"cm-string\">\"@*[name()!='class']|node()\"</span><span> </span><span class=\"cm-tag bracket\">/&gt;</span><span>\n</span><span>  </span><span class=\"cm-tag bracket\">&lt;/</span><span class=\"cm-tag\">xsl:copy</span><span class=\"cm-tag bracket\">&gt;</span><span>\n</span><span class=\"cm-tag bracket\">&lt;/</span><span class=\"cm-tag\">replace</span><span class=\"cm-tag bracket\">&gt;</span></code></pre>\n    </div>\n<h2>Registering a pattern in ES6</h2>\n<p>Of course, you cannot yet use ES6 in Plone without figuring out a way to\nway to transpile it into JavaScript currently supported by your target\nbrowsers and RequireJS (that something, which comes quite easily with\nWebpack). If you can do it, registering a Patternslib compatible pattern\nin ES6 appeared to be really simple:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-def\">Registry</span><span> </span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-string\">'patternslib/core/registry'</span><span>;\n\n</span><span class=\"cm-comment\">// ... (imports for other requirements)</span><span>\n\n</span><span class=\"cm-variable\">Registry</span><span>.</span><span class=\"cm-property\">register</span><span>({\n\n</span><span>  </span><span class=\"cm-property\">name</span><span>:</span><span> </span><span class=\"cm-string\">'license-selector'</span><span>,\n</span><span>  </span><span class=\"cm-property\">trigger</span><span>:</span><span> </span><span class=\"cm-string\">'.pat-license-selector'</span><span>,\n\n</span><span>  </span><span class=\"cm-property\">init</span><span> </span><span>(</span><span class=\"cm-def\">$el</span><span>,</span><span> </span><span class=\"cm-def\">options</span><span>)</span><span> </span><span>{\n</span><span>    </span><span class=\"cm-comment\">// ... (pattern code)</span><span>\n</span><span>  </span><span>}\n});</span></code></pre>\n    </div>\n<h2>Choosing React + Redux for widgets</h2>\n<p>You must have already heard about the greatest benefits in using\n<a href=\"https://facebook.github.io/react\">React</a> as a view rendering library:\nsimple unidirectional data flow with stateless views and pretty fast\nrendering with “shadow DOM” based optimization. While there are many\nalternatives for React now, it probably has the best ecosystem, and\n<a href=\"https://github.com/Lucifier129/react-lite\">React Lite</a>-like optimized\nimplementations, make it small enough to be embeddable anywhere.</p>\n<p><a href=\"https://github.com/reactjs/redux\">Redux</a>, while technically independent\nfrom React, helps to enforce the React ideals of predictable stateless\nviews in your React app. In my use case of building widgets for\nindividual input fields, it feels optimal because of its “single data\nstore model”: It’s simple to both serialize the widget value (Redux\nstore state) into a single input field and de-serialize it later from\nthe field for editing.</p>\n<h2>Single file React + Redux skeleton</h2>\n<p>Even that Redux is very small library with simple conventions, it seems\nto be hard to find an easy example for using it. That’s because most of\nthe examples seem to assume that you are building a large scale app with\nthem. Yet, with a single widget, it would be nice to have all the\nrequired parts close to each other in a single file.</p>\n<p>As an example, I implemented a simple <a href=\"https://raw.githubusercontent.com/datakurre/plonetheme.webpackexample/master/resources/src/webpack/license-selector.jsx\">Creative Commons license selector\nwidget</a>,\nwhich includes all the required parts of React + Redux based widget in a\nsingle file (including Patternslib initialization):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-def\">React</span><span> </span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-string\">'react'</span><span>;\n</span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-def\">ReactDOM</span><span> </span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-string\">'react-dom'</span><span>;\n</span><span class=\"cm-keyword\">import</span><span> </span><span>{</span><span class=\"cm-def\">createStore</span><span>,</span><span> </span><span class=\"cm-def\">compose</span><span>}</span><span> </span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-string\">'redux'</span><span>\n</span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-def\">Registry</span><span> </span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-string\">'patternslib/core/registry'</span><span>;\n\n</span><span class=\"cm-comment\">// ... (all the required imports)</span><span>\n</span><span class=\"cm-comment\">// ... (all repeating marker values as constants)</span><span>\n\n</span><span class=\"cm-keyword\">function</span><span> </span><span class=\"cm-def\">deserialize</span><span>(</span><span class=\"cm-def\">value</span><span>)</span><span> </span><span>{\n</span><span>  </span><span class=\"cm-comment\">// ... (deserialize value from field into initial Redux store state)</span><span>\n}\n\n</span><span class=\"cm-keyword\">function</span><span> </span><span class=\"cm-def\">serialize</span><span>(</span><span class=\"cm-def\">state</span><span>)</span><span> </span><span>{\n</span><span>  </span><span class=\"cm-comment\">// ... (serialize value Redux store state into input field value)</span><span>\n}\n\n</span><span class=\"cm-keyword\">function</span><span> </span><span class=\"cm-def\">reducer</span><span>(</span><span class=\"cm-def\">state</span><span class=\"cm-operator\">=</span><span>{},</span><span> </span><span class=\"cm-def\">action</span><span>)</span><span> </span><span>{\n</span><span>  </span><span class=\"cm-comment\">// ... (\"reducer\" to apply action to state and return new state)</span><span>\n}\n\n</span><span class=\"cm-keyword\">export</span><span> </span><span class=\"cm-keyword\">default</span><span> </span><span class=\"cm-keyword\">class</span><span> </span><span class=\"cm-def\">LicenseSelector</span><span> </span><span class=\"cm-keyword\">extends</span><span> </span><span class=\"cm-variable\">React</span><span>.</span><span class=\"cm-property\">Component</span><span> </span><span>{\n</span><span>  </span><span class=\"cm-property\">render</span><span>()</span><span> </span><span>{\n</span><span>    </span><span class=\"cm-comment\">// ...</span><span>\n</span><span>  </span><span>}\n}\n\n</span><span class=\"cm-variable\">LicenseSelector</span><span>.</span><span class=\"cm-property\">propTypes</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span>{\n</span><span>  </span><span class=\"cm-comment\">// ...</span><span>\n};\n\n</span><span class=\"cm-comment\">// ... (all the required React components with property annotations)</span><span>\n\n</span><span class=\"cm-variable\">Registry</span><span>.</span><span class=\"cm-property\">register</span><span>({\n</span><span>  </span><span class=\"cm-property\">name</span><span>:</span><span> </span><span class=\"cm-string\">'license-selector'</span><span>,\n</span><span>  </span><span class=\"cm-property\">trigger</span><span>:</span><span> </span><span class=\"cm-string\">'.pat-license-selector'</span><span>,\n\n</span><span>  </span><span class=\"cm-property\">init</span><span> </span><span>(</span><span class=\"cm-def\">$el</span><span>)</span><span> </span><span>{\n</span><span>    </span><span class=\"cm-comment\">// Get form input element and hide it</span><span>\n</span><span>    </span><span class=\"cm-keyword\">const</span><span> </span><span class=\"cm-def\">el</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">$el</span><span>.</span><span class=\"cm-property\">hide</span><span>().</span><span class=\"cm-property\">get</span><span>(</span><span class=\"cm-number\">0</span><span>)\n\n</span><span>    </span><span class=\"cm-comment\">// Define Redux store and initialize it from the field value</span><span>\n</span><span>    </span><span class=\"cm-keyword\">const</span><span> </span><span class=\"cm-def\">store</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">createStore</span><span>(</span><span class=\"cm-variable\">reducer</span><span>,</span><span> </span><span class=\"cm-variable\">deserialize</span><span>(</span><span class=\"cm-variable-2\">$el</span><span>.</span><span class=\"cm-property\">val</span><span>()));\n\n</span><span>    </span><span class=\"cm-comment\">// Create container for the widget</span><span>\n</span><span>    </span><span class=\"cm-keyword\">const</span><span> </span><span class=\"cm-def\">container</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">document</span><span>.</span><span class=\"cm-property\">createElement</span><span>(</span><span class=\"cm-string\">'div'</span><span>);\n</span><span>    </span><span class=\"cm-variable-2\">el</span><span>.</span><span class=\"cm-property\">parentNode</span><span>.</span><span class=\"cm-property\">insertBefore</span><span>(</span><span class=\"cm-variable-2\">container</span><span>,</span><span> </span><span class=\"cm-variable-2\">el</span><span>);\n</span><span>    </span><span class=\"cm-variable-2\">container</span><span>.</span><span class=\"cm-property\">className</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-string\">'license-selector'</span><span>;\n\n</span><span>    </span><span class=\"cm-comment\">// Define main render</span><span>\n</span><span>    </span><span class=\"cm-keyword\">function</span><span> </span><span class=\"cm-def\">render</span><span>()</span><span> </span><span>{\n</span><span>      </span><span class=\"cm-comment\">// Serialize current widget value back into input field</span><span>\n</span><span>      </span><span class=\"cm-variable-2\">$el</span><span>.</span><span class=\"cm-property\">val</span><span>(</span><span class=\"cm-variable\">serialize</span><span>(</span><span class=\"cm-variable-2\">store</span><span>.</span><span class=\"cm-property\">getState</span><span>()));\n\n</span><span>      </span><span class=\"cm-comment\">// Render widget with current state</span><span>\n</span><span>      </span><span class=\"cm-variable\">ReactDOM</span><span>.</span><span class=\"cm-property\">render</span><span>((\n</span><span>        </span><span class=\"cm-operator\">&lt;</span><span class=\"cm-variable\">LicenseSelector</span><span>\n</span><span>          </span><span class=\"cm-comment\">// Pass state</span><span>\n</span><span>          </span><span>{</span><span class=\"cm-meta\">...</span><span class=\"cm-variable-2\">store</span><span>.</span><span class=\"cm-variable\">getState</span><span>()}\n</span><span>          </span><span class=\"cm-comment\">// Pass Redux action factories</span><span>\n</span><span>          </span><span class=\"cm-variable\">setSharing</span><span class=\"cm-operator\">=</span><span>{(</span><span class=\"cm-variable\">value</span><span>)</span><span> </span><span class=\"cm-operator\">=&gt;</span><span> </span><span class=\"cm-variable-2\">store</span><span>.</span><span class=\"cm-property\">dispatch</span><span>({\n</span><span>            </span><span class=\"cm-property\">type</span><span>:</span><span> </span><span class=\"cm-variable\">SET_SHARING</span><span>,\n</span><span>            </span><span class=\"cm-property\">value</span><span>:</span><span> </span><span class=\"cm-variable\">value</span><span>\n</span><span>          </span><span>})}\n</span><span>          </span><span class=\"cm-variable\">setCommercial</span><span class=\"cm-operator\">=</span><span>{(</span><span class=\"cm-variable\">value</span><span>)</span><span> </span><span class=\"cm-operator\">=&gt;</span><span> </span><span class=\"cm-variable-2\">store</span><span>.</span><span class=\"cm-property\">dispatch</span><span>({\n</span><span>            </span><span class=\"cm-property\">type</span><span>:</span><span> </span><span class=\"cm-variable\">SET_COMMERCIAL</span><span>,\n</span><span>            </span><span class=\"cm-property\">value</span><span>:</span><span> </span><span class=\"cm-variable\">value</span><span>\n</span><span>          </span><span>})}\n</span><span>          </span><span class=\"cm-string-2\">/&gt;</span><span>\n</span><span>      </span><span>),</span><span> </span><span class=\"cm-variable\">container</span><span>);\n</span><span>    </span><span>}\n\n</span><span>    </span><span class=\"cm-comment\">// Subscribe to render when state changes</span><span>\n</span><span>    </span><span class=\"cm-variable\">store</span><span>.</span><span class=\"cm-property\">subscribe</span><span>(</span><span class=\"cm-variable\">render</span><span>);\n\n</span><span>    </span><span class=\"cm-comment\">// Call initial render</span><span>\n</span><span>    </span><span class=\"cm-variable\">render</span><span>();\n</span><span>  </span><span>}\n});</span></code></pre>\n    </div>\n<p>Not too complex, after all…</p>\n<h2>Implementing and injecting a display widget as a themefragment</h2>\n<p>Usually displaying value from a custom field requires more HTML that’s\nconvenient to inline into Diazo rules, and may also require data, which\nis not rendered by the default Dexterity views. My convention for\nimplementing these “display widgets” in theme is the following\ncombination of theme fragments and Diazo rules.</p>\n<p>At first, I define a theme fragment. Theme fragments are simple TAL\ntemplates saved in <code>./fragments</code> folder inside a theme, and are\nsupported by installing\n<a href=\"https://pypi.python.org/pypi/collective.themefragments\">collective.themefragments</a>\nadd-on. My example theme has the following fragment at\n<code>./fragments/license.pt</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\" cm-s-solarized\"><code><span>&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"\n      xmlns:tal=\"http://xml.zope.org/namespaces/tal\"&gt;\n&lt;body&gt;\n&lt;p tal:condition=\"context/rights|undefined\"&gt;\n  &lt;img src=\"https://i.creativecommons.org/l/${context/rights}/4.0/88x31.png\"\n       alt=\"${context/rights}\" /&gt;\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;</span></code></pre>\n    </div>\n<p>Finally, the fragment is injected into desired place using Diazo. In my\nexample, I use Diazo inline XSLT to append the fragment into below\ncontent viewlets’ container:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-comment\">&lt;!-- Inject license badge below content body --&gt;</span><span>\n</span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">replace</span><span> </span><span class=\"cm-attribute\">css:content</span><span>=</span><span class=\"cm-string\">\"#viewlet-below-content-body\"</span><span>\n</span><span>         </span><span class=\"cm-attribute\">css:if-not-content</span><span>=</span><span class=\"cm-string\">\"textarea#form-widgets-IDublinCore-rights\"</span><span class=\"cm-tag bracket\">&gt;</span><span>\n</span><span>  </span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">xsl:copy</span><span class=\"cm-tag bracket\">&gt;</span><span>\n</span><span>    </span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">xsl:apply-templates</span><span> </span><span class=\"cm-attribute\">select</span><span>=</span><span class=\"cm-string\">\"@*|node()\"</span><span> </span><span class=\"cm-tag bracket\">/&gt;</span><span>\n</span><span>    </span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">xsl:copy-of</span><span> </span><span class=\"cm-attribute\">select</span><span>=</span><span class=\"cm-string\">\"document('@@theme-fragment/license',</span><span>\n</span><span>                         </span><span class=\"cm-string\">$diazo-base-document)/html/body/*\"</span><span> </span><span class=\"cm-tag bracket\">/&gt;</span><span>\n</span><span>  </span><span class=\"cm-tag bracket\">&lt;/</span><span class=\"cm-tag\">xsl:copy</span><span class=\"cm-tag bracket\">&gt;</span><span>\n</span><span class=\"cm-tag bracket\">&lt;/</span><span class=\"cm-tag\">replace</span><span class=\"cm-tag bracket\">&gt;</span></code></pre>\n    </div>","frontmatter":{"title":"Building Plone widget with React + Redux","tags":["Diazo","Patternslib","Plone","React","Redux","Webpack"],"date":"April 11, 2016","published":"2016-04-11 06:00:00"}}},"pageContext":{"slug":"/2016/04/building-plone-form-widget-with-react.html/","previous":{"fields":{"slug":"/2016/02/building-plone-theme-with-webpack.html/"},"frontmatter":{"title":"Building Plone theme with Webpack"}},"next":{"fields":{"slug":"/2016/04/evolution-of-our-makefile-for-docker.html/"},"frontmatter":{"title":"Evolution of a Makefile for building projects with Docker"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}