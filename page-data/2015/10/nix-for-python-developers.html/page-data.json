{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015/10/nix-for-python-developers.html/","result":{"data":{"site":{"siteMetadata":{"title":"Asko Soukka","author":"Asko Soukka"}},"markdownRemark":{"id":"dc21cc62-4445-5e82-966d-8ed8662ac208","fields":{"slug":"/2015/10/nix-for-python-developers.html/"},"excerpt":"About a week ago, I had the pleasure of giving a presentation about my\nNix\nexperiences\nat PyCon Finland 2015. This is an executive\nafterthought summary of that…","html":"<p>About a week ago, I had the pleasure of giving a <a href=\"http://www.slideshare.net/datakurre/nix-for-python-developers\">presentation about my\nNix\nexperiences</a>\nat <a href=\"http://fi.pycon.org/2015/\">PyCon Finland 2015</a>. This is an executive\nafterthought summary of that presentation, focusing only on <strong>how to use\nNix to build development environments</strong>. With a few cool additional\nexamples.</p>\n<h2>Installing Nix</h2>\n<p>The easiest way to install Nix for development usage is the default\nsingle user installation:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ sudo</span><span> </span><span class=\"cm-builtin\">mkdir</span><span> /nix</span><span>\n</span><span class=\"cm-def\">$ bash</span><span> &lt;(curl https://nixos.org/nix/install)</span></code></pre>\n    </div>\n<p>The default installation of Nix would install and build everything under\nthat <code>/nix</code>, which makes it easy to uninstall Nix at any point by simply\ndeleting that directory. It also comes configured for the latest nixpkgs\nrelease. (<a href=\"https://nixos.org/nix/\">Nix</a> is just the generic build system\nand package manager, <a href=\"https://nixos.org/nixpkgs/\">nixpkgs</a> is the\nrecommended community managed package collection for it.)</p>\n<p>After a successful installation, available packages can searched with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span>nix-env </span><span class=\"cm-attribute\">-qaP</span><span>|grep </span><span class=\"cm-attribute\">-i</span><span> needle</span></code></pre>\n    </div>\n<p>Alternative installation methods would be to follow that installer\nscript manually, build Nix from source or request your Linux\ndistribution to package it for you. Read more about all the options and\nbasic Nix usage at <a href=\"http://nixos.org/nix/manual/\">Nix Package Manager\nGuide</a>. Building Nix from source would\nallow to choose where stores the build (other place than <code>/nix</code>), but\nthat would also prevent it using the community binary caches (by default\nNix tries to download builds from the community binary cache at first\nand only then build them locally).</p>\n<p>Next you want to create a Nix configuration file <code>/etc/nix/nix.conf</code>\nwith the following content of a couple of special configuration flags:</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">gc-keep-outputs </span><span>=</span><span class=\"cm-quote\"> true</span><span>\n</span><span class=\"cm-def\">build-use-chroot </span><span>=</span><span class=\"cm-quote\"> true</span></code></pre>\n    </div>\n<p>Option <code>gc-keep-outputs = true</code> will configure Nix garbage collector to\nbe more developer friendly by not collecting build-time-only\ndependencies so easily. Option <code>build-use-chroot</code> will trigger isolated\nbuilds to ensure that nothing from your existing system can affect Nix\nbuilds.</p>\n<p>At any point of Nix use, you could clean up <code>/nix</code> and possibly free\nsome disk space by simply running its garbage collector:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-collect-garbage</span><span> </span><span class=\"cm-attribute\">-d</span></code></pre>\n    </div>\n<p>Never ever manually remove files from <code>/nix</code> unless you are completely\nuninstalling it.</p>\n<p>Nix offically supports Linux and OS X. Yet, if you are using OS X, you\nshould read <a href=\"https://nixos.org/wiki/Nix_on_OS_X\">special instructions from the wiki for OS\nX</a>. The OS X support has been in\nheavy development lately and not all available packages build yet on OS\nX. In addition to reading thw wiki page, you want to add the following\nlines into <code>/etc/nix/nix.conf</code> to ensure that Nix uses all available\nbinary builds also on OS X:</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">binary-caches </span><span>=</span><span class=\"cm-quote\"> https</span><span>:</span><span class=\"cm-quote\">//cache.nixos.org https</span><span>:</span><span class=\"cm-quote\">//hydra.nixos.org</span><span>\n</span><span class=\"cm-def\">use-binary-caches </span><span>=</span><span class=\"cm-quote\"> true</span></code></pre>\n    </div>\n<p>For all OS X related Nix issues, you can get help from ##nix-darwin\nchannel at Freenode IRC network.</p>\n<p>The community members told me having used Nix also on Cygwin, FreeBSD,\nOpenBSD, NetBSD, OpenSolaris and SmartOS. Yet, on other systems, you\nwould need to learn more about <a href=\"https://nixos.org/nixpkgs/manual/\">how nixpkgs\nwork</a> to get on of its standard build\nenvironments to work on your system.</p>\n<h2>Using Nix</h2>\n<p>Finally, let the fun begin:</p>\n<h3>Run anything with a one-liner</h3>\n<p><code>nix-shell</code> can be used to run anything available in nixpkgs simply\nwith:</p>\n<div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-solarized\"><code><span>$ nix-shell -p package --run \"command\"</span></code></pre>\n    </div>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-solarized\"><code><span>$ nix-shell -p python35 --run \"python3\"</span></code></pre>\n    </div>\n<p>Or:</p>\n<div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-solarized\"><code><span>$ nix-shell -p redis --run \"redis-server\"\n$ nix-shell -p nodejs --run \"node\"\n$ nix-shell -p graphviz --run \"dot -V\"\n$ nix-shell -p texLive --run \"pdflatex --help\"</span></code></pre>\n    </div>\n<p>Or with any number of packages:</p>\n<div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-solarized\"><code><span>$ nix-shell -p redis -p python35Packages.redis --run \"python3\"</span></code></pre>\n    </div>\n<p>Nix would simply either downloard or build all the defined packages,\nbuild a combined environment with all of them and then execute the given\ncommand in that environment. Everything would be installed under <code>/nix</code>\nand cleaned by garbage collector with <code>nix-collect-garbage -d</code>.</p>\n<h3>Get into shell with anything with a one-liner</h3>\n<p>Calling <code>nix-shell</code> without <code>--run</code> would drop you into an interactive\nshell with the required dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-shell</span><span> </span><span class=\"cm-attribute\">-p</span><span> texLive </span><span class=\"cm-attribute\">-p</span><span> gnumake </span><span class=\"cm-attribute\">-p</span><span> redis </span><span class=\"cm-attribute\">-p</span><span> python35</span></code></pre>\n    </div>\n<p>Entering <code>exit</code> would exit the shell as usual.</p>\n<p>Additionally, adding <code>--pure</code> into <code>nix-shell</code> arguments, would limit\nPATH and other environment variables to only include the listed packges\nwhile inside the shell.</p>\n<h3>Define script dependencies in a hashbang</h3>\n<p><code>nix-shell</code> can also be used in a shell script\n<a href=\"https://en.wikipedia.org/wiki/Shebang_(Unix)\">hashbang</a> line to execute\nthe script in an environment with any required dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-meta\">#! /usr/bin/env nix-shell</span><span>\n</span><span class=\"cm-meta\">#! nix-shell -i python3 -p python35Packages.tornado -p nodejs</span></code></pre>\n    </div>\n<p>The first line <code>#! /usr/bin/env nix-shell</code> is a standard hasbang-line,\nbut with <code>nix-shell</code> it can follow any number of <code>#! nix-shell</code> lines\ndefining the required dependencies using <code>nix-shell</code> command line\narguments.</p>\n<p>The most common arguments for nix-shell in hashbang use are:</p>\n<ul>\n<li><code>-p</code> to define packages available in the execution environment</li>\n<li><code>-i</code> to define the interpreter command (from listed packages) used\nto actually run the script.</li>\n</ul>\n<p><a href=\"https://nixos.org/nix/manual/#sec-nix-shell\">More examples are available in the Nix\nmanual.</a></p>\n<h3>Build complex development environments with Nix expressions</h3>\n<p>When one-liners are not enough, it’s possible to define a more complete\ndevelopment environment using the functional <a href=\"http://nixos.org/nix/manual/#chap-writing-nix-expressions\">Nix expression\nlanguage</a>.\nBoth <code>nix-shell</code> and <code>nix-build</code> can take a file with such expression as\ntheir first optional positional argument. Also both look for a file\nnamed <code>./default.nix</code> by default.</p>\n<p>You could use the following example as the base for your\n<code>./default.nix</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"nix\">\n      <pre class=\" cm-s-solarized\"><code><span>with import &lt;nixpkgs&gt; {};\nstdenv.mkDerivation rec {\n  name = \"env\";\n\n  # Mandatory boilerplate for buildable env\n  env = buildEnv { name = name; paths = buildInputs; };\n  builder = builtins.toFile \"builder.sh\" ''\n    source $stdenv/setup; ln -s $env $out\n  '';\n\n  # Customizable development requirements\n  buildInputs = [\n    # Add packages from nix-env -qaP | grep -i needle queries\n    redis\n\n    # With Python configuration requiring a special wrapper\n    (python35.buildEnv.override {\n      ignoreCollisions = true;\n      extraLibs = with python35Packages; [\n        # Add pythonPackages without the prefix\n        redis\n        tornado\n      ];\n    })\n  ];\n\n  # Customizable development shell setup with at last SSL certs set\n  shellHook = ''\n    export SSL_CERT_FILE=${cacert}/etc/ssl/certs/ca-bundle.crt\n  '';\n}</span></code></pre>\n    </div>\n<p>Running</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-build</span></code></pre>\n    </div>\n<p>would now create symlinked directory <code>./result</code> with <code>./result/bin</code> with\nboth <code>./result/bin/redis</code> and <code>./result/bin/python3</code> with <em>redis</em> and\n<em>tornado</em> as importable packages. That build is comparable to familiar\nPython <a href=\"https://pypi.python.org/pypi/virtualenv\">virtualenv</a>, but for\nany dependencies, not just Python packages.</p>\n<p>The resulting Python interpreter <code>./result/bin/python3</code> could also be\nused with IDE, e.g. configured as a project interpreter for PyCharm.</p>\n<p>The resulting directory name can be changed from <em>result</em> into something\nelse with argument <code>-o myname</code>. The directory also works as a so called\ngarbage collection root, which prevents Nix garbage collection from\nclearing it until the directory (symlink) has been renamed, moved or\ndeleted.</p>\n<p>Running</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-shell</span></code></pre>\n    </div>\n<p>would enter into an interactive shell with all dependencies in path as\nexpected.</p>\n<p>Running</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-shell</span><span> </span><span class=\"cm-attribute\">--run</span><span> </span><span class=\"cm-string\">\"python3\"</span></code></pre>\n    </div>\n<p>would start that Python interpreter defined in <code>./default.nix</code> with\n<em>tornado</em> and <em>redis</em> packages (and also the redis server available in\nthe process’ environment).</p>\n<p>Finally, to turn the environment into a distributable docker container,\ncheck my <a href=\"https://github.com/datakurre/nix-build-pack-docker\">Nix to Docker build\npack</a> example at\nGitHub.</p>\n<h3>Add custom dependencies into a Nix expression</h3>\n<p>Sometimes, yet unfortunatley often with Python packages, not all your\ndependencies are defined in nixpkgs already. The best solution, of\ncourse, would be to make pull requests to add them there, but it’s also\npossible to just define them per project in the very same project\nspecific <code>./default.nix</code>.</p>\n<p>For example, let’s upgrade <em>tornado</em> into its latest beta, and add a\ncomeletely new Python package, <em>redis_structures</em>, with the following\ndependencies pattern:</p>\n<div class=\"gatsby-highlight\" data-language=\"nix\">\n      <pre class=\" cm-s-solarized\"><code><span>with import &lt;nixpkgs&gt; {};\nlet dependencies = rec {\n\n  # Customized existing packages using expression override\n  _tornado = with python35Packages; tornado.override rec {\n    name = \"tornado-4.3b1\";\n    src = fetchurl {\n      url = \"https://pypi.python.org/packages/source/t/tornado/${name}.tar.gz\";\n      sha256 = \"c7ddda61d9469c5745f3ac00e480ede0703dd1a4ef540a3d9bd5e03e9796e430\";\n    };\n  };\n\n  # Custom new packages using buildPythonPackage expression\n  _redis_structures= with python35Packages; buildPythonPackage rec {\n    name = \"redis_structures-0.1.3\";\n    src = fetchurl {\n      url = \"https://pypi.python.org/packages/source/r/redis_structures/${name}.tar.gz\";\n      sha256 = \"4076cff3ea91b7852052d963bfd2533c74e8a0054826584e058e685a911f56c5\";\n    };\n    # Fix broken packaging (package is missing README.rst)\n    prePatch = \"touch README.rst\";\n    # Define package requirements (without pythonPackages prefix)\n    propagatedBuildInputs = [ redis ];\n  };\n};\nin with dependencies;\nstdenv.mkDerivation rec {\n  name = \"env\";\n\n  # Mandatory boilerplate for buildable env\n  env = buildEnv { name = name; paths = buildInputs; };\n  builder = builtins.toFile \"builder.sh\" ''\n    source $stdenv/setup; ln -s $env $out\n  '';\n\n  # Customizable development requirements\n  buildInputs = [\n    # Add packages from nix-env -qaP | grep -i needle queries\n    redis\n\n    # With Python configuration requiring a special wrapper\n    (python35.buildEnv.override {\n      ignoreCollisions = true;\n      extraLibs = with python35Packages; [\n        # Add pythonPackages without the prefix\n        _tornado\n        _redis_collections\n      ];\n    })\n  ];\n\n  # Customizable development shell setup with at last SSL certs set\n  shellHook = ''\n    export SSL_CERT_FILE=${cacert}/etc/ssl/certs/ca-bundle.crt\n  '';\n}</span></code></pre>\n    </div>\n<p>See the full explanation of <a href=\"https://nixos.org/nixpkgs/manual/#ssec-build-python-package\">buildPythonPackage-expression in nixpkgs\nmanual</a>.</p>\n<h2>Generating Nix expressions</h2>\n<p>The only real issue in using Nix with Python is that only a portion of\npackages released at <a href=\"https://pypi.python.org/\">PyPI</a> are available in\nnixpkgs. And those, which are available, have usually only the latest\nversion there.</p>\n<p>If it would be trivial to generate Nix-expressions for all public Python\npackages, that would have already been done. Unfortunately, it’s not\nand it’s not been done. And it’s not because of Nix, but because of\nthe various imperfect ways how Python packages can define their\ndependencies.</p>\n<p>I was told that things would get better once\n<a href=\"https://www.python.org/dev/peps/pep-0426/\">PEP426</a> is implemented and\nused in practice.</p>\n<p>Nevertheless, there are many tools to try for generating and maintaining\nNix expressions for Python packages and projects. Each of them may\nemphase different things and may or may not always produce directly\nusable expression:</p>\n<ul>\n<li><a href=\"https://github.com/garbas/pypi2nix\">https://github.com/garbas/pypi2nix</a></li>\n<li><a href=\"https://github.com/offlinehacker/pypi2nix\">https://github.com/offlinehacker/pypi2nix</a></li>\n<li><a href=\"https://github.com/proger/python2nix\">https://github.com/proger/python2nix</a></li>\n<li><a href=\"https://github.com/ktosiek/pip2nix\">https://github.com/ktosiek/pip2nix</a></li>\n<li><a href=\"https://github.com/datakurre/collective.recipe.nix\">https://github.com/datakurre/collective.recipe.nix</a></li>\n</ul>\n<p>Personally I’m using and developing only\n<a href=\"https://pypi.python.org/pypi/collective.recipe.nix\">collective.recipe.nix</a>,\nwhich is currently only usable out of the box for Python 2.7 projects,\nI’m working on support for Python 3.x projects and easier usage.</p>\n<h2>Full example project</h2>\n<p>Finally, let’s try developing a <a href=\"https://gist.github.com/datakurre/2076247049dabe16627f\">demo Python 3.5 async / await\nHTTP-AMQP-bridge</a>:\na http-service, which distributes all the request to workers through\nAMQP broker. Just for fun:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ git</span><span> clone https://gist.github.com/datakurre/2076247049dabe16627f</span><span>\n</span><span class=\"cm-def\">$ cd</span><span> 2076247049dabe16627f</span><span>\n</span><span class=\"cm-def\">$ ls</span><span> </span><span class=\"cm-attribute\">-1</span><span>\n</span><span>connection.py</span><span>\n</span><span>default.nix</span><span>\n</span><span>server.py</span><span>\n</span><span>setup.py</span><span>\n</span><span>supervisord.nix</span><span>\n</span><span>worker.py</span></code></pre>\n    </div>\n<p>This project only has a few files:</p>\n<p><code>./setup.py</code></p>\n<p>:   to define the python package</p>\n<p><code>./connection.py</code></p>\n<p>:   to manage the AMQP connection and give a new channel when requested\n(AMQP channels are kind of virtual AMQP connections running on top\nof the one real connection)</p>\n<p><code>./server.py</code></p>\n<p>:   to run a tornado server to handle the incoming requests by passing\nthem to AMQP broker and returning the result</p>\n<p><code>./worker.py</code></p>\n<p>:   to handle requests from AMQP broken and return the results back to\nthe serer.</p>\n<p><code>./default.nix</code></p>\n<p>:   the nix expression to setup up a development environment with\nRabbitMQ and Python with required packages</p>\n<p><code>./supervisord.nix</code></p>\n<p>:   an alternative nix expression for setting an environment with\npre-configured supervisord.</p>\n<p>Let see the <code>./default.nix</code> in detail:</p>\n<div class=\"gatsby-highlight\" data-language=\"nix\">\n      <pre class=\" cm-s-solarized\"><code><span>with import &lt;nixpkgs&gt; {};\nlet dependencies = rec {\n  _erlang = erlang.override { wxSupport = false; };\n  _rabbitmq_server = rabbitmq_server.override { erlang = _erlang; };\n  _enabled_plugins = builtins.toFile \"enabled_plugins\" \"[rabbitmq_management].\";\n  _tornado = with python35Packages; tornado.override {\n    name = \"tornado-4.3b1\";\n    src = fetchurl {\n      url = \"https://pypi.python.org/packages/source/t/tornado/tornado-4.3b1.tar.gz\";\n      sha256 = \"c7ddda61d9469c5745f3ac00e480ede0703dd1a4ef540a3d9bd5e03e9796e430\";\n    };\n  };\n  _aioamqp = with python35Packages; buildPythonPackage {\n    name = \"aioamqp-0.4.0\";\n    src = fetchurl {\n      url = \"https://pypi.python.org/packages/source/a/aioamqp/aioamqp-0.4.0.tar.gz\";\n      sha256 = \"4882ca561f1aa88beba3398c8021e7918605c371f4c0019b66c12321edda10bf\";\n    };\n  };\n};\nin with dependencies;\nstdenv.mkDerivation rec {\n  name = \"env\";\n  env = buildEnv { name = name; paths = buildInputs; };\n  builder = builtins.toFile \"builder.pl\" ''\n    source $stdenv/setup; ln -s $env $out\n  '';\n  buildInputs = [\n    _rabbitmq_server\n    (python35.buildEnv.override {\n      ignoreCollisions = true;\n      extraLibs = [\n        _tornado\n        _aioamqp\n      ];\n    })\n  ];\n  shellHook = ''\n    mkdir -p $PWD/var\n    export RABBITMQ_LOG_BASE=$PWD/var\n    export RABBITMQ_MNESIA_BASE=$PWD/var\n    export RABBITMQ_ENABLED_PLUGINS_FILE=${_enabled_plugins}\n    export SSL_CERT_FILE=${cacert}/etc/ssl/certs/ca-bundle.crt\n    export PYTHONPATH=`pwd`\n  '';\n}</span></code></pre>\n    </div>\n<p>The most interesting part is the <code>shellHook</code> (for the <code>nix-shell</code>\ncommand) at the end, which configures RabbitMQ server to be run so that\nits state is stored under the current project directory (<code>./var</code>). Also\nnote, how <code>builtins.toFile</code> nix command is used to create a project\nspecific configuration file for RabbitMQ, to be stored in Nix-store (to\nnot bloat the project directory and to be purged with Nix garbage\ncollector). Any app supporting configuration using environment variables\ncould have a development environment specific configuration in the same\nway.</p>\n<p>To test this out, simply start a few terminals to start RabbitMQ, server\nand workers (as many as you’d like to):</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-shell</span><span> </span><span class=\"cm-attribute\">--run</span><span> </span><span class=\"cm-string\">\"rabbitmq-server\"</span><span>\n</span><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-shell</span><span> </span><span class=\"cm-attribute\">--run</span><span> </span><span class=\"cm-string\">\"python3 server.py\"</span><span>\n</span><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-shell</span><span> </span><span class=\"cm-attribute\">--run</span><span> </span><span class=\"cm-string\">\"python3 worker.py\"</span><span>\n</span><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-shell</span><span> </span><span class=\"cm-attribute\">--run</span><span> </span><span class=\"cm-string\">\"python3 worker.py\"</span><span>\n</span><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-shell</span><span> </span><span class=\"cm-attribute\">--run</span><span> </span><span class=\"cm-string\">\"python3 worker.py\"</span></code></pre>\n    </div>\n<p>Then then watch requests getting nicely balanced between all the\nworkers:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ ab</span><span> </span><span class=\"cm-attribute\">-n</span><span> </span><span class=\"cm-number\">1000</span><span> </span><span class=\"cm-attribute\">-c</span><span> </span><span class=\"cm-number\">100</span><span> http://localhost:8080/</span></code></pre>\n    </div>\n<p>You can also follow requests through RabbitMQ’s management view at\n<code>http://localhost:15672</code> (user: guest, password: guest).</p>\n<p>If you’d like to develop the project with IDE, just persist the\nenvironment with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-build</span></code></pre>\n    </div>\n<p>And point your IDE (e.g. PyCharm) to use the Python interpreter created\ninto <code>./result/bin/python3</code>.</p>\n<p>As an extra, there’s an alternative environment with pre-configured\nsupervisord:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-shell</span><span> supervisord.nix</span><span>\n</span><span>[nix-shell]</span><span class=\"cm-def\">$ supervisord</span><span>\n</span><span>[nix-shell]</span><span class=\"cm-def\">$ supervisorctl</span><span> status</span><span>\n</span><span>rabbitmq                         RUNNING   pid </span><span class=\"cm-number\">17683</span><span>, uptime </span><span class=\"cm-number\">0</span><span>:00:01</span><span>\n</span><span>server                           RUNNING   pid </span><span class=\"cm-number\">17684</span><span>, uptime </span><span class=\"cm-number\">0</span><span>:00:01</span><span>\n</span><span>worker:worker-0                  RUNNING   pid </span><span class=\"cm-number\">17682</span><span>, uptime </span><span class=\"cm-number\">0</span><span>:00:01</span><span>\n</span><span>worker:worker-1                  RUNNING   pid </span><span class=\"cm-number\">17681</span><span>, uptime </span><span class=\"cm-number\">0</span><span>:00:01</span><span>\n</span><span>[nix-shell]</span><span class=\"cm-def\">$ supervisorctl</span><span> shutdown</span><span>\n</span><span>Shut down</span><span>\n</span><span>[nix-shell]</span><span class=\"cm-def\">$ exit</span></code></pre>\n    </div>\n<h2>More information</h2>\n<p>Nix manual, <a href=\"https://nixos.org/nix/\">https://nixos.org/nix/</a></p>\n<p>:   The official generic Nix manual for installing Nix, learning its\nbuilt-in commands and the Nix language</p>\n<p>Nixpkgs manual, <a href=\"https://nixos.org/nixpkgs/\">https://nixos.org/nixpkgs/</a></p>\n<p>:   The Nixpkgs manual for learning conventions and utilities provided\nin the Nix package collection (Nixpkgs)</p>\n<p>Nix planet, <a href=\"http://planet.nixos.org/\">http://planet.nixos.org/</a></p>\n<p>:   Planet for Nix community bloggers</p>\n<p>Nixpills, <a href=\"http://lethalman.blogspot.fi/search/label/nixpills\">http://lethalman.blogspot.fi/search/label/nixpills</a></p>\n<p>:   Famous blog series for learning how Nix really works in depth</p>\n<p>Nix Conf, <a href=\"http://conf.nixos.org/\">http://conf.nixos.org/</a></p>\n<p>:   The first Nix conference site, hopefully hosting slides and links to\nrecordings after the conference…</p>\n<p><code>#nixos</code></p>\n<p>:   The Nix, Nixpkgs and NixOS community IRC channel at Freenode</p>\n<p><code>##nix-darwin</code></p>\n<p>:   The Nix Darwin (OS X) user community IRC channel at Freenode</p>","frontmatter":{"title":"Nix for Python developers","tags":["Python","Docker","Nix"],"date":"October 28, 2015","published":"2015-10-28 06:00:00"}}},"pageContext":{"slug":"/2015/10/nix-for-python-developers.html/","previous":{"fields":{"slug":"/2015/09/generating-plone-theming-mockups-with.html/"},"frontmatter":{"title":"Generating Plone theming mockups with Chameleon"}},"next":{"fields":{"slug":"/2015/11/creating-jupyter-docker-containers-with.html/"},"frontmatter":{"title":"Creating Jupyter Docker-containers with Nix"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}