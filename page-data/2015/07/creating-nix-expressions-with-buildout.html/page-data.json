{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015/07/creating-nix-expressions-with-buildout.html/","result":{"data":{"site":{"siteMetadata":{"title":"Asko Soukka","author":"Asko Soukka"}},"markdownRemark":{"id":"71329e48-a7f8-5102-8744-dc072b35e80d","fields":{"slug":"/2015/07/creating-nix-expressions-with-buildout.html/"},"excerpt":"The greatest blocker for using Nix or complex\nPython projects like Plone, I think, is the work\nneeded to make all required Python-packages (usally very specific…","html":"<p>The greatest blocker for using <a href=\"https://nixos.org/nix/\">Nix</a> or complex\nPython projects like <a href=\"https://plone.org/\">Plone</a>, I think, is the work\nneeded to make all required Python-packages (usally very specific\nversions) available in nix expression. Also, in the most extreme, that\nwould require every version for every package in PyPI in\n<a href=\"https://nixos.org/nixpkgs/\">nixpkgs</a>.</p>\n<h2>Announcing collective.recipe.nix</h2>\n<p><a href=\"https://github.com/datakurre/collective.recipe.nix\">collective.recipe.nix</a>\nis my try for generating nix expressions for arbitrary Python projects.\nIt’s an experimental buildout recipe, which re-uses <em>zc.recipe.egg</em> for\nfiguring out all the required packages and their dependencies.</p>\n<h2>Example of usage</h2>\n<p>At first, bootstrap your environment by defining python with buildout in\n<code>./default.nix</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-solarized\"><code><span>with import &lt;nixpkgs&gt; {}; {\n  myEnv = stdenv.mkDerivation {\n    name = \"myEnv\";\n    buildInputs = [\n      pythonPackages.buildout\n    ];\n    shellHook = ''\n      export SSL_CERT_FILE=~/.nix-profile/etc/ca-bundle.crt\n    '';\n  };\n}</span></code></pre>\n    </div>\n<p>And example <code>./buildout.cfg</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[buildout]</span><span>\n</span><span class=\"cm-def\">parts </span><span>=</span><span>\n</span><span class=\"cm-def\">    i18ndude</span><span>\n</span><span class=\"cm-def\">    releaser</span><span>\n</span><span class=\"cm-def\">    robot</span><span>\n</span><span class=\"cm-def\">    sphinx</span><span>\n\n</span><span class=\"cm-header\">[i18ndude]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> collective.recipe.nix</span><span>\n</span><span class=\"cm-def\">eggs </span><span>=</span><span class=\"cm-quote\"> i18ndude</span><span>\n\n</span><span class=\"cm-header\">[releaser]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> collective.recipe.nix</span><span>\n</span><span class=\"cm-def\">eggs </span><span>=</span><span class=\"cm-quote\"> zest.releaser[recommended]</span><span>\n\n</span><span class=\"cm-header\">[robot]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> collective.recipe.nix</span><span>\n</span><span class=\"cm-def\">eggs </span><span>=</span><span class=\"cm-quote\"> robotframework</span><span>\n</span><span class=\"cm-def\">propagated-build-inputs </span><span>=</span><span>\n</span><span class=\"cm-def\">    robotframework</span><span>=</span><span class=\"cm-quote\">robotframework-debuglibrary</span><span>\n</span><span class=\"cm-def\">    robotframework</span><span>=</span><span class=\"cm-quote\">robotframework-selenium2library</span><span>\n</span><span class=\"cm-def\">    robotframework</span><span>=</span><span class=\"cm-quote\">robotframework-selenium2screenshots</span><span>\n\n</span><span class=\"cm-header\">[sphinx]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> collective.recipe.nix</span><span>\n</span><span class=\"cm-def\">eggs </span><span>=</span><span class=\"cm-quote\"> sphinx</span><span>\n</span><span class=\"cm-def\">propagated-build-inputs </span><span>=</span><span>\n</span><span class=\"cm-def\">    sphinx</span><span>=</span><span class=\"cm-quote\">sphinxcontrib_robotframework[docs]</span></code></pre>\n    </div>\n<p>Run the buildout:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-shell</span><span> </span><span class=\"cm-attribute\">--run</span><span> buildout</span></code></pre>\n    </div>\n<p>The recipe generates three kind of expressions:</p>\n<ul>\n<li>default [name].nix usable with nix-shell</li>\n<li>buildEnv based [name]-env.nix usable with nix-build</li>\n<li>buildPythonPackage based [name]-package.nix usable with nix-env -i\n-f</li>\n</ul>\n<p>So, now you should be able to run zest.releaser with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-shell</span><span> releaser.nix </span><span class=\"cm-attribute\">--run</span><span> fullrelease</span></code></pre>\n    </div>\n<p>You could also build Nix-environment with symlinks in folder\n<code>./releaser</code> or <a href=\"http://datakurre.pandala.org/2015/07/building-docker-containers-from-scratch.html\">into a Docker\nimage</a>\nwith:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-build</span><span> releaser-env.nix </span><span class=\"cm-attribute\">-o</span><span> releaser</span></code></pre>\n    </div>\n<p>Finally, you could install zest.releaser into your current Nix-profile\nwith:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-env</span><span> </span><span class=\"cm-attribute\">-i</span><span> </span><span class=\"cm-attribute\">-f</span><span> releaser-zest_releaser.nix</span></code></pre>\n    </div>","frontmatter":{"title":"Creating Nix-expressions with buildout","tags":["Buildout","Nix","Plone"],"date":"July 08, 2015","published":"2015-07-08 06:00:00"}}},"pageContext":{"slug":"/2015/07/creating-nix-expressions-with-buildout.html/","previous":{"fields":{"slug":"/2015/07/stateless-nix-environments-revisited.html/"},"frontmatter":{"title":"Stateless Nix environments revisited"}},"next":{"fields":{"slug":"/2015/07/building-docker-containers-from-scratch.html/"},"frontmatter":{"title":"Building Docker containers from scratch using Nix"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}