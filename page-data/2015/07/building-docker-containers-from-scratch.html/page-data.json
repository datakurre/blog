{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015/07/building-docker-containers-from-scratch.html/","result":{"data":{"site":{"siteMetadata":{"title":"Asko Soukka","author":"Asko Soukka"}},"markdownRemark":{"id":"dfc1bc95-1a0b-5e8b-9ba0-1ede55eacda3","fields":{"slug":"/2015/07/building-docker-containers-from-scratch.html/"},"excerpt":"Nix makes it reasonable to build Docker\ncontainers from scratch. The resulting containers are still big (yet I\nheard there’s ongoing work to make Nix builds…","html":"<p><a href=\"https://nixos.org/nix/\">Nix</a> makes it reasonable to build Docker\ncontainers from scratch. The resulting containers are still big (yet I\nheard there’s ongoing work to make Nix builds more lean), but at least\nyou don’t need to think about choosing and keeping the base images up\nto date.</p>\n<p>Next follows an example, how to make a Docker image for\n<a href=\"https://nixos.org/nix/\">Plone</a> with Nix.</p>\n<h2>Creating Nix expression with collective.recipe.nix</h2>\n<p>At first, we need Nix expression for Plone. Here I use one built with\n<a href=\"http://datakurre.pandala.org/2015/07/creating-nix-expressions-with-buildout.html\">my buildout based\ngenerator</a>,\n<a href=\"https://pypi.python.org/pypi/collective.recipe.nix\">collective.recipe.nix</a>.\nIt generates a few exression, including <code>plone.nix</code> and <code>plone-env.nix</code>.\nThe first one is only really usable with <code>nix-shell</code>, but the other one\ncan be used building a standalone Plone for Docker image.</p>\n<p>To create <code>./plone-env.nix</code>, I need a buildout environment in\n<code>./default.nix</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-solarized\"><code><span>with import &lt;nixpkgs&gt; {}; {\n  myEnv = stdenv.mkDerivation {\n    name = \"myEnv\";\n    buildInputs = [\n      pythonPackages.buildout\n    ];\n    shellHook = ''\n      export SSL_CERT_FILE=~/.nix-profile/etc/ca-bundle.crt\n    '';\n  };\n}</span></code></pre>\n    </div>\n<p>And a minimal Plone buildout using my recipe in <code>./buildout.cfg</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[buildout]</span><span>\n</span><span class=\"cm-def\">extends </span><span>=</span><span class=\"cm-quote\"> https</span><span>:</span><span class=\"cm-quote\">//dist.plone.org/release/4-latest/versions.cfg</span><span>\n</span><span class=\"cm-def\">parts </span><span>=</span><span class=\"cm-quote\"> plone</span><span>\n</span><span class=\"cm-def\">versions </span><span>=</span><span class=\"cm-quote\"> versions</span><span>\n\n</span><span class=\"cm-header\">[instance]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> plone.recipe.zope2instance</span><span>\n</span><span class=\"cm-def\">eggs </span><span>=</span><span class=\"cm-quote\"> Plone</span><span>\n</span><span class=\"cm-def\">user </span><span>=</span><span class=\"cm-quote\"> admin</span><span>:</span><span class=\"cm-quote\">admin</span><span>\n\n</span><span class=\"cm-header\">[plone]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> collective.recipe.nix</span><span>\n</span><span class=\"cm-def\">eggs </span><span>=</span><span>\n</span><span class=\"cm-def\">    ${instance</span><span>:</span><span class=\"cm-quote\">eggs}</span><span>\n</span><span class=\"cm-def\">    plone.recipe.zope2instance</span><span>\n\n</span><span class=\"cm-header\">[versions]</span><span>\n</span><span class=\"cm-def\">zc.buildout </span><span>=</span><span>\n</span><span class=\"cm-def\">setuptools </span><span>=</span></code></pre>\n    </div>\n<p>And finally produce both <code>plone.nix</code> and the required <code>plone-env.nix</code>\nwith:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-shell</span><span> </span><span class=\"cm-attribute\">--run</span><span> buildout</span></code></pre>\n    </div>\n<h2>Creating Docker container with Nix Docker buildpack</h2>\n<p>Next up is building the container with our Nix expression with the help\nof a builder container, which I call <a href=\"https://github.com/datakurre/nix-build-pack-docker\">Nix Docker\nbuildpack</a>.</p>\n<p>At first, we need to clone that:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ git</span><span> clone https://github.com/datakurre/nix-build-pack-docker</span><span>\n</span><span class=\"cm-def\">$ cd</span><span> nix-build-pack-docker</span></code></pre>\n    </div>\n<p>And build the builder:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ cd</span><span> builder</span><span>\n</span><span class=\"cm-def\">$ docker</span><span> build </span><span class=\"cm-attribute\">-t</span><span> nix-build-pack </span><span class=\"cm-attribute\">--rm</span><span class=\"cm-operator\">=</span><span class=\"cm-atom\">true</span><span> </span><span class=\"cm-attribute\">--force-rm</span><span class=\"cm-operator\">=</span><span class=\"cm-atom\">true</span><span> </span><span class=\"cm-attribute\">--no-cache</span><span class=\"cm-operator\">=</span><span class=\"cm-atom\">true</span><span> .</span><span>\n</span><span class=\"cm-def\">$ cd</span><span> ..</span></code></pre>\n    </div>\n<p>Now the builder can be used to build a tarball, which only contains the\nbuilt Nix derivation Plone. Let’s copy the created <code>plone-env.nix</code> into\nthe current working directory and run:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ docker</span><span> run </span><span class=\"cm-attribute\">--rm</span><span> </span><span class=\"cm-attribute\">-v</span><span> </span><span class=\"cm-quote\">`pwd`</span><span>:/opt nix-build-pack /opt/plone-env.nix</span></code></pre>\n    </div>\n<p>After a while, that directory should contain file called\n<code>plone-env.nix.tar.gz</code>, which only contains two directories in its root:\n<code>/nix</code> for the built derivation and <code>/app</code> for easy access symlinks,\nlike <code>/app/bin/python</code>.</p>\n<p>Now we need <code>./Dockerfile</code> for building the final Plone image:</p>\n<div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-solarized\"><code><span>FROM scratch\nADD plone.env.nix.tar.gz /\nEXPOSE 8080\nUSER 1000\nENTRYPOINT [\"/app/bin/python\"]</span></code></pre>\n    </div>\n<p>And finally, a Plone image can be built with</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ docker</span><span> build </span><span class=\"cm-attribute\">-t</span><span> plone </span><span class=\"cm-attribute\">--rm</span><span class=\"cm-operator\">=</span><span class=\"cm-atom\">true</span><span> </span><span class=\"cm-attribute\">--force-rm</span><span class=\"cm-operator\">=</span><span class=\"cm-atom\">true</span><span> </span><span class=\"cm-attribute\">--no-cache</span><span class=\"cm-operator\">=</span><span class=\"cm-atom\">true</span><span> .</span></code></pre>\n    </div>\n<h2>Running Nix-built Plone container</h2>\n<p>To run Plone in a container with the image built above, we still need\nthe configuration for Plone. We can the normal buildout generated\nconfiguration, but we need to</p>\n<ol>\n<li>remove site.py from <code>parts/instance</code>.</li>\n<li>fix paths to match in <code>parts/instance/zope.conf</code> to match the\nmounted paths in Docker container (<code>/opt/...</code>)</li>\n<li>create some temporary directory to be mounted into container</li>\n</ol>\n<p>Also, we need a small wrapper to call the Plone instance script,\n<code>./instance.py</code>, because we cannot use the buildout generated one:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">sys</span><span>\n</span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">plone</span><span>.</span><span class=\"cm-property\">recipe</span><span>.</span><span class=\"cm-property\">zope2instance</span><span>.</span><span class=\"cm-property\">ctl</span><span>\n\n</span><span class=\"cm-variable\">sys</span><span>.</span><span class=\"cm-property\">exit</span><span>(</span><span class=\"cm-variable\">plone</span><span>.</span><span class=\"cm-property\">recipe</span><span>.</span><span class=\"cm-property\">zope2instance</span><span>.</span><span class=\"cm-property\">ctl</span><span>.</span><span class=\"cm-property\">main</span><span>(</span><span>\n</span><span>    [</span><span class=\"cm-string\">'-C'</span><span>, </span><span class=\"cm-string\">'/opt/parts/instance/etc/zope.conf'</span><span>]</span><span>\n</span><span>    </span><span class=\"cm-operator\">+</span><span> </span><span class=\"cm-variable\">sys</span><span>.</span><span class=\"cm-property\">argv</span><span>[</span><span class=\"cm-number\">1</span><span>:]</span><span>\n</span><span>))</span></code></pre>\n    </div>\n<p>When these are in place, within the buildout directory, we should now be\nable to run Plone in Docker container with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ docker</span><span> run </span><span class=\"cm-attribute\">--rm</span><span> </span><span class=\"cm-attribute\">-v</span><span> </span><span class=\"cm-quote\">`pwd`</span><span>:/opt </span><span class=\"cm-attribute\">-v</span><span> </span><span class=\"cm-quote\">`pwd`</span><span>/tmp:/tmp </span><span class=\"cm-attribute\">-P</span><span> plone /opt/instance.py fg</span></code></pre>\n    </div>\n<p>The current working directory is mapped to <code>/opt</code> and some temporary\ndirectory is mapped to <code>/tmp</code> (because our image didn’t contain even a\n[/tmp]{.title-ref}).</p>\n<p>Note: When I tried this out, for some reason (possibly because\nVirtualBox mount with boot2docker), I had to remove\n<code>./var/filestorage/Data.fs.tmp</code> between runs or I got errors on ZODB\nwrites.</p>","frontmatter":{"title":"Building Docker containers from scratch using Nix","tags":["Buildout","Docker","Nix","Plone"],"date":"July 09, 2015","published":"2015-07-09 06:00:00"}}},"pageContext":{"slug":"/2015/07/building-docker-containers-from-scratch.html/","previous":{"fields":{"slug":"/2015/07/creating-nix-expressions-with-buildout.html/"},"frontmatter":{"title":"Creating Nix-expressions with buildout"}},"next":{"fields":{"slug":"/2015/09/generating-plone-theming-mockups-with.html/"},"frontmatter":{"title":"Generating Plone theming mockups with Chameleon"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}