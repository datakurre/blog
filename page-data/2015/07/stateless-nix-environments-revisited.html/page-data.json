{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015/07/stateless-nix-environments-revisited.html/","result":{"data":{"site":{"siteMetadata":{"title":"Asko Soukka","author":"Asko Soukka"}},"markdownRemark":{"id":"aac663cd-64dc-59cf-9e1b-dc03e39bac21","fields":{"slug":"/2015/07/stateless-nix-environments-revisited.html/"},"excerpt":"It’s almost a year, since I tried to bend Nix\npackage manager to fit my own workflows for the first time. I disliked\nthe recommended way of describing nix…","html":"<p>It’s almost a year, since I tried to bend <a href=\"http://nixos.org/nix/\">Nix</a>\npackage manager to fit my own workflows for the first time. I disliked\nthe recommended way of describing <em>nix environments</em> in global\nconfiguration and activating and deactivating them in statefull way.\nBack then, I worked my way around by <a href=\"http://datakurre.pandala.org/2014/09/nix-expressions-as-executable-commands.html\">defining a wrapper to make local\nnix-expressions callable\nexecutables</a>.</p>\n<p>Consider that deprecated.</p>\n<p>Nix 1.9 introduced <a href=\"http://nixos.org/nix/manual/#ssec-nix-shell-shebang\">shebang support to use Nix-built interpreter in\ncallable scripts</a>.\n<strong>This alone</strong> is a major new feature and <strong>solves most of my use\ncases</strong>, where I wanted to define required Nix-dependencies locally, as\nclose to their usage as possible.</p>\n<p>Still, I do have a one more use case: For example, want to run <code>make</code>\nwith an environment, which has locally defined Nix-built dependencies.\nBecause the make in this particular example results just a static PDF\nfile, it does not make sense to make that project into a Nix derivation\nitself. (Neither does it make much sense to make Makefile an\nexecutable.)</p>\n<p>Of course, I start with defining my dependencies into a Nix derivation,\nand to make that more convenient with <code>nix-shell</code>, I save that into a\nfile called <code>./default.nix</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-solarized\"><code><span>with import &lt;nixpkgs&gt; {}; {\n  myEnv = stdenv.mkDerivation {\n    name = \"myEnv\";\n    buildInputs = [\n      (texLiveAggregationFun { paths = [\n        texLive\n        texLiveAuctex\n        texLiveExtra\n        texLivePGF\n      ];})\n      (rWrapper.override { packages = with rPackages; [\n        tikzDevice\n      ];})\n      dot2tex\n      gnumake\n      graphviz\n      pythonPackages.dateutil\n      pythonPackages.matplotlib\n      pythonPackages.numpy\n      pythonPackages.scipy\n    ];\n  };\n}</span></code></pre>\n    </div>\n<p>Now, I can run make in that environment in a stateless manner with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ nix</span><span class=\"cm-attribute\">-shell</span><span> </span><span class=\"cm-attribute\">--pure</span><span> </span><span class=\"cm-attribute\">--run</span><span> </span><span class=\"cm-string\">\"make clean all\"</span></code></pre>\n    </div>\n<p>Unfortunately, while that works, it’s a bit long command to type every\ntime.</p>\n<p>Initially, I would have preferred to be able to define local callable\nscript named <code>./make</code>, which was possible with my old approach. Yet,\nthis time I realized, that I can reach almost the same result by\ndefining the following bash function to help:</p>\n<div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-solarized\"><code><span>function nix() { echo nix-shell --pure --run \\\"$@\\\" | sh; }</span></code></pre>\n    </div>\n<p>or with a garbage collection root to avoid re-evaluation the expression\non every call:</p>\n<div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-solarized\"><code><span>function nix() {\n    if [ ! -e shell.drv ]; then\n        nix-instantiate --indirect --add-root $PWD/shell.drv\n    fi\n    echo nix-shell $PWD/shell.drv --pure --run \\\"$@\\\" | sh;\n}</span></code></pre>\n    </div>\n<p>With this helper in place, I can run any command from the locally\ndefined <code>default.nix</code> with simply:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ nix</span><span> </span><span class=\"cm-builtin\">make</span><span> clean all</span></code></pre>\n    </div>","frontmatter":{"title":"Stateless Nix environments revisited","tags":["Nix"],"date":"July 07, 2015","published":"2015-07-07 06:00:00"}}},"pageContext":{"slug":"/2015/07/stateless-nix-environments-revisited.html/","previous":{"fields":{"slug":"/2015/05/customize-plone-5-default-theme-on-fly.html/"},"frontmatter":{"title":"Customize Plone 5 default theme on the fly"}},"next":{"fields":{"slug":"/2015/07/creating-nix-expressions-with-buildout.html/"},"frontmatter":{"title":"Creating Nix-expressions with buildout"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}