{"componentChunkName":"component---src-templates-blog-post-js","path":"/2015/11/nix-in-docker-best-of-both-worlds.html/","result":{"data":{"site":{"siteMetadata":{"title":"Asko Soukka","author":"Asko Soukka"}},"markdownRemark":{"id":"d52f028b-8413-5873-b9ad-aed9411b2b47","fields":{"slug":"/2015/11/nix-in-docker-best-of-both-worlds.html/"},"excerpt":"I’m using Nix mostly on a mac as a\ndevelopment tool, and every now and then I get blocked by some packages\nnot working on OS X. For those situations I’ve been…","html":"<p>I’m using <a href=\"https://nixos.org/nix/\">Nix</a> mostly on a mac as a\ndevelopment tool, and every now and then I get blocked by some packages\nnot working on OS X.</p>\n<p>For those situations I’ve been working for my own Nix image for Docker:\nA such minimal Docker image that it only contains the files from the Nix\ninstaller, but could re-use persistent shared Nix-installation between\nDocker containers to make itself fast, convenient and lean.</p>\n<p>My build recipe is now available at:</p>\n<ul>\n<li><a href=\"https://gist.github.com/datakurre/a5d95794ce73c28f6d2f\">https://gist.github.com/datakurre/a5d95794ce73c28f6d2f</a></li>\n</ul>\n<p>Features:</p>\n<ul>\n<li>A single Docker image, which can be used to run anything from\nnixpkgs.</li>\n<li>You can <code>nix-shell -p</code> to get a Docker isolated development shell\nwith all your requirements installed from nixpkgs.</li>\n<li>You can <code>-v /my/path:/var/nixpkgs</code> to use your own nixpkgs clone.</li>\n<li>You can <code>-v /my/path:/etc/nix</code> to use your own nix configuration.</li>\n<li>With the shared data container:\n<ul>\n<li>Sequential and simultaneous containers can share the same Nix\ninstallation.</li>\n<li>You can <code>nix-env -i</code> to add new commands (or manage custom\nprofiles).</li>\n<li>You can <code>nix-collect-garbage -d</code> to clean up the data container.</li>\n</ul>\n</li>\n<li>You can use it as a base image and add new stuff with <code>nix-env -i</code>.</li>\n</ul>\n<h2>Bootstrapping</h2>\n<p>Build a Docker image named <em>nix</em> using the provided Docker based build\nchain:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ git</span><span> clone https://gist.github.com/datakurre/a5d95794ce73c28f6d2f</span><span>\n</span><span class=\"cm-def\">$ cd</span><span> a5d95794ce73c28f6d2f</span><span>\n</span><span class=\"cm-def\">$ make</span></code></pre>\n    </div>\n<p>Create a Docker data container named <em>nix</em> to use a shared persistent\n<code>/nix</code> for all your Nix containers:</p>\n<div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-solarized\"><code><span>$ docker create --name nix -v /nix nix sh</span></code></pre>\n    </div>\n<p>To know more about where the nix data gets stored with this setup,\nplease, read Docker documentation about <a href=\"https://docs.docker.com/engine/userguide/dockervolumes/\">managing data in\ncontainers</a>.</p>\n<h2>Examples of use</h2>\n<p>Running a Python interpreter with some packages:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ docker</span><span> run </span><span class=\"cm-attribute\">--rm</span><span> </span><span class=\"cm-attribute\">--volumes-from</span><span class=\"cm-operator\">=</span><span>nix </span><span class=\"cm-attribute\">-ti</span><span> nix \\</span><span>\n</span><span>         nix-shell </span><span class=\"cm-attribute\">-p</span><span> python35Packages.pyramid </span><span class=\"cm-attribute\">--run</span><span> python3</span></code></pre>\n    </div>\n<p>Running a Python Jupyter notebook with mounted context:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ mkdir</span><span> .jupyter</span><span>\n</span><span class=\"cm-def\">$ echo</span><span> </span><span class=\"cm-string\">\"c.NotebookApp.ip = '*'\"</span><span> &gt; .jupyter/jupyter_notebook_config.py</span><span>\n</span><span class=\"cm-def\">$ docker</span><span> run </span><span class=\"cm-attribute\">--rm</span><span> </span><span class=\"cm-attribute\">--volumes-from</span><span class=\"cm-operator\">=</span><span>nix </span><span class=\"cm-attribute\">-ti</span><span> \\</span><span>\n</span><span>         </span><span class=\"cm-attribute\">-v</span><span> </span><span class=\"cm-def\">$PWD</span><span>:/mnt </span><span class=\"cm-attribute\">-w</span><span> /mnt </span><span class=\"cm-attribute\">-e</span><span> </span><span class=\"cm-def\">HOME</span><span class=\"cm-operator\">=</span><span>/mnt </span><span class=\"cm-attribute\">-p</span><span> </span><span class=\"cm-number\">8888</span><span> nix \\</span><span>\n</span><span>         nix-shell </span><span class=\"cm-attribute\">-p</span><span> python35Packages.notebook </span><span class=\"cm-attribute\">--run</span><span> </span><span class=\"cm-string\">\"jupyter notebook\"</span></code></pre>\n    </div>\n<p>Running a Haskell Jupyter notebook with mounted context:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ mkdir</span><span> .jupyter</span><span>\n</span><span class=\"cm-def\">$ echo</span><span> </span><span class=\"cm-string\">\"c.NotebookApp.ip = '*'\"</span><span> &gt; .jupyter/jupyter_notebook_config.py</span><span>\n</span><span class=\"cm-def\">$ docker</span><span> run </span><span class=\"cm-attribute\">--rm</span><span> </span><span class=\"cm-attribute\">--volumes-from</span><span class=\"cm-operator\">=</span><span>nix </span><span class=\"cm-attribute\">-ti</span><span> \\</span><span>\n</span><span>         </span><span class=\"cm-attribute\">-v</span><span> </span><span class=\"cm-def\">$PWD</span><span>:/mnt </span><span class=\"cm-attribute\">-w</span><span> /mnt </span><span class=\"cm-attribute\">-e</span><span> </span><span class=\"cm-def\">HOME</span><span class=\"cm-operator\">=</span><span>/mnt </span><span class=\"cm-attribute\">-p</span><span> </span><span class=\"cm-number\">8888</span><span> nix \\</span><span>\n</span><span>         nix-shell </span><span class=\"cm-attribute\">-p</span><span> ihaskell </span><span class=\"cm-attribute\">--run</span><span> </span><span class=\"cm-string\">\"ihaskell-notebook\"</span></code></pre>\n    </div>\n<p>Running development shell for <code>default.nix</code> in mounted context:</p>\n<p>Adding <code>--help</code> for nix-commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ docker</span><span> run </span><span class=\"cm-attribute\">--rm</span><span> </span><span class=\"cm-attribute\">--volumes-from</span><span class=\"cm-operator\">=</span><span>nix nix nix-env </span><span class=\"cm-attribute\">-i</span><span> man</span><span>\n</span><span class=\"cm-def\">$ docker</span><span> run </span><span class=\"cm-attribute\">--rm</span><span> </span><span class=\"cm-attribute\">--volumes-from</span><span class=\"cm-operator\">=</span><span>nix nix nix-env </span><span class=\"cm-attribute\">--help</span></code></pre>\n    </div>\n<p>Purging nix-store cache:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ docker</span><span> run </span><span class=\"cm-attribute\">--rm</span><span> </span><span class=\"cm-attribute\">--volumes-from</span><span class=\"cm-operator\">=</span><span>nix nix nix-collect-garbage </span><span class=\"cm-attribute\">-d</span></code></pre>\n    </div>\n<p>Using the image as a base for a new Docker image, with <code>./Dockerfile</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"Dockerfile\">\n      <pre class=\" cm-s-solarized\"><code><span>FROM nix\nRUN nix-env -i python\nENTRYPOINT [\"/usr/local/bin/python\"]</span></code></pre>\n    </div>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ docker</span><span> build </span><span class=\"cm-attribute\">-t</span><span> python </span><span class=\"cm-attribute\">--rm</span><span class=\"cm-operator\">=</span><span class=\"cm-atom\">true</span><span> </span><span class=\"cm-attribute\">--force-rm</span><span class=\"cm-operator\">=</span><span class=\"cm-atom\">true</span><span> </span><span class=\"cm-attribute\">--no-cache</span><span class=\"cm-operator\">=</span><span class=\"cm-atom\">true</span><span> .</span><span>\n</span><span class=\"cm-def\">$ docker</span><span> run </span><span class=\"cm-attribute\">--rm</span><span> </span><span class=\"cm-attribute\">-ti</span><span> python</span></code></pre>\n    </div>","frontmatter":{"title":"Nix in Docker – Best of Both Worlds","tags":["Jupyter","Nix"],"date":"November 16, 2015","published":"2015-11-16 06:00:00"}}},"pageContext":{"slug":"/2015/11/nix-in-docker-best-of-both-worlds.html/","previous":{"fields":{"slug":"/2015/11/creating-jupyter-docker-containers-with.html/"},"frontmatter":{"title":"Creating Jupyter Docker-containers with Nix"}},"next":{"fields":{"slug":"/2016/02/building-plone-theme-with-webpack.html/"},"frontmatter":{"title":"Building Plone theme with Webpack"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}