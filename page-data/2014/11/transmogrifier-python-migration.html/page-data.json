{"componentChunkName":"component---src-templates-blog-post-js","path":"/2014/11/transmogrifier-python-migration.html/","result":{"data":{"site":{"siteMetadata":{"title":"Asko Soukka","author":"Asko Soukka"}},"markdownRemark":{"id":"99f25e6e-1877-5cb6-9090-ccdfcf973e6a","fields":{"slug":"/2014/11/transmogrifier-python-migration.html/"},"excerpt":"TL;DR; I forked\ncollective.transmogrifier\ninto just transmogrifier\n(not yet released) to make its core usable without Plone dependencies,\nuse Chameleon for\nTAL…","html":"<p><strong>TL;DR;</strong> I forked\n<a href=\"https://pypi.python.org/pypi/collective.transmogrifier\">collective.transmogrifier</a>\ninto just <a href=\"https://github.com/datakurre/transmogrifier\">transmogrifier</a>\n(not yet released) to make its core usable without Plone dependencies,\nuse <a href=\"https://pypi.python.org/pypi/Chameleon\">Chameleon</a> for\nTAL-expressions, installable with just <code>pip install</code> and compatible with\nPython 3.</p>\n<p><a href=\"https://pypi.python.org/pypi/collective.transmogrifier\">Transmogrifier</a>\nis one of the many great developer tools by the\n<a href=\"http://plone.org/\">Plone</a> community. It’s a generic pipeline tool for\ndata manipulation, configurable with plain text\n<a href=\"http://en.wikipedia.org/wiki/INI_file\">INI-files</a>, while new re-usable\npipeline section blueprints can be implemented and packaged in Python.\nIt could be used to process any number of things, but historically it’s\nbeen mainly developed and used as a pluggable way to import legacy\ncontent into Plone.</p>\n<p>A simple transmogrifier pipeline for dumping news from Slashdot to a CSV\nfile could look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[transmogrifier]</span><span>\n</span><span class=\"cm-def\">pipeline </span><span>=</span><span>\n</span><span class=\"cm-def\">    from_rss</span><span>\n</span><span class=\"cm-def\">    to_csv</span><span>\n\n</span><span class=\"cm-header\">[from_rss]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.from</span><span>\n</span><span class=\"cm-def\">modules </span><span>=</span><span class=\"cm-quote\"> feedparser</span><span>\n</span><span class=\"cm-def\">expression </span><span>=</span><span class=\"cm-quote\"> python</span><span>:</span><span class=\"cm-quote\">modules['feedparser'].parse(options['url']).get('entries', [])</span><span>\n</span><span class=\"cm-def\">url </span><span>=</span><span class=\"cm-quote\"> http</span><span>:</span><span class=\"cm-quote\">//rss.slashdot.org/slashdot/slashdot</span><span>\n\n</span><span class=\"cm-header\">[to_csv]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.to_csv</span><span>\n</span><span class=\"cm-def\">fieldnames </span><span>=</span><span>\n</span><span class=\"cm-def\">    title</span><span>\n</span><span class=\"cm-def\">    link</span><span>\n</span><span class=\"cm-def\">filename </span><span>=</span><span class=\"cm-quote\"> slashdot.csv</span></code></pre>\n    </div>\n<p>Actually, in time of writing this, I’ve yet to do any Plone migrations\nusing transmogrifier. But when we recently had a reasonable size\nnon-Plone migration task, I knew not to re-invent the wheel, but to\ntransmogrify it. And we succeeded. Transmogrifier pipeline helped us to\ndesign the migration better, and splitting data processing into multiple\npipeline sections helped us to delegate the work between multiple\ndevelopers.</p>\n<p>Unfortunately, currently\n<a href=\"https://pypi.python.org/pypi/collective.transmogrifier\">collective.transmogrifier</a>\nhas unnecessary dependencies on\n<a href=\"https://pypi.python.org/pypi/Products.CMFCore\">CMFCore</a>, is not\ninstallable without long known good set of versions and is missing any\nbuilt-int command-line interface. At first, I tried to do all the\nnecessary refactoring inside <strong>collective.transmogrifier</strong>, but\neventually a fork was required to make the transmogrifier core usable\noutside Plone-environments, be compatible with Python 3 and to not break\nany existing workflows depending on the old transmogrifier.</p>\n<p>So, meet the new\n<a href=\"https://github.com/datakurre/transmogrifier\">transmogrifier</a>:</p>\n<ul>\n<li>can be installed with <code>pip install</code> (although, not yet released at\nPyPI)</li>\n<li>new <a href=\"https://pypi.python.org/pypi/mr.migrator\">mr.migrator</a> inspired\ncommand-line interface (see <code>transmogrif --help</code> for all the\noptions)</li>\n<li>new base classes for custom blueprints\n<ul>\n<li><code>transmogrifier.blueprints.Blueprint</code></li>\n<li><code>transmogrifier.blueprints.ConditionalBlueprint</code></li>\n</ul>\n</li>\n<li>new ZCML-directives for registering blueprints and re-usable\npipelines\n<ul>\n<li><code>&#x3C;transmogrifier:blueprint component=\"\" name=\"\" /></code></li>\n<li><code>&#x3C;transmogrifier:pipeline id=\"\" name=\"\" description=\"\" configuration=\"\" /></code></li>\n</ul>\n</li>\n<li>uses <a href=\"https://pypi.python.org/pypi/Chameleon\">Chameleon</a> for\nTAL-expressions (e.g. in <code>ConditionalBlueprint</code>)</li>\n<li>has only a few generic built-in blueprints</li>\n<li>supports\n<a href=\"https://pypi.python.org/pypi/z3c.autoinclude\">z3c.autoinclude</a> for\npackage <em>transmogrifier</em></li>\n<li>fully backwards compatible with blueprints for\n<a href=\"https://pypi.python.org/pypi/collective.transmogrifier\">collective.transmogrifier</a></li>\n<li>runs with Python >= 2.6, including Python 3+</li>\n</ul>\n<p>There’s still much work to do before a real release (e.g. documenting\nand testing the new CLI-script and new built-in blueprints), but let’s\nstill see how it works already…</p>\n<p>P.S. Please, use a clean Python\n<a href=\"https://pypi.python.org/pypi/virtualenv\">virtualenv</a> for these\nexamples.</p>\n<h2>Example pipeline</h2>\n<p>Let’s start with an easy installation</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ pip</span><span> install </span><span class=\"cm-builtin\">git</span><span class=\"cm-operator\">+</span><span>https://github.com/datakurre/transmogrifier</span><span>\n</span><span class=\"cm-def\">$ transmogrify</span><span> </span><span class=\"cm-attribute\">--help</span><span>\n</span><span>Usage: transmogrify &lt;pipelines_and_overrides&gt;...</span><span>\n</span><span>                </span><span class=\"cm-def\">[--overrides</span><span class=\"cm-operator\">=</span><span>overrides.cfg&gt;]</span><span>\n</span><span>                </span><span class=\"cm-def\">[--include</span><span class=\"cm-operator\">=</span><span>package_or_module&gt;...]</span><span>\n</span><span>                </span><span class=\"cm-def\">[--include</span><span class=\"cm-operator\">=</span><span>package:filename&gt;...]</span><span>\n</span><span>                </span><span class=\"cm-def\">[--context</span><span class=\"cm-operator\">=</span><span>&lt;package.module.factory&gt;]</span><span>\n</span><span>   transmogrify </span><span class=\"cm-attribute\">--list</span><span>\n</span><span>                </span><span class=\"cm-def\">[--include</span><span class=\"cm-operator\">=</span><span>package_or_module&gt;...]</span><span>\n</span><span>   transmogrify </span><span class=\"cm-attribute\">--show</span><span class=\"cm-operator\">=</span><span>&lt;pipeline&gt;</span><span>\n</span><span>                </span><span class=\"cm-def\">[--include</span><span class=\"cm-operator\">=</span><span>package_or_module&gt;...]</span></code></pre>\n    </div>\n<p>and with example filesystem <code>pipeline.cfg</code></p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[transmogrifier]</span><span>\n</span><span class=\"cm-def\">pipeline </span><span>=</span><span>\n</span><span class=\"cm-def\">    from_rss</span><span>\n</span><span class=\"cm-def\">    to_csv</span><span>\n\n</span><span class=\"cm-header\">[from_rss]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.from</span><span>\n</span><span class=\"cm-def\">modules </span><span>=</span><span class=\"cm-quote\"> feedparser</span><span>\n</span><span class=\"cm-def\">expression </span><span>=</span><span class=\"cm-quote\"> python</span><span>:</span><span class=\"cm-quote\">modules['feedparser'].parse(options['url']).get('entries', [])</span><span>\n</span><span class=\"cm-def\">url </span><span>=</span><span class=\"cm-quote\"> http</span><span>:</span><span class=\"cm-quote\">//rss.slashdot.org/slashdot/slashdot</span><span>\n\n</span><span class=\"cm-header\">[to_csv]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.to_csv</span><span>\n</span><span class=\"cm-def\">fieldnames </span><span>=</span><span>\n</span><span class=\"cm-def\">    title</span><span>\n</span><span class=\"cm-def\">    link</span><span>\n</span><span class=\"cm-def\">filename </span><span>=</span><span class=\"cm-quote\"> slashdot.csv</span></code></pre>\n    </div>\n<p>and its dependencies</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ pip</span><span> install feedparser</span></code></pre>\n    </div>\n<p>and the results</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ transmogrify</span><span> pipeline.cfg</span><span>\n</span><span>INFO:transmogrifier:CSVConstructor:to_csv wrote </span><span class=\"cm-number\">25</span><span> items to /.../slashdot.csv</span></code></pre>\n    </div>\n<p>using, for example, Python 2.7 or Python 3.4.</p>\n<h2>Minimal migration project</h2>\n<p>Let’s create an example migration project with custom blueprints using\nPython 3. In addition to\n<a href=\"https://github.com/datakurre/transmogrifier\">transmogrifier</a>, we need\n<a href=\"https://pypi.python.org/pypi/venusianconfiguration\">venusianconfiguration</a>\nfor easy blueprint registration and, of course, actual depedencies for\nour blueprints:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ pip</span><span> install </span><span class=\"cm-builtin\">git</span><span class=\"cm-operator\">+</span><span>https://github.com/datakurre/transmogrifier</span><span>\n</span><span class=\"cm-def\">$ pip</span><span> install </span><span class=\"cm-builtin\">git</span><span class=\"cm-operator\">+</span><span>https://github.com/datakurre/venusianconfiguration</span><span>\n</span><span class=\"cm-def\">$ pip</span><span> install fake-factory</span></code></pre>\n    </div>\n<p>Now we can implement custom blueprints in, for example, <code>blueprints.py</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">venusianconfiguration</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">configure</span><span>\n\n</span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">transmogrifier</span><span>.</span><span class=\"cm-property\">blueprints</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">Blueprint</span><span>\n</span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">faker</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">Faker</span><span>\n\n\n</span><span class=\"cm-meta\">@configure</span><span>.</span><span class=\"cm-property\">transmogrifier</span><span>.</span><span class=\"cm-property\">blueprint</span><span>.</span><span class=\"cm-property\">component</span><span>(</span><span class=\"cm-variable\">name</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">'faker_contacts'</span><span>)</span><span>\n</span><span class=\"cm-keyword\">class</span><span> </span><span class=\"cm-def\">FakerContacts</span><span>(</span><span class=\"cm-variable\">Blueprint</span><span>):</span><span>\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">__iter__</span><span>(</span><span class=\"cm-variable-2\">self</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-keyword\">for</span><span> </span><span class=\"cm-variable\">item</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">previous</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-keyword\">yield</span><span> </span><span class=\"cm-variable\">item</span><span>\n\n</span><span>        </span><span class=\"cm-variable\">amount</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-builtin\">int</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">options</span><span>.</span><span class=\"cm-property\">get</span><span>(</span><span class=\"cm-string\">'amount'</span><span>, </span><span class=\"cm-string\">'0'</span><span>))</span><span>\n</span><span>        </span><span class=\"cm-variable\">fake</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">Faker</span><span>()</span><span>\n\n</span><span>        </span><span class=\"cm-keyword\">for</span><span> </span><span class=\"cm-variable\">i</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-builtin\">range</span><span>(</span><span class=\"cm-variable\">amount</span><span>):</span><span>\n</span><span>            </span><span class=\"cm-keyword\">yield</span><span> {</span><span>\n</span><span>                </span><span class=\"cm-string\">'name'</span><span>: </span><span class=\"cm-variable\">fake</span><span>.</span><span class=\"cm-property\">name</span><span>(),</span><span>\n</span><span>                </span><span class=\"cm-string\">'address'</span><span>: </span><span class=\"cm-variable\">fake</span><span>.</span><span class=\"cm-property\">address</span><span>()</span><span>\n</span><span>            }</span></code></pre>\n    </div>\n<p>and see them registered next to the built-in ones (or from the other\npackages hooking into transmogrifier autoinclude entry-point):</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ transmogrify</span><span> </span><span class=\"cm-attribute\">--list</span><span> </span><span class=\"cm-attribute\">--include</span><span class=\"cm-operator\">=</span><span>blueprints</span><span>\n\n</span><span>Available blueprints</span><span>\n</span><span class=\"cm-attribute\">--------------------</span><span>\n</span><span>faker_contacts</span><span>\n</span><span>...</span></code></pre>\n    </div>\n<p>Now, we can make an example <code>pipeline.cfg</code></p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[transmogrifier]</span><span>\n</span><span class=\"cm-def\">pipeline </span><span>=</span><span>\n</span><span class=\"cm-def\">    from_faker</span><span>\n</span><span class=\"cm-def\">    to_csv</span><span>\n\n</span><span class=\"cm-header\">[from_faker]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> faker_contacts</span><span>\n</span><span class=\"cm-def\">amount </span><span>=</span><span class=\"cm-quote\"> 2</span><span>\n\n</span><span class=\"cm-header\">[to_csv]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.to_csv</span></code></pre>\n    </div>\n<p>and enjoy the results</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ transmogrify</span><span> pipeline.cfg to_csv</span><span class=\"cm-def\">:filename</span><span class=\"cm-operator\">=</span><span class=\"cm-attribute\">-</span><span> </span><span class=\"cm-attribute\">--include</span><span class=\"cm-operator\">=</span><span>blueprints</span><span>\n</span><span>address,name</span><span>\n</span><span class=\"cm-string\">\"534 Hintz Inlet Apt. 804</span><span>\n</span><span class=\"cm-string\">Schneiderchester, MI 55300\"</span><span>,Dr. Garland Wyman</span><span>\n</span><span class=\"cm-string\">\"44608 Volkman Islands</span><span>\n</span><span class=\"cm-string\">Maryleefurt, AK 42163\"</span><span>,Mrs. Franc Price DVM</span><span>\n</span><span>INFO:transmogrifier:CSVConstructor:to_csv saved </span><span class=\"cm-number\">2</span><span> items to </span><span class=\"cm-attribute\">-</span></code></pre>\n    </div>\n<p>An alternative would be to just use the shipped\n<a href=\"https://pypi.python.org/pypi/mr.bob\">mr.bob</a>-template…</p>\n<h2>Migration project using the template</h2>\n<p>The new <a href=\"https://github.com/datakurre/transmogrifier\">transmogrifier</a>\nships with an easy getting started template for your custom migration\nproject. To use the template, you need a Python environment with\n<a href=\"https://pypi.python.org/pypi/mr.bob\">mr.bob</a> and the new\ntransmogrifier:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ pip</span><span> install mr.bob readline  </span><span class=\"cm-comment\"># readline is an implicit mr.bob dependency</span><span>\n</span><span class=\"cm-def\">$ pip</span><span> install </span><span class=\"cm-builtin\">git</span><span class=\"cm-operator\">+</span><span>https://github.com/datakurre/transmogrifier</span></code></pre>\n    </div>\n<p>Then you can create a new project directory with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ mrbob</span><span> bobtemplates.transmogrifier:project</span></code></pre>\n    </div>\n<p>Once the new project directory is created, inside the directory, you can\ninstall rest of the depdendencies and activate the project with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ pip</span><span> install </span><span class=\"cm-attribute\">-r</span><span> requirements.txt</span><span>\n</span><span class=\"cm-def\">$ python</span><span> setup.py develop</span></code></pre>\n    </div>\n<p>Now transmogrify knows your project’s custom blueprints and pipelines:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ transmogrify</span><span> </span><span class=\"cm-attribute\">--list</span><span>\n\n</span><span>Available blueprints</span><span>\n</span><span class=\"cm-attribute\">--------------------</span><span>\n</span><span>myprojectname.mock_contacts</span><span>\n</span><span>...</span><span>\n\n</span><span>Available pipelines</span><span>\n</span><span class=\"cm-attribute\">-------------------</span><span>\n</span><span>myprojectname_example</span><span>\n</span><span>    Example: Generates uppercase mock addresses</span></code></pre>\n    </div>\n<p>And the example pipeline can be executed with:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ transmogrify</span><span> myprojectname_example</span><span>\n</span><span>name,address</span><span>\n</span><span>ISSAC KOSS I,</span><span class=\"cm-string\">\"PSC 8465, BOX 1625</span><span>\n</span><span class=\"cm-string\">APO AE 97751\"</span><span>\n</span><span>TESS FAHEY,</span><span class=\"cm-string\">\"PSC 7387, BOX 3736</span><span>\n</span><span class=\"cm-string\">APO AP 13098-6260\"</span><span>\n</span><span>INFO:transmogrifier:CSVConstructor:to_csv wrote </span><span class=\"cm-number\">2</span><span> items to </span><span class=\"cm-attribute\">-</span></code></pre>\n    </div>\n<p>Please, see created <code>README.rst</code> for how to edit the example blueprints\nand pipelines and create more.</p>\n<h2>Mandatory example with Plone</h2>\n<p>Using the new\n<a href=\"https://github.com/datakurre/transmogrifier\">transmogrifier</a> with Plone\nshould be as simply as adding it into your <code>buildout.cfg</code> next to the\nold transmogrifier packages:</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[buildout]</span><span>\n</span><span class=\"cm-def\">extends </span><span>=</span><span class=\"cm-quote\"> http</span><span>:</span><span class=\"cm-quote\">//dist.plone.org/release/4.3-latest/versions.cfg</span><span>\n</span><span class=\"cm-def\">parts </span><span>=</span><span class=\"cm-quote\"> instance plonesite</span><span>\n</span><span class=\"cm-def\">versions </span><span>=</span><span class=\"cm-quote\"> versions</span><span>\n\n</span><span class=\"cm-def\">extensions </span><span>=</span><span class=\"cm-quote\"> mr.developer</span><span>\n</span><span class=\"cm-def\">soures </span><span>=</span><span class=\"cm-quote\"> sources</span><span>\n</span><span class=\"cm-def\">auto-checkout </span><span>=</span><span class=\"cm-quote\"> *</span><span>\n\n</span><span class=\"cm-header\">[sources]</span><span>\n</span><span class=\"cm-def\">transmogrifier </span><span>=</span><span class=\"cm-quote\"> git https</span><span>:</span><span class=\"cm-quote\">//github.com/datakurre/transmogrifier</span><span>\n\n</span><span class=\"cm-header\">[instance]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> plone.recipe.zope2instance</span><span>\n</span><span class=\"cm-def\">eggs </span><span>=</span><span>\n</span><span class=\"cm-def\">    Plone</span><span>\n</span><span class=\"cm-def\">    z3c.pt</span><span>\n</span><span class=\"cm-def\">    transmogrifier</span><span>\n</span><span class=\"cm-def\">    collective.transmogrifier</span><span>\n</span><span class=\"cm-def\">    plone.app.transmogrifier</span><span>\n</span><span class=\"cm-def\">user </span><span>=</span><span class=\"cm-quote\"> admin</span><span>:</span><span class=\"cm-quote\">admin</span><span>\n</span><span class=\"cm-def\">zcml </span><span>=</span><span class=\"cm-quote\"> plone.app.transmogrifier</span><span>\n\n</span><span class=\"cm-header\">[plonesite]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> collective.recipe.plonesite</span><span>\n</span><span class=\"cm-def\">site-id </span><span>=</span><span class=\"cm-quote\"> Plone</span><span>\n</span><span class=\"cm-def\">instance </span><span>=</span><span class=\"cm-quote\"> instance</span><span>\n\n</span><span class=\"cm-header\">[versions]</span><span>\n</span><span class=\"cm-def\">future </span><span>=</span><span>\n</span><span class=\"cm-def\">setuptools </span><span>=</span><span>\n</span><span class=\"cm-def\">zc.buildout </span><span>=</span></code></pre>\n    </div>\n<p>Let’s also write a fictional migration pipeline, which would create\nPlone content from Slashdot RSS-feed:</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[transmogrifier]</span><span>\n</span><span class=\"cm-def\">pipeline </span><span>=</span><span>\n</span><span class=\"cm-def\">    from_rss</span><span>\n</span><span class=\"cm-def\">    id</span><span>\n</span><span class=\"cm-def\">    fields</span><span>\n</span><span class=\"cm-def\">    folders</span><span>\n</span><span class=\"cm-def\">    create</span><span>\n</span><span class=\"cm-def\">    update</span><span>\n</span><span class=\"cm-def\">    commit</span><span>\n\n</span><span class=\"cm-header\">[from_rss]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.from</span><span>\n</span><span class=\"cm-def\">modules </span><span>=</span><span class=\"cm-quote\"> feedparser</span><span>\n</span><span class=\"cm-def\">expression </span><span>=</span><span class=\"cm-quote\"> python</span><span>:</span><span class=\"cm-quote\">modules['feedparser'].parse(options['url']).get('entries', [])</span><span>\n</span><span class=\"cm-def\">url </span><span>=</span><span class=\"cm-quote\"> http</span><span>:</span><span class=\"cm-quote\">//rss.slashdot.org/Slashdot/slashdot</span><span>\n\n</span><span class=\"cm-header\">[id]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.set</span><span>\n</span><span class=\"cm-def\">modules </span><span>=</span><span class=\"cm-quote\"> uuid</span><span>\n</span><span class=\"cm-def\">id </span><span>=</span><span class=\"cm-quote\"> python</span><span>:</span><span class=\"cm-quote\">str(modules['uuid'].uuid4())</span><span>\n\n</span><span class=\"cm-header\">[fields]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.set</span><span>\n</span><span class=\"cm-def\">portal_type </span><span>=</span><span class=\"cm-quote\"> string</span><span>:</span><span class=\"cm-quote\">Document</span><span>\n</span><span class=\"cm-def\">text </span><span>=</span><span class=\"cm-quote\"> path</span><span>:</span><span class=\"cm-quote\">item/summary</span><span>\n</span><span class=\"cm-def\">_path </span><span>=</span><span class=\"cm-quote\"> string</span><span>:</span><span class=\"cm-quote\">slashdot/${item['id']}</span><span>\n\n</span><span class=\"cm-header\">[folders]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> collective.transmogrifier.sections.folders</span><span>\n\n</span><span class=\"cm-header\">[create]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> collective.transmogrifier.sections.constructor</span><span>\n\n</span><span class=\"cm-header\">[update]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> plone.app.transmogrifier.atschemaupdater</span><span>\n\n</span><span class=\"cm-header\">[commit]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.transform</span><span>\n</span><span class=\"cm-def\">modules </span><span>=</span><span class=\"cm-quote\"> transaction</span><span>\n</span><span class=\"cm-def\">commit </span><span>=</span><span class=\"cm-quote\"> modules['transaction'].commit()</span></code></pre>\n    </div>\n<p>Now, the new CLI-script can be used together with\n<code>bin/instance -Ositeid run</code> provided by\n<a href=\"https://pypi.python.org/pypi/plone.recipe.zope2instance\">plone.recipe.zope2instance</a>\nso that transmogrifier will get your site as its context simply by\ncalling `zope.component.hooks.getSite`:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ bin</span><span>/instance </span><span class=\"cm-attribute\">-OPlone</span><span> run bin/transmogrify pipeline.cfg </span><span class=\"cm-attribute\">--context</span><span class=\"cm-operator\">=</span><span>zope.component.hooks.getSite</span></code></pre>\n    </div>\n<p>With Plone you should, of course, still use Python 2.7.</p>\n<h2>Funnelweb example with Plone</h2>\n<p><a href=\"https://pypi.org/project/funnelweb/\">Funnelweb</a> is a collection of transmogrifier blueprints an pipelines\nfor scraping any web site into Plone. I heard that its example pipelines\nare a little outdated, but they make a nice demo anywyay.</p>\n<p>Let’s extend our previous Plone-example with the following\n<code>funnelweb.cfg</code> buildout to include all the necessary transmogrifier\nblueprints and the example <code>funnelweb.ttw</code> pipeline:</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[buildout]</span><span>\n</span><span class=\"cm-def\">extends </span><span>=</span><span class=\"cm-quote\"> buildout.cfg</span><span>\n\n</span><span class=\"cm-header\">[instance]</span><span>\n</span><span class=\"cm-def\">eggs +</span><span>=</span><span>\n</span><span class=\"cm-def\">    transmogrify.pathsorter</span><span>\n</span><span class=\"cm-def\">    funnelweb</span></code></pre>\n    </div>\n<p>We also need a small additional pipeline <code>commit.cfg</code> to commit all the\nchanges made by <code>funnelweb.ttw</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[transmogrifier]</span><span>\n</span><span class=\"cm-def\">pipeline </span><span>=</span><span class=\"cm-quote\"> commit</span><span>\n\n</span><span class=\"cm-header\">[commit]</span><span>\n</span><span class=\"cm-def\">blueprint </span><span>=</span><span class=\"cm-quote\"> transmogrifier.interval</span><span>\n</span><span class=\"cm-def\">modules </span><span>=</span><span class=\"cm-quote\"> transaction</span><span>\n</span><span class=\"cm-def\">expression </span><span>=</span><span class=\"cm-quote\"> python</span><span>:</span><span class=\"cm-quote\">modules['transaction'].commit()</span></code></pre>\n    </div>\n<p>Now, after the buildout has been run, the following command would use\npipelines <code>funnelweb.ttw</code> and <code>commit.cfg</code> to somewhat scrape my blog\ninto Plone:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ bin</span><span>/instance </span><span class=\"cm-attribute\">-OPlone</span><span> run bin/transmogrify funnelweb.ttw commit.cfg crawler</span><span class=\"cm-def\">:url</span><span class=\"cm-operator\">=</span><span>http://datakurre.pandala.org </span><span class=\"cm-string\">\"crawler:ignore=feeds\\ncsi.js\"</span><span> </span><span class=\"cm-attribute\">--context</span><span class=\"cm-operator\">=</span><span>zope.component.hooks.getSite</span></code></pre>\n    </div>\n<p>For tuning the import further, the used pipelines could be easily\nexported into filesystem, customized, and then executed similarly to\n<code>commit.cfg</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ bin</span><span>/instance </span><span class=\"cm-attribute\">-OPlone</span><span> run bin/transmogrify </span><span class=\"cm-attribute\">--show</span><span class=\"cm-operator\">=</span><span>funnelweb.ttw &gt; myfunnelweb.cfg</span></code></pre>\n    </div>","frontmatter":{"title":"Transmogrifier, the Python migration pipeline, also for Python 3","tags":["Migration","Plone","Python","Transmogrifier"],"date":"November 19, 2014","published":"2014-11-19 06:00:00"}}},"pageContext":{"slug":"/2014/11/transmogrifier-python-migration.html/","previous":{"fields":{"slug":"/2014/10/too-many-ways-to-do-async-tasks-with.html/"},"frontmatter":{"title":"Too many ways to do async tasks with Plone"}},"next":{"fields":{"slug":"/2015/05/plonecustom-for-plone-5.html/"},"frontmatter":{"title":"ploneCustom for Plone 5"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}