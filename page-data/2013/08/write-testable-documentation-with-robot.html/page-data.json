{"componentChunkName":"component---src-templates-blog-post-js","path":"/2013/08/write-testable-documentation-with-robot.html/","result":{"data":{"site":{"siteMetadata":{"title":"Asko Soukka","author":"Asko Soukka"}},"markdownRemark":{"id":"03a16be1-d604-5bec-ae55-e63c65e45f29","fields":{"slug":"/2013/08/write-testable-documentation-with-robot.html/"},"excerpt":"If you have background as a Python programmer, you must be familiar with\ndoctests — testable\ncode examples embedded into documentation. When Timo Stollenwerk…","html":"<p>If you have background as a Python programmer, you must be familiar with\n<a href=\"http://docs.python.org/2/library/doctest.html\">doctests</a> — testable\ncode examples embedded into documentation. When Timo Stollenwerk\npresented Robot Framework in his <a href=\"http://www.slideshare.net/tisto/testdriven-development-with-plone\">TDD-presentation in Plone Conference\n2012</a>,\nthe first question from the audience was, can Robot Framework test be in\nembedded into documentation, similarly to Python doctests.</p>\n<p>Soon you can.</p>\n<p>I’ve been mentoring Vivek Kumar Verma in this years Google Summer of\nCode to implement a <a href=\"https://www.google-melange.com/gsoc/project/google/gsoc2013/vivekkodu/16001\">better ReStructureText parser into Robot\nFramework</a>.\nThe first part of his GSOC project was to actually enhance the parser,\nand the second part is implementing a Sphinx-plugin to execute embedded\nRobot Framework tests while compiling the documentation. You can follow\nVivek’s dive into Python world in <a href=\"http://vivekkodugsoc13.blogspot.in/\">his\nblog</a> and find him as <code>viku__</code> on\n<a href=\"http://freenode.net/\">Freenode</a>-channels <em>#plone</em> and\n<em>#robotframework</em>.</p>\n<p>Issues related to Vivek’s GSOC 2013 work for the enhanced ReST-parser\ncan be filed at <a href=\"https://github.com/datakurre/robotframework/issues\">https://github.com/datakurre/robotframework/issues</a>\nuntil the GSOC ends.</p>\n<h2>How does it work?</h2>\n<p>As you may have guessed from the title. The first part of Vivek’s GSOC\nis pretty much completed and is waiting for a review from the Robot\nFramework team. It’s a minimal, but very powerful enhancement for the\nold Robot Framework’s ReST parser. While the old parser supported only\nso called table syntax, the new parser allows you to use the famous\n<a href=\"http://robotframework.googlecode.com/hg/doc/userguide/RobotFrameworkUserGuide.html?r=2.8.1#plain-text-format\">plain text\nformat</a>\nwhen embedding your Robot Framework tests into ReST-documents.</p>\n<p>Try to find the test cases from the following\n<a href=\"http://docutils.sourceforge.net/rst.html\">ReStructuredText</a>-example:</p>\n<div class=\"gatsby-highlight\" data-language=\"rst\">\n      <pre class=\" cm-s-solarized\"><code><span>Your first Robot Framework doctest</span><span>\n</span><span class=\"cm-header\">==================================</span><span>\n\n</span><span>With the Robot Framework plain text syntax, a minimal test suite</span><span>\n</span><span>would consists of </span><span class=\"cm-null string-2\">``*** Test Cases ***``</span><span> header and at least</span><span>\n</span><span>one test case, like:</span><span>\n\n</span><span class=\"cm-meta\">.. </span><span class=\"cm-keyword\">code</span><span class=\"cm-meta\">:: </span><span>robotframework</span><span>\n\n</span><span>   *** Test Cases ***</span><span>\n\n</span><span>   Foo is always Foo</span><span>\n</span><span>       Should be equal  Foo  Foo</span><span>\n\n</span><span>One </span><span class=\"cm-null string-2\">``*** Test Cases ***``</span><span>-header may be followed by as many</span><span>\n</span><span>tests as required, like:</span><span>\n\n</span><span class=\"cm-meta\">.. </span><span class=\"cm-keyword\">code</span><span class=\"cm-meta\">:: </span><span>robotframework</span><span>\n\n</span><span>   *** Test Cases ***</span><span>\n\n</span><span>   Foo is still Foo</span><span>\n</span><span>       Should be equal  Foo  Foo</span><span>\n\n</span><span>   Foo is never Bar</span><span>\n</span><span>       Should not be equal  Foo  Bar</span></code></pre>\n    </div>\n<p>With Vivek, we decided to re-use the existing <code>code</code>-directive of\nDocutils for embedding plain text Robot Framework tests suites into\nReStructuredText-documents. Each document can contain as many\n<code>code</code>-directives with <code>robotframework</code>-language as required and Robot\nFramework will concatenate their contents into a single Robot Framework\ntest suite.</p>\n<p>There is a small price, of course. Docutils will tag <code>code</code>-directives\nwith <code>robotframework</code>-language only when also\n<a href=\"http://pygments.org\">Pygments</a>-package is installed. Luckily you will\nwant to have it, because since with Pygments (<code>>= 1.6</code>) you will also\nget syntax highlighting your embedded Robot Framework tests.</p>\n<h2>Try it out</h2>\n<p>Even Vivek’s GSOC-work has not been merged into Robot Framework yet,\nyou can try it out with the following steps:</p>\n<ol>\n<li>\n<p><a href=\"https://pypi.python.org/pypi/virtualenv\">Create and activate a new Python virtual\nenvironment</a>.</p>\n</li>\n<li>\n<p>Install the dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ pip</span><span> install docutils Pygments</span></code></pre>\n    </div>\n</li>\n<li>\n<p>Install GSOC-patched version of Robot Framework 2.8.1:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ pip</span><span> install https://github.com/datakurre/robotframework/tarball/GSOC2013DEMO/robotframework-2.8.1-GSOC2013.0.tar.gz</span></code></pre>\n    </div>\n</li>\n<li>\n<p>Create an example test suite <code>example.rst</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"rst\">\n      <pre class=\" cm-s-solarized\"><code><span>Your first Robot Framework doctest</span><span>\n</span><span class=\"cm-header\">==================================</span><span>\n\n</span><span>With the Robot Framework plain text syntax, a minimal test suite</span><span>\n</span><span>would consists of </span><span class=\"cm-null string-2\">``*** Test Cases ***``</span><span> header and at least</span><span>\n</span><span>one test case, like:</span><span>\n\n</span><span class=\"cm-meta\">.. </span><span class=\"cm-keyword\">code</span><span class=\"cm-meta\">:: </span><span>robotframework</span><span>\n\n</span><span>   *** Test Cases ***</span><span>\n\n</span><span>   Foo is always Foo</span><span>\n</span><span>       Should be equal  Foo  Foo</span><span>\n\n</span><span>One </span><span class=\"cm-null string-2\">``*** Test Cases ***``</span><span>-header may be followed by as many</span><span>\n</span><span>tests as required, like:</span><span>\n\n</span><span class=\"cm-meta\">.. </span><span class=\"cm-keyword\">code</span><span class=\"cm-meta\">:: </span><span>robotframework</span><span>\n\n</span><span>   *** Test Cases ***</span><span>\n\n</span><span>   Foo is still Foo</span><span>\n</span><span>       Should be equal  Foo  Foo</span><span>\n\n</span><span>   Foo is never Bar</span><span>\n</span><span>       Should not be equal  Foo  Bar</span></code></pre>\n    </div>\n</li>\n<li>\n<p>Run the suite:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ pybot</span><span> example.rst</span><span>\n\n</span><span class=\"cm-operator\">========================================================================</span><span>\n</span><span>Example</span><span>\n</span><span class=\"cm-operator\">========================================================================</span><span>\n</span><span>Foo is always Foo                                               | PASS |</span><span>\n</span><span class=\"cm-attribute\">------------------------------------------------------------------------</span><span>\n</span><span>Foo is still Foo                                                | PASS |</span><span>\n</span><span class=\"cm-attribute\">------------------------------------------------------------------------</span><span>\n</span><span>Foo is never Bar                                                | PASS |</span><span>\n</span><span class=\"cm-attribute\">------------------------------------------------------------------------</span><span>\n</span><span>Example                                                         | PASS |</span><span>\n</span><span class=\"cm-number\">3</span><span> critical tests, </span><span class=\"cm-number\">3</span><span> passed, </span><span class=\"cm-number\">0</span><span> failed</span><span>\n</span><span class=\"cm-number\">3</span><span> tests total, </span><span class=\"cm-number\">3</span><span> passed, </span><span class=\"cm-number\">0</span><span> failed</span><span>\n</span><span class=\"cm-operator\">========================================================================</span><span>\n</span><span>Output:  /.../output.xml</span><span>\n</span><span>Log:     /.../log.html</span><span>\n</span><span>Report:  /.../report.html</span></code></pre>\n    </div>\n</li>\n<li>\n<p>And create a nicely highlighted documentation:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ pygmentize</span><span> </span><span class=\"cm-attribute\">-S</span><span> default </span><span class=\"cm-attribute\">-f</span><span> html &gt; colors.css</span><span>\n</span><span class=\"cm-def\">$ rst2html</span><span>.py </span><span class=\"cm-attribute\">--syntax-highlight</span><span class=\"cm-operator\">=</span><span>short </span><span class=\"cm-attribute\">--stylesheet-path</span><span class=\"cm-operator\">=</span><span>colors.css example.rst &gt; example.html</span></code></pre>\n    </div>\n</li>\n</ol>\n<h2>A mandatory Plone example</h2>\n<p>Yes, you can also embed a Plone example into a short ReST-document.</p>\n<ol>\n<li>\n<p>As always, we need a <code>bootstrap.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ curl</span><span> </span><span class=\"cm-attribute\">-O</span><span> http://downloads.buildout.org/2/bootstrap.py</span></code></pre>\n    </div>\n</li>\n<li>\n<p>And <code>buildout.cfg</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[buildout]</span><span>\n</span><span class=\"cm-def\">extends </span><span>=</span><span class=\"cm-quote\"> http</span><span>:</span><span class=\"cm-quote\">//dist.plone.org/release/4.3-latest/versions.cfg</span><span>\n</span><span class=\"cm-def\">find-links </span><span>=</span><span>\n</span><span class=\"cm-def\">    https</span><span>:</span><span class=\"cm-quote\">//github.com/datakurre/robotframework/tarball/GSOC2013DEMO/robotframework-2.8.1-GSOC2013.0.tar.gz</span><span>\n</span><span class=\"cm-def\">versions </span><span>=</span><span class=\"cm-quote\"> versions</span><span>\n</span><span class=\"cm-def\">parts </span><span>=</span><span class=\"cm-quote\"> robot</span><span>\n\n</span><span class=\"cm-header\">[versions]</span><span>\n</span><span class=\"cm-def\">robotframework </span><span>=</span><span class=\"cm-quote\"> 2.8.1-GSOC2013.0</span><span>\n\n</span><span class=\"cm-header\">[robot]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> zc.recipe.egg</span><span>\n</span><span class=\"cm-def\">eggs </span><span>=</span><span>\n</span><span class=\"cm-def\">    docutils</span><span>\n</span><span class=\"cm-def\">    Pygments</span><span>\n</span><span class=\"cm-def\">    plone.app.robotframework</span><span>\n</span><span class=\"cm-def\">scripts </span><span>=</span><span class=\"cm-quote\"> pybot</span></code></pre>\n    </div>\n</li>\n<li>\n<p>Run the buildout:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ python</span><span> bootstrap.py</span><span>\n</span><span class=\"cm-def\">$ bin</span><span>/buildout</span></code></pre>\n    </div>\n</li>\n<li>\n<p>Add the following <code>plone.rst</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"rst\">\n      <pre class=\" cm-s-solarized\"><code><span>Adding a new page in Plone</span><span>\n</span><span class=\"cm-header\">==========================</span><span>\n\n</span><span class=\"cm-meta\">.. </span><span class=\"cm-keyword\">raw</span><span class=\"cm-meta\">:: </span><span>html</span><span>\n\n</span><span>   &lt;!-- This class allows us to hide the test setup part --&gt;</span><span>\n</span><span>   &lt;style type=\"text/css\"&gt;.hidden { display: none; }&lt;/style&gt;</span><span>\n\n</span><span class=\"cm-meta\">.. </span><span class=\"cm-keyword\">code</span><span class=\"cm-meta\">:: </span><span>robotframework</span><span>\n</span><span>   </span><span class=\"cm-meta\">:</span><span class=\"cm-keyword\">class</span><span class=\"cm-meta\">:</span><span> hidden</span><span>\n\n</span><span>   *** Settings ***</span><span>\n\n</span><span>   Resource  plone/app/robotframework/server.robot</span><span>\n\n</span><span>   Suite Setup  Setup</span><span>\n</span><span>   Suite Teardown  Teardown</span><span>\n</span><span>   Test Setup  Test Setup</span><span>\n</span><span>   Test Teardown  Test Teardown</span><span>\n\n</span><span>    *** Keywords ***</span><span>\n\n</span><span>    Setup</span><span>\n</span><span>        Setup Plone site  plone.app.robotframework.testing.AUTOLOGIN_ROBOT_TESTING</span><span>\n\n</span><span>    Test Setup</span><span>\n</span><span>        Import library  Remote  ${PLONE_URL}/RobotRemote</span><span>\n</span><span>        Enable autologin as  Site Administrator</span><span>\n</span><span>        Set autologin username  test-user-</span><span class=\"cm-null number\">1</span><span>\n\n</span><span>    Test Teardown</span><span>\n</span><span>        Set Zope layer  plone.app.robotframework.testing.AUTOLOGIN_ROBOT_TESTING</span><span>\n</span><span>        ZODB TearDown</span><span>\n</span><span>        ZODB SetUp</span><span>\n\n</span><span>    Teardown</span><span>\n</span><span>        Teardown Plone Site</span><span>\n\n</span><span>This is how you can test adding new document in Plone, once your test user</span><span>\n</span><span>has logged in with enough permissions.</span><span>\n\n</span><span class=\"cm-meta\">.. </span><span class=\"cm-keyword\">code</span><span class=\"cm-meta\">:: </span><span>robotframework</span><span>\n\n</span><span>    *** Test Cases ***</span><span>\n\n</span><span>    Add new page</span><span>\n</span><span>        Go to  ${PLONE_URL}</span><span>\n\n</span><span>        Click link  css=#plone-contentmenu-factories dt a</span><span>\n</span><span>        Element should be visible</span><span>\n</span><span>        ...    css=#plone-contentmenu-factories dd.actionMenuContent</span><span>\n\n</span><span>        Click link  css=a#document</span><span>\n</span><span>        Wait Until Page Contains Element  css=#archetypes-fieldname-title input</span><span>\n\n</span><span>        Input Text  title  This is the title</span><span>\n</span><span>        Input Text  description  This is the summary.</span><span>\n\n</span><span>        Click button  Save</span><span>\n</span><span>        Element should contain  css=#parent-fieldname-title  This is the title</span><span>\n\n</span><span>        Capture page screenshot  new-page.png</span><span>\n\n</span><span>And if the test is successful, you will see the resulting image below:</span><span>\n\n</span><span class=\"cm-meta\">.. </span><span class=\"cm-keyword\">image</span><span class=\"cm-meta\">:: </span><span>new-page.png</span></code></pre>\n    </div>\n</li>\n<li>\n<p>Run the suite:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ bin</span><span>/pybot plone.rst</span><span>\n</span><span class=\"cm-operator\">========================================================================</span><span>\n</span><span>Plone</span><span>\n</span><span class=\"cm-operator\">========================================================================</span><span>\n</span><span>Add new page                                                    | PASS |</span><span>\n</span><span class=\"cm-attribute\">------------------------------------------------------------------------</span><span>\n</span><span>Plone                                                           | PASS |</span><span>\n</span><span class=\"cm-number\">1</span><span> critical test, </span><span class=\"cm-number\">1</span><span> passed, </span><span class=\"cm-number\">0</span><span> failed</span><span>\n</span><span class=\"cm-number\">1</span><span> test total, </span><span class=\"cm-number\">1</span><span> passed, </span><span class=\"cm-number\">0</span><span> failed</span><span>\n</span><span class=\"cm-operator\">========================================================================</span><span>\n</span><span>Output:  /.../output.xml</span><span>\n</span><span>Log:     /.../log.html</span><span>\n</span><span>Report:  /.../report.html</span></code></pre>\n    </div>\n</li>\n<li>\n<p>And (if you have Pygments and Docutils installed into your current\npath) create a nicely highlighted documentation:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ pygmentize</span><span> </span><span class=\"cm-attribute\">-S</span><span> default </span><span class=\"cm-attribute\">-f</span><span> html &gt; colors.css</span><span>\n</span><span class=\"cm-def\">$ rst2html</span><span>.py </span><span class=\"cm-attribute\">--syntax-highlight</span><span class=\"cm-operator\">=</span><span>short </span><span class=\"cm-attribute\">--stylesheet-path</span><span class=\"cm-operator\">=</span><span>colors.css plone.rst &gt; plone.html</span></code></pre>\n    </div>\n</li>\n</ol>\n<p>I’m not sure if it will be possible (or even reasonable) to write\nactual tests in such a descriptive language that they can be included\ninto final documentation. Yet, embedding screenshot-resulting tests into\ndocumentation would make sense, because those would keep documentation\nscreenshots up to date and would also work as acceptance tests for the\ndocumented features.</p>\n<p>That’s why the rest of Vivek’s GSOC will be about running the tests\nwithin Sphinx: the same compilation run could both execute tests to\ncreate screenshots and include those screenshots into the final\ndocumentation.</p>","frontmatter":{"title":"Write testable documentation with Robot Framework","tags":["Doctest","Plone","Robot Framework","Testing"],"date":"August 15, 2013","published":"2013-08-15 06:00:00"}}},"pageContext":{"slug":"/2013/08/write-testable-documentation-with-robot.html/","previous":{"fields":{"slug":"/2013/05/stay-accessible-robot-framework-library.html/"},"frontmatter":{"title":"Stay accessible – Robot Framework library for WAVE-toolbar"}},"next":{"fields":{"slug":"/2013/09/documentation-plausible-excuse-for.html/"},"frontmatter":{"title":"Documentation – a plausible excuse for acceptance testing"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}