{"componentChunkName":"component---src-templates-blog-post-js","path":"/2012/06/running-robot-framework-tests-with.html/","result":{"data":{"site":{"siteMetadata":{"title":"Asko Soukka","author":"Asko Soukka"}},"markdownRemark":{"id":"e170c467-ad8f-553a-b6ba-707ef43bbac1","fields":{"slug":"/2012/06/running-robot-framework-tests-with.html/"},"excerpt":"For a long time I thought that Selenium was hard to set up and tests for\nit were hard to write. Well, I couldn’t have been more wrong. With\nRobot Framework and…","html":"<p>For a long time I thought that Selenium was hard to set up and tests for\nit were hard to write. Well, I couldn’t have been more wrong. With\n<a href=\"http://code.google.com/p/robotframework/\">Robot Framework</a> and\n<a href=\"http://pypi.python.org/pypi/robotframework-selenium2library\">robotframework-selenium2library</a>\neven a BDD-style acceptance test case using Selenium can be as simple\nas:</p>\n<div class=\"gatsby-highlight\" data-language=\"robotframework\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">*** Test Cases ***</span><span>\n\n</span><span class=\"cm-string header\">Can upload file as an admin</span><span>\n</span><span class=\"cm-bracket\">    </span><span class=\"cm-builtin em\">Given</span><span> </span><span class=\"cm-keyword\">I'm</span><span> </span><span class=\"cm-keyword\">logged</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-keyword\">as</span><span> </span><span class=\"cm-keyword\">an</span><span> </span><span class=\"cm-keyword\">admin</span><span>\n</span><span class=\"cm-bracket\">     </span><span class=\"cm-builtin em\">When</span><span> </span><span class=\"cm-keyword\">I</span><span> </span><span class=\"cm-keyword\">go</span><span> </span><span class=\"cm-keyword\">to</span><span> </span><span class=\"cm-keyword\">address</span><span> </span><span class=\"cm-keyword\">'/upload'</span><span>\n</span><span class=\"cm-bracket\">      </span><span class=\"cm-builtin em\">And</span><span> </span><span class=\"cm-keyword\">I</span><span> </span><span class=\"cm-keyword\">select</span><span> </span><span class=\"cm-keyword\">the</span><span> </span><span class=\"cm-keyword\">file</span><span> </span><span class=\"cm-keyword\">'hello.html'</span><span> </span><span class=\"cm-keyword\">into</span><span> </span><span class=\"cm-keyword\">the</span><span> </span><span class=\"cm-keyword\">field</span><span> </span><span class=\"cm-keyword\">'file'</span><span>\n</span><span class=\"cm-bracket\">      </span><span class=\"cm-builtin em\">And</span><span> </span><span class=\"cm-keyword\">I</span><span> </span><span class=\"cm-keyword\">click</span><span> </span><span class=\"cm-keyword\">the</span><span> </span><span class=\"cm-keyword\">button</span><span> </span><span class=\"cm-keyword\">'submit'</span><span>\n</span><span class=\"cm-bracket\">     </span><span class=\"cm-builtin em\">Then</span><span> </span><span class=\"cm-keyword\">the</span><span> </span><span class=\"cm-keyword\">page</span><span> </span><span class=\"cm-keyword\">should</span><span> </span><span class=\"cm-keyword\">contain</span><span> </span><span class=\"cm-keyword\">link</span><span> </span><span class=\"cm-keyword\">'hello.html'</span></code></pre>\n    </div>\n<p>Let’s see, how that’s possible for a GAE app…</p>\n<h2>Bootstrap your development environment</h2>\n<p>I happen to like <a href=\"http://buildout.org/\">buildout</a> for keeping my\ndevelopment environments for different projects clean, separated and\nreproduceable. Today it helps us to install and create scripts for\nrunning Robot Framework tests for our GAE app with all the required\ndependencies. Buildout installs everything under your project directory,\nso the process keeps your system Python clean and healthy.</p>\n<ol start=\"0\">\n<li>\n<p>create a new project directory called <code>myapp</code> and go there</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ mkdir</span><span> myapp</span><span>\n</span><span class=\"cm-def\">$ cd</span><span> myapp</span></code></pre>\n    </div>\n</li>\n<li>\n<p>create a new directory called <code>src</code></p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ mkdir</span><span> src</span></code></pre>\n    </div>\n</li>\n<li>\n<p>copy the codebase of your GAE app into that directory</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ cp</span><span> </span><span class=\"cm-attribute\">-R</span><span> /path/to/myapp src</span></code></pre>\n    </div>\n</li>\n<li>\n<p>create a file called <code>setup.py</code> to allow Python\n<a href=\"http://pypi.python.org/pypi/setuptools\">setuptools</a> (or\n<a href=\"http://pypi.python.org/pypi/distribute\">distribute</a>) used by the\nbuildout to find your code</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">setuptools</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">setup</span><span>, </span><span class=\"cm-variable\">find_packages</span><span>\n\n</span><span class=\"cm-variable\">setup</span><span>(</span><span>\n</span><span>    </span><span class=\"cm-variable\">name</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">'myapp'</span><span>,</span><span>\n</span><span>    </span><span class=\"cm-variable\">packages</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">find_packages</span><span>(</span><span class=\"cm-string\">'src'</span><span>, </span><span class=\"cm-variable\">exclude</span><span class=\"cm-operator\">=</span><span>[</span><span class=\"cm-string\">'ez_setup'</span><span>]),</span><span>\n</span><span>    </span><span class=\"cm-variable\">package_dir</span><span class=\"cm-operator\">=</span><span>{</span><span class=\"cm-string\">''</span><span>: </span><span class=\"cm-string\">'src'</span><span>},</span><span>\n</span><span>    </span><span class=\"cm-variable\">include_package_data</span><span class=\"cm-operator\">=</span><span class=\"cm-keyword\">True</span><span>,</span><span>\n</span><span>    </span><span class=\"cm-variable\">zip_safe</span><span class=\"cm-operator\">=</span><span class=\"cm-keyword\">False</span><span>,</span><span>\n</span><span>    </span><span class=\"cm-variable\">install_requires</span><span class=\"cm-operator\">=</span><span>[</span><span class=\"cm-string\">'setuptools'</span><span>],</span><span>\n</span><span>)</span></code></pre>\n    </div>\n</li>\n<li>\n<p>create a file called <code>MANIFEST.in</code> to accompany your <code>setup.py</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-variable\">recursive</span><span class=\"cm-operator\">-</span><span class=\"cm-variable\">include</span><span> </span><span class=\"cm-variable\">src</span><span> </span><span class=\"cm-operator\">*</span><span>.</span><span class=\"cm-property\">yaml</span><span> </span><span class=\"cm-operator\">*</span><span>.</span><span class=\"cm-property\">py</span><span> </span><span class=\"cm-operator\">*</span><span>.</span><span class=\"cm-property\">txt</span><span> </span><span class=\"cm-operator\">*</span><span>.</span><span class=\"cm-property\">html</span><span> </span><span class=\"cm-operator\">*</span><span>.</span><span class=\"cm-property\">css</span></code></pre>\n    </div>\n</li>\n<li>\n<p>create a file called <code>buildout.cfg</code> to configure your buildout to\ndownload the SDK and create a Robot Framework test script with both\nSDK and your code registered into its run-time <code>sys.path</code></p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[buildout]</span><span>\n</span><span class=\"cm-def\">parts </span><span>=</span><span>\n</span><span class=\"cm-def\">    app</span><span>\n</span><span class=\"cm-def\">    test</span><span>\n</span><span class=\"cm-def\">unzip </span><span>=</span><span class=\"cm-quote\"> true</span><span>\n</span><span class=\"cm-def\">develop </span><span>=</span><span class=\"cm-quote\"> .</span><span>\n\n</span><span class=\"cm-header\">[app]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> rod.recipe.appengine</span><span>\n</span><span class=\"cm-def\">zip-packages </span><span>=</span><span class=\"cm-quote\"> False</span><span>\n</span><span class=\"cm-def\">exclude </span><span>=</span><span class=\"cm-quote\"> tests</span><span>\n</span><span class=\"cm-def\">url </span><span>=</span><span class=\"cm-quote\"> http</span><span>:</span><span class=\"cm-quote\">//googleappengine.googlecode.com/files/google_appengine_1.6.6.zip</span><span>\n</span><span class=\"cm-def\">eggs </span><span>=</span><span class=\"cm-quote\"> myapp</span><span>\n\n</span><span class=\"cm-header\">[test]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> zc.recipe.egg</span><span>\n</span><span class=\"cm-def\">eggs </span><span>=</span><span>\n</span><span class=\"cm-def\">    robotframework</span><span>\n</span><span class=\"cm-def\">    robotentrypoints</span><span>\n</span><span class=\"cm-def\">    robotframework-selenium2library</span><span>\n</span><span class=\"cm-def\">    myapp</span><span>\n</span><span class=\"cm-def\">extra-paths </span><span>=</span><span class=\"cm-quote\"> ${buildout</span><span>:</span><span class=\"cm-quote\">parts-directory}/google_appengine</span></code></pre>\n    </div>\n</li>\n<li>\n<p>download the <code>bootstrap.py</code> for bootstrapping your buildout</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ wget</span><span> http://svn.zope.org/*checkout*/zc.buildout/trunk/bootstrap/bootstrap.py</span></code></pre>\n    </div>\n</li>\n<li>\n<p>finally, run the bootstrap and buildout</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ python</span><span> boostrap.py</span><span>\n</span><span class=\"cm-def\">$ bin</span><span>/buildout</span></code></pre>\n    </div>\n</li>\n</ol>\n<p>If everything goes as planned, your project directory should now include\na script <code>bin/pybot</code> for running Robot Framework with all the\nrequirements in <code>sys.path</code>.</p>\n<p>P.S. The above buildout provides also scripts <code>bin/app</code> and\n<code>bin/appcfg</code>, which allow you to start the development server or upload\nyour app without system wide GAE SDK install. See\n<a href=\"http://pypi.python.org/pypi/rod.recipe.appengine\">rod.recipe.appengine</a>\nfor details.</p>\n<h2>Setup your test fixture</h2>\n<p>For acceptance tests, it would be nice to have your GAE app running as\ncompletely as possible, but with a clean database for every test. That\nrequires every test to have a setup method for launching your app onto\nbackground before the test and a teardown method to shut it down after\nthe test.</p>\n<p>Unfortunately, GAE SDK won’t ship with much support for automated\nacceptance test. There exists a project called\n<a href=\"http://code.google.com/p/gaedriver/wiki/PythonTutorial\">gaedriver</a> for\nrunning SDK’s development server as a Python subprocess while running\nthe tests. Yet, because I was looking for something even simpler,\neventually I ended up with something my own.</p>\n<ol>\n<li>\n<p>create a directory <code>src/tests</code> to contain your app’s custom Robot\nFramework library and the acceptance tests</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ mkdir</span><span> src/tests</span></code></pre>\n    </div>\n</li>\n<li>\n<p>create a file called <code>src/tests/__init__.txt</code> to define setup and\nteardown keywords for every Robot Framework test found under the\nsame directory (or under its sub-directories)</p>\n<div class=\"gatsby-highlight\" data-language=\"robotframework\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">*** Settings ***</span><span>\n\n</span><span class=\"cm-meta\">Resource</span><span>  </span><span class=\"cm-string\">common.txt</span><span>\n\n</span><span class=\"cm-meta\">Test Setup</span><span>  </span><span class=\"cm-keyword\">Start</span><span> </span><span class=\"cm-keyword\">app</span><span> </span><span class=\"cm-keyword\">and</span><span> </span><span class=\"cm-keyword\">open</span><span> </span><span class=\"cm-keyword\">browser</span><span>\n</span><span class=\"cm-meta\">Test Teardown</span><span>  </span><span class=\"cm-keyword\">Stop</span><span> </span><span class=\"cm-keyword\">app</span><span> </span><span class=\"cm-keyword\">and</span><span> </span><span class=\"cm-keyword\">close</span><span> </span><span class=\"cm-keyword\">all</span><span> </span><span class=\"cm-keyword\">browsers</span></code></pre>\n    </div>\n</li>\n<li>\n<p>create an another file called <code>src/tests/common.txt</code> to define the\nsetup and teardown methods in detail and also the libraries\nincluding the used keywords</p>\n<div class=\"gatsby-highlight\" data-language=\"robotframework\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">*** Settings ***</span><span>\n\n</span><span class=\"cm-meta\">Library</span><span>  </span><span class=\"cm-string\">Selenium2Library</span><span>  </span><span class=\"cm-attribute\">timeout</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">5</span><span>  </span><span class=\"cm-attribute\">implicit_wait</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">5</span><span>\n</span><span class=\"cm-meta\">Library</span><span>  </span><span class=\"cm-string\">tests.AppEngineLibrary</span><span>\n\n</span><span class=\"cm-header\">*** Keywords ***</span><span>\n\n</span><span class=\"cm-def\">Start</span><span> </span><span class=\"cm-def\">app</span><span> </span><span class=\"cm-def\">and</span><span> </span><span class=\"cm-def\">open</span><span> </span><span class=\"cm-def\">browser</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Start</span><span> </span><span class=\"cm-keyword\">app</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Open</span><span> </span><span class=\"cm-keyword\">browser</span><span>  </span><span class=\"cm-operator\">http://localhost:</span><span class=\"cm-string\">8080/</span><span>\n\n</span><span class=\"cm-def\">Stop</span><span> </span><span class=\"cm-def\">app</span><span> </span><span class=\"cm-def\">and</span><span> </span><span class=\"cm-def\">close</span><span> </span><span class=\"cm-def\">all</span><span> </span><span class=\"cm-def\">browsers</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Close</span><span> </span><span class=\"cm-keyword\">all</span><span> </span><span class=\"cm-keyword\">browsers</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Stop</span><span> </span><span class=\"cm-keyword\">app</span></code></pre>\n    </div>\n</li>\n<li>\n<p>finally, create a file called <code>src/tests/__init__.py</code> to define our\ncustom <strong>AppEngineLibrary</strong> to provide keywords for starting and\nstopping our app for every test case</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-comment\"># -*- coding: utf-8 -*-</span><span>\n</span><span class=\"cm-string\">\"\"\"Google App Engine library for Robot Framework\"\"\"</span><span>\n\n</span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">signal</span><span>\n</span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">os</span><span>.</span><span class=\"cm-property\">path</span><span>\n\n\n</span><span class=\"cm-keyword\">class</span><span> </span><span class=\"cm-def\">AppEngineLibrary</span><span>(</span><span class=\"cm-builtin\">object</span><span>):</span><span>\n</span><span>    </span><span class=\"cm-string\">\"\"\"Provides keywords for starting and shutting down GAE dev_appserver\"\"\"</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">__init__</span><span>(</span><span class=\"cm-variable-2\">self</span><span>):</span><span>\n\n</span><span>        </span><span class=\"cm-comment\"># initialize variables</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">robot_pid</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">None</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">gae_pid</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">None</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">start_application</span><span>(</span><span class=\"cm-variable-2\">self</span><span>):</span><span>\n\n</span><span>        </span><span class=\"cm-comment\"># save the process id to distinguish it from its children</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">robot_pid</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">os</span><span>.</span><span class=\"cm-property\">getpid</span><span>()</span><span>\n\n</span><span>        </span><span class=\"cm-comment\"># fork the process for its child to launch the appserver</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">gae_pid</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">os</span><span>.</span><span class=\"cm-property\">fork</span><span>()</span><span>\n\n</span><span>        </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">os</span><span>.</span><span class=\"cm-property\">getpid</span><span>() </span><span class=\"cm-operator\">!=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">robot_pid</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-comment\"># mute logging so that app server doesn't mess with the robot</span><span>\n</span><span>            </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">logging</span><span>\n</span><span>            </span><span class=\"cm-variable\">logging</span><span>.</span><span class=\"cm-property\">disable</span><span>(</span><span class=\"cm-variable\">logging</span><span>.</span><span class=\"cm-property\">CRITICAL</span><span>)</span><span>\n\n</span><span>            </span><span class=\"cm-comment\"># import appserver and fix sys.path for GAE modules only after</span><span>\n</span><span>            </span><span class=\"cm-comment\"># the process has been forked (GAE may monkeypatch things...)</span><span>\n</span><span>            </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">dev_appserver</span><span>\n</span><span>            </span><span class=\"cm-variable\">dev_appserver</span><span>.</span><span class=\"cm-property\">fix_sys_path</span><span>()</span><span>\n\n</span><span>            </span><span class=\"cm-comment\"># launch the appserver</span><span>\n</span><span>            </span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">google</span><span>.</span><span class=\"cm-property\">appengine</span><span>.</span><span class=\"cm-property\">tools</span><span>.</span><span class=\"cm-property\">dev_appserver_main</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">main</span><span>\n</span><span>            </span><span class=\"cm-variable\">app_dir</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">os</span><span>.</span><span class=\"cm-property\">path</span><span>.</span><span class=\"cm-property\">join</span><span>(</span><span class=\"cm-variable\">os</span><span>.</span><span class=\"cm-property\">path</span><span>.</span><span class=\"cm-property\">dirname</span><span>(</span><span class=\"cm-variable\">__file__</span><span>), </span><span class=\"cm-variable\">os</span><span>.</span><span class=\"cm-property\">path</span><span>.</span><span class=\"cm-property\">pardir</span><span>)</span><span>\n</span><span>            </span><span class=\"cm-variable\">main</span><span>([</span><span>\n</span><span>                </span><span class=\"cm-variable\">os</span><span>.</span><span class=\"cm-property\">getcwd</span><span>(),</span><span>\n</span><span>                </span><span class=\"cm-variable\">app_dir</span><span>,</span><span>\n</span><span>                </span><span class=\"cm-string\">'--skip_sdk_update_check'</span><span>,</span><span>\n</span><span>                </span><span class=\"cm-string\">'--clear_datastore'</span><span>,</span><span>\n</span><span>            ])</span><span>\n\n</span><span>            </span><span class=\"cm-comment\"># make immediate suicide as soon as the appserver has shut down</span><span>\n</span><span>            </span><span class=\"cm-variable\">os</span><span>.</span><span class=\"cm-property\">kill</span><span>(</span><span class=\"cm-variable\">os</span><span>.</span><span class=\"cm-property\">getpid</span><span>(), </span><span class=\"cm-variable\">signal</span><span>.</span><span class=\"cm-property\">SIGKILL</span><span>)</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">stop_application</span><span>(</span><span class=\"cm-variable-2\">self</span><span>):</span><span>\n\n</span><span>        </span><span class=\"cm-comment\"># tell the appserver to terminate</span><span>\n</span><span>        </span><span class=\"cm-variable\">os</span><span>.</span><span class=\"cm-property\">kill</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">gae_pid</span><span>, </span><span class=\"cm-variable\">signal</span><span>.</span><span class=\"cm-property\">SIGTERM</span><span>)</span><span>\n\n</span><span>    </span><span class=\"cm-variable\">start_app</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">start_application</span><span>  </span><span class=\"cm-comment\"># alias</span><span>\n</span><span>    </span><span class=\"cm-variable\">stop_app</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">stop_application</span><span>  </span><span class=\"cm-comment\"># alias</span></code></pre>\n    </div>\n</li>\n</ol>\n<p>Now you should have everything ready and in place for writing acceptance\ntests for you app.</p>\n<h2>Write and run your first test case</h2>\n<p>Create a complete test case file called <code>src/tests/test_upload.txt</code>,\nincluding a BDD-style test case and re-usable helper keywords to\ntranslate BDD-clauses into more generic Robot Framework tests using the\nkeywords defined in Selenium2Libary</p>\n<div class=\"gatsby-highlight\" data-language=\"robotframework\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">*** Settings ***</span><span>\n\n</span><span class=\"cm-meta\">Resource</span><span>  </span><span class=\"cm-string\">common.txt</span><span>\n\n</span><span class=\"cm-header\">*** Variables ***</span><span>\n\n</span><span class=\"cm-variable-2\">${ADMIN_EMAIL}</span><span>  </span><span class=\"cm-string\">admin@example.com</span><span>\n\n</span><span class=\"cm-header\">*** Test Cases ***</span><span>\n\n</span><span class=\"cm-string header\">Can upload file as an admin</span><span>\n</span><span class=\"cm-bracket\">    </span><span class=\"cm-builtin em\">Given</span><span> </span><span class=\"cm-keyword\">I'm</span><span> </span><span class=\"cm-keyword\">logged</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-keyword\">as</span><span> </span><span class=\"cm-keyword\">an</span><span> </span><span class=\"cm-keyword\">admin</span><span>\n</span><span class=\"cm-bracket\">     </span><span class=\"cm-builtin em\">When</span><span> </span><span class=\"cm-keyword\">I</span><span> </span><span class=\"cm-keyword\">go</span><span> </span><span class=\"cm-keyword\">to</span><span> </span><span class=\"cm-keyword\">address</span><span> </span><span class=\"cm-keyword\">'/upload'</span><span>\n</span><span class=\"cm-bracket\">      </span><span class=\"cm-builtin em\">And</span><span> </span><span class=\"cm-keyword\">I</span><span> </span><span class=\"cm-keyword\">select</span><span> </span><span class=\"cm-keyword\">the</span><span> </span><span class=\"cm-keyword\">file</span><span> </span><span class=\"cm-keyword\">'hello.html'</span><span> </span><span class=\"cm-keyword\">into</span><span> </span><span class=\"cm-keyword\">the</span><span> </span><span class=\"cm-keyword\">field</span><span> </span><span class=\"cm-keyword\">'file'</span><span>\n</span><span class=\"cm-bracket\">      </span><span class=\"cm-builtin em\">And</span><span> </span><span class=\"cm-keyword\">I</span><span> </span><span class=\"cm-keyword\">click</span><span> </span><span class=\"cm-keyword\">the</span><span> </span><span class=\"cm-keyword\">button</span><span> </span><span class=\"cm-keyword\">'submit'</span><span>\n</span><span class=\"cm-bracket\">     </span><span class=\"cm-builtin em\">Then</span><span> </span><span class=\"cm-keyword\">the</span><span> </span><span class=\"cm-keyword\">page</span><span> </span><span class=\"cm-keyword\">should</span><span> </span><span class=\"cm-keyword\">contain</span><span> </span><span class=\"cm-keyword\">link</span><span> </span><span class=\"cm-keyword\">'hello.html'</span><span>\n\n</span><span class=\"cm-header\">*** Keywords ***</span><span>\n\n</span><span class=\"cm-def\">I'm</span><span> </span><span class=\"cm-def\">logged</span><span> </span><span class=\"cm-def\">in</span><span> </span><span class=\"cm-def\">as</span><span> </span><span class=\"cm-def\">an</span><span> </span><span class=\"cm-def\">admin</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Go</span><span> </span><span class=\"cm-keyword\">to</span><span>  </span><span class=\"cm-operator\">http://localhost:</span><span class=\"cm-string\">8080/upload</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Click</span><span> </span><span class=\"cm-keyword\">link</span><span>  </span><span class=\"cm-string\">Login</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Input</span><span> </span><span class=\"cm-keyword\">text</span><span>  </span><span class=\"cm-string\">email</span><span>  </span><span class=\"cm-variable-2\">${ADMIN_EMAIL</span><span class=\"cm-variable-2\">}</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Click</span><span> </span><span class=\"cm-keyword\">button</span><span>  </span><span class=\"cm-string\">Login</span><span>\n\n</span><span class=\"cm-def\">I</span><span> </span><span class=\"cm-def\">go</span><span> </span><span class=\"cm-def\">to</span><span> </span><span class=\"cm-def\">address</span><span> </span><span class=\"cm-def\">'</span><span class=\"cm-variable-2\">${path}</span><span class=\"cm-def\">'</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Go</span><span> </span><span class=\"cm-keyword\">to</span><span>  </span><span class=\"cm-operator\">http://localhost:</span><span class=\"cm-string\">8080</span><span class=\"cm-variable-2\">${path</span><span class=\"cm-variable-2\">}</span><span>\n\n</span><span class=\"cm-def\">I</span><span> </span><span class=\"cm-def\">select</span><span> </span><span class=\"cm-def\">the</span><span> </span><span class=\"cm-def\">file</span><span> </span><span class=\"cm-def\">'</span><span class=\"cm-variable-2\">${filename}</span><span class=\"cm-def\">'</span><span> </span><span class=\"cm-def\">into</span><span> </span><span class=\"cm-def\">the</span><span> </span><span class=\"cm-def\">field</span><span> </span><span class=\"cm-def\">'</span><span class=\"cm-variable-2\">${locator}</span><span class=\"cm-def\">'</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Choose</span><span> </span><span class=\"cm-keyword\">file</span><span>  </span><span class=\"cm-variable-2\">${locator}</span><span>  </span><span class=\"cm-variable-2\">${</span><span class=\"cm-builtin\">CURDIR</span><span class=\"cm-variable-2\">}</span><span class=\"cm-string\">/</span><span class=\"cm-variable-2\">${filename</span><span class=\"cm-variable-2\">}</span><span>\n\n</span><span class=\"cm-def\">I</span><span> </span><span class=\"cm-def\">click</span><span> </span><span class=\"cm-def\">the</span><span> </span><span class=\"cm-def\">button</span><span> </span><span class=\"cm-def\">'</span><span class=\"cm-variable-2\">${locator}</span><span class=\"cm-def\">'</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Click</span><span> </span><span class=\"cm-keyword\">button</span><span>  </span><span class=\"cm-variable-2\">${locator</span><span class=\"cm-variable-2\">}</span><span>\n\n</span><span class=\"cm-def\">The</span><span> </span><span class=\"cm-def\">page</span><span> </span><span class=\"cm-def\">should</span><span> </span><span class=\"cm-def\">contain</span><span> </span><span class=\"cm-def\">link</span><span> </span><span class=\"cm-def\">'</span><span class=\"cm-variable-2\">${locator}</span><span class=\"cm-def\">'</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Page</span><span> </span><span class=\"cm-keyword\">should</span><span> </span><span class=\"cm-keyword\">contain</span><span> </span><span class=\"cm-keyword\">link</span><span>  </span><span class=\"cm-variable-2\">${locator</span><span class=\"cm-variable-2\">}</span></code></pre>\n    </div>\n<p>Now this test could be executed with Robot Framework and Selenium just\nby using the command</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">$ bin</span><span>/pybot src/tests</span></code></pre>\n    </div>\n<p>Of course, you should look into <a href=\"http://robotframework.googlecode.com/hg/doc/userguide/RobotFrameworkUserGuide.html?r=2.7.7#creating-test-cases\">Robot Framework User\nGuide</a>.</p>","frontmatter":{"title":"Running Robot Framework tests with Google App Engine SDK","tags":["Google App Engine","Python","Robot Framework","Selenium","Testing"],"date":"June 01, 2012","published":"2012-06-01 06:00:00"}}},"pageContext":{"slug":"/2012/06/running-robot-framework-tests-with.html/","previous":null,"next":{"fields":{"slug":"/2012/09/getting-started-with-robotframework-and.html/"},"frontmatter":{"title":"Getting started with Robot Framework and plone.app.testing"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}