{"componentChunkName":"component---src-templates-blog-post-js","path":"/2012/09/getting-started-with-robotframework-and.html/","result":{"data":{"site":{"siteMetadata":{"title":"Asko Soukka","author":"Asko Soukka"}},"markdownRemark":{"id":"ac14afa5-7fe7-5cb9-b34a-aa479a7d8648","fields":{"slug":"/2012/09/getting-started-with-robotframework-and.html/"},"excerpt":"Selenium testing Plone doesn’t need to be difficult. Actually, with the\nrecent hard work done for\nrobotframework-selenium2library\nit’s the easiest way to test…","html":"<p>Selenium testing Plone doesn’t need to be difficult. Actually, with the\nrecent hard work done for\n<a href=\"https://github.com/rtomac/robotframework-selenium2library\">robotframework-selenium2library</a>\nit’s the easiest way to test your add-ons! (<a href=\"https://github.com/rtomac/robotframework-selenium2library/graphs/contributors\">Thanks a lot to these\nfolks!</a>)</p>\n<p>I’ll show you, how to create your first\n<a href=\"http://pypi.python.org/pypi/zope.testrunner\">zope.testrunner</a>\ncompatible Robot Framework tests for your custom Plone add-on. Also,\neverything you already know about\n<a href=\"http://pypi.python.org/pypi/plone.app.testing\">plone.app.testing</a>,\nzope.testrunner or Python unittest-library, should apply here.</p>\n<p><strong>Update</strong>: An up-to-date documentation for writing Robot Framework\ntests for Plone is available as part of <a href=\"http://developer.plone.org/reference_manuals/external/plone.app.robotframework/\">Plone Developer\nDocumentation</a>.</p>\n<h2>Environment</h2>\n<p>Here’s our dummy Plone add-on package with its testing buildout:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-solarized\"><code><span>bootstrap.py\nbuildout.cfg\nCHANGES.txt\nREADME.txt\nsetup.py\nsrc\nsrc/my\nsrc/my_package\nsrc/my_package/__init__.py\nsrc/my_package/tests\nsrc/my_package/tests/__init__.py\nsrc/my_package/tests/test_robot.py\nsrc/my_package/tests/test_accessibility.robot</span></code></pre>\n    </div>\n<p>We’ve got <a href=\"http://downloads.buildout.org/2/bootstrap.py\">bootstrap.py</a>,\nempty text files for <code>README</code> and <code>CHANGES</code>, and the following\n<code>setup.py</code> to define our (empty) add-on package:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">setuptools</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">setup</span><span>, </span><span class=\"cm-variable\">find_packages</span><span>\n\n</span><span class=\"cm-variable\">version</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-string\">\"1.0.0\"</span><span>\n\n</span><span class=\"cm-variable\">setup</span><span>(</span><span>\n</span><span>    </span><span class=\"cm-variable\">name</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">\"my-package\"</span><span>,</span><span>\n</span><span>    </span><span class=\"cm-variable\">version</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">version</span><span>,</span><span>\n</span><span>    </span><span class=\"cm-variable\">description</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">\"An example Plone add-on\"</span><span>,</span><span>\n</span><span>    </span><span class=\"cm-variable\">long_description</span><span class=\"cm-operator\">=</span><span>(</span><span class=\"cm-builtin\">open</span><span>(</span><span class=\"cm-string\">\"README.txt\"</span><span>).</span><span class=\"cm-property\">read</span><span>() </span><span class=\"cm-operator\">+</span><span> </span><span class=\"cm-string\">\"\\n\"</span><span> </span><span class=\"cm-operator\">+</span><span>\n</span><span>                      </span><span class=\"cm-builtin\">open</span><span>(</span><span class=\"cm-string\">\"CHANGES.txt\"</span><span>).</span><span class=\"cm-property\">read</span><span>()),</span><span>\n</span><span>    </span><span class=\"cm-comment\"># Get more strings from</span><span>\n</span><span>    </span><span class=\"cm-comment\"># http://pypi.python.org/pypi?%3Aaction=list_classifiers</span><span>\n</span><span>    </span><span class=\"cm-variable\">classifiers</span><span class=\"cm-operator\">=</span><span>[</span><span>\n</span><span>        </span><span class=\"cm-string\">\"Programming Language :: Python\"</span><span>,</span><span>\n</span><span>    ],</span><span>\n</span><span>    </span><span class=\"cm-variable\">keywords</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">\"\"</span><span>,</span><span>\n</span><span>    </span><span class=\"cm-variable\">author</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">\"\"</span><span>,</span><span>\n</span><span>    </span><span class=\"cm-variable\">author_email</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">\"\"</span><span>,</span><span>\n</span><span>    </span><span class=\"cm-variable\">url</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">\"\"</span><span>,</span><span>\n</span><span>    </span><span class=\"cm-variable\">license</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">\"GPL\"</span><span>,</span><span>\n</span><span>    </span><span class=\"cm-variable\">packages</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">find_packages</span><span>(</span><span class=\"cm-string\">\"src\"</span><span>, </span><span class=\"cm-variable\">exclude</span><span class=\"cm-operator\">=</span><span>[</span><span class=\"cm-string\">\"ez_setup\"</span><span>]),</span><span>\n</span><span>    </span><span class=\"cm-variable\">package_dir</span><span class=\"cm-operator\">=</span><span>{</span><span class=\"cm-string\">\"\"</span><span>: </span><span class=\"cm-string\">\"src\"</span><span>},</span><span>\n</span><span>    </span><span class=\"cm-variable\">include_package_data</span><span class=\"cm-operator\">=</span><span class=\"cm-keyword\">True</span><span>,</span><span>\n</span><span>    </span><span class=\"cm-variable\">zip_safe</span><span class=\"cm-operator\">=</span><span class=\"cm-keyword\">False</span><span>,</span><span>\n</span><span>    </span><span class=\"cm-variable\">install_requires</span><span class=\"cm-operator\">=</span><span>[</span><span>\n</span><span>        </span><span class=\"cm-string\">\"setuptools\"</span><span>,</span><span>\n</span><span>    ],</span><span>\n</span><span>    </span><span class=\"cm-variable\">extras_require</span><span class=\"cm-operator\">=</span><span>{</span><span class=\"cm-string\">\"test\"</span><span>: [</span><span>\n</span><span>        </span><span class=\"cm-string\">\"plone.app.testing\"</span><span>,</span><span>\n</span><span>        </span><span class=\"cm-string\">\"rootsuite\"</span><span>,</span><span>\n</span><span>        </span><span class=\"cm-string\">\"robotframework-selenium2library\"</span><span>,</span><span>\n</span><span>    ]},</span><span>\n</span><span>    </span><span class=\"cm-variable\">entry_points</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">\"\"\"</span><span>\n</span><span class=\"cm-string\">    # -*- Entry points: -*-</span><span>\n</span><span class=\"cm-string\">    [z3c.autoinclude.plugin]</span><span>\n</span><span class=\"cm-string\">    target = plone</span><span>\n</span><span class=\"cm-string\">    \"\"\"</span><span>\n</span><span>)</span></code></pre>\n    </div>\n<p>Note, how we’ve defined <code>test</code>-extras for our package to require\n<a href=\"http://pypi.python.org/pypi/robotsuite\">robotsuite</a> and\n<a href=\"http://rtomac.github.com/robotframework-selenium2library/doc/Selenium2Library.html\">robotframework-selenium2library</a> packages in addition to the usual\n<code>plone.app.testing</code>.</p>\n<p>And here’s our <code>buildout.cfg</code> to set up the test runner:</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[buildout]</span><span>\n</span><span class=\"cm-def\">extends </span><span>=</span><span class=\"cm-quote\"> http</span><span>:</span><span class=\"cm-quote\">//dist.plone.org/release/4.2-latest/versions.cfg</span><span>\n</span><span class=\"cm-def\">parts </span><span>=</span><span class=\"cm-quote\"> test</span><span>\n</span><span class=\"cm-def\">develop </span><span>=</span><span class=\"cm-quote\"> .</span><span>\n\n</span><span class=\"cm-header\">[test]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> zc.recipe.testrunner</span><span>\n</span><span class=\"cm-def\">eggs </span><span>=</span><span class=\"cm-quote\"> my-package [test]</span></code></pre>\n    </div>\n<h2>Test suite</h2>\n<p>Let’s write our first test suite in Robot Framework syntax into\n<code>src/my_package/tests/test_accessibility.robot</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"robotframework\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">*** Settings ***</span><span>\n\n</span><span class=\"cm-meta\">Library</span><span>  </span><span class=\"cm-string\">Selenium2Library</span><span>  </span><span class=\"cm-attribute\">timeout</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">10</span><span>  </span><span class=\"cm-attribute\">implicit_wait</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">0.5</span><span>\n\n</span><span class=\"cm-meta\">Suite Setup</span><span>  </span><span class=\"cm-keyword\">Start</span><span> </span><span class=\"cm-keyword\">browser</span><span>\n</span><span class=\"cm-meta\">Suite Teardown</span><span>  </span><span class=\"cm-keyword\">Close</span><span> </span><span class=\"cm-keyword\">All</span><span> </span><span class=\"cm-keyword\">Browsers</span><span>\n\n</span><span class=\"cm-header\">*** Test Cases ***</span><span>\n\n</span><span class=\"cm-string header\">Plone Accessibility</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Goto</span><span> </span><span class=\"cm-keyword\">homepage</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Click</span><span> </span><span class=\"cm-keyword\">link</span><span>  </span><span class=\"cm-string\">Accessibility</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Page</span><span> </span><span class=\"cm-keyword\">should</span><span> </span><span class=\"cm-keyword\">contain</span><span>  </span><span class=\"cm-string\">Accessibility</span><span> </span><span class=\"cm-string\">Statement</span><span>\n\n</span><span class=\"cm-header\">*** Keywords ***</span><span>\n\n</span><span class=\"cm-def\">Start</span><span> </span><span class=\"cm-def\">browser</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Open</span><span> </span><span class=\"cm-keyword\">browser</span><span>  </span><span class=\"cm-operator\">http://localhost:</span><span class=\"cm-string\">55001/plone/</span><span>\n\n</span><span class=\"cm-def\">Goto</span><span> </span><span class=\"cm-def\">homepage</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Go</span><span> </span><span class=\"cm-keyword\">to</span><span>  </span><span class=\"cm-operator\">http://localhost:</span><span class=\"cm-string\">55001/plone/</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Page</span><span> </span><span class=\"cm-keyword\">should</span><span> </span><span class=\"cm-keyword\">contain</span><span>  </span><span class=\"cm-string\">Plone</span><span> </span><span class=\"cm-string\">site</span></code></pre>\n    </div>\n<p>Note, how we import and configure <strong>Selenium2Library</strong>, and how we\nexpect Plone to be found at <code>http://localhost:55001/plone/</code>. That’s how\n<code>plone.app.testing</code> serves it.</p>\n<h2>Robotsuite</h2>\n<p>The last step is to glue our Robot Framework test suite and\n<code>plone.app.testing</code> together. That’s done with <code>robotsuite</code>-package by\ndefining new a <strong>RobotTestSuite</strong> with the default\n<strong>PLONE_ZSERVER</strong>-layer from <code>plone.app.testing</code> in\n<code>src/my_package/tests/test_robot.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">unittest</span><span>\n\n</span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">robotsuite</span><span>\n</span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">plone</span><span>.</span><span class=\"cm-property\">app</span><span>.</span><span class=\"cm-property\">testing</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">PLONE_ZSERVER</span><span>\n</span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">plone</span><span>.</span><span class=\"cm-property\">testing</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">layered</span><span>\n\n\n</span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">test_suite</span><span>():</span><span>\n</span><span>    </span><span class=\"cm-variable\">suite</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">unittest</span><span>.</span><span class=\"cm-property\">TestSuite</span><span>()</span><span>\n</span><span>    </span><span class=\"cm-variable\">suite</span><span>.</span><span class=\"cm-property\">addTests</span><span>([</span><span>\n</span><span>        </span><span class=\"cm-variable\">layered</span><span>(</span><span class=\"cm-variable\">robotsuite</span><span>.</span><span class=\"cm-property\">RobotTestSuite</span><span>(</span><span class=\"cm-string\">\"test_accessibility.robot\"</span><span>),</span><span>\n</span><span>                </span><span class=\"cm-variable\">layer</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">PLONE_ZSERVER</span><span>),</span><span>\n</span><span>    ])</span><span>\n</span><span>    </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-variable\">suite</span></code></pre>\n    </div>\n<p>If you have ever defined a Python doctest test suite to be used with\n<code>plone.app.testing</code>, the above should look very familiar.</p>\n<h2>Running</h2>\n<p>With everything above in place, just run:</p>\n<ol>\n<li>\n<p>bootstrap (with a Plone-compatible Python or virtualenv)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-solarized\"><code><span>$ python bootstrap.py</span></code></pre>\n    </div>\n</li>\n<li>\n<p>buildout</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-solarized\"><code><span>$ bin/buildout</span></code></pre>\n    </div>\n</li>\n<li>\n<p>and test</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-solarized\"><code><span>$ bin/test</span></code></pre>\n    </div>\n</li>\n</ol>\n<p>and you should see something like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-solarized\"><code><span>$ python bootstrap.py\nDownloading http://pypi.python.org/packages/source/d/distribute/distribute-0.6.35.tar.gz\nExtracting in /var/folders/b1/mld_r9wj1jbfwf2jcfl_d61sc6kdnb/T/tmp902seC\nNow working in /var/folders/b1/mld_r9wj1jbfwf2jcfl_d61sc6kdnb/T/tmp902seC/distribute-0.6.35\nBuilding a Distribute egg in /var/folders/b1/mld_r9wj1jbfwf2jcfl_d61sc6kdnb/T/tmp69NImk\n/var/folders/b1/mld_r9wj1jbfwf2jcfl_d61sc6kdnb/T/tmp69NImk/distribute-0.6.35-py2.7.egg\nCreating directory '/.../bin'.\nCreating directory '/.../parts'.\nCreating directory '/.../develop-eggs'.\nGenerated script '/.../bin/buildout'.</span></code></pre>\n    </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-solarized\"><code><span>$ bin/buildout\nDevelop: '/.../.'\nInstalling test.\n...\nGenerated script '/.../bin/test'.</span></code></pre>\n    </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-solarized\"><code><span>$ bin/test\nRunning plone.app.testing.layers.Plone:ZServer tests:\n  Set up plone.testing.zca.LayerCleanup in 0.000 seconds.\n  Set up plone.testing.z2.Startup in 0.398 seconds.\n  Set up plone.app.testing.layers.PloneFixture in 9.921 seconds.\n  Set up plone.testing.z2.ZServer in 0.506 seconds.\n  Set up plone.app.testing.layers.Plone:ZServer in 0.000 seconds.\n  Ran 1 tests with 0 failures and 0 errors in 2.969 seconds.\nTearing down left over layers:\n  Tear down plone.app.testing.layers.Plone:ZServer in 0.000 seconds.\n  Tear down plone.app.testing.layers.PloneFixture in 0.088 seconds.\n  Tear down plone.testing.z2.ZServer in 5.151 seconds.\n  Tear down plone.testing.z2.Startup in 0.009 seconds.\n  Tear down plone.testing.zca.LayerCleanup in 0.005 seconds.</span></code></pre>\n    </div>\n<p>You should also find Robot Framework logs and reports being generated\ninto your buildout directory under <code>parts/test</code>.</p>\n<h2>Custom layer</h2>\n<p>Obviously, we’d like to run our test against a Plone with our own\nadd-on installed. That requires a custom test layer, as described at\n<a href=\"http://pypi.python.org/pypi/plone.app.testing\">plone.app.testing</a>.</p>\n<p>Let’s start by adding a few more files:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-solarized\"><code><span>src/my_package/configure.zcml\nsrc/my_package/hello_world.pt\nsrc/my_package/testing.py\nsrc/my_package/tests/test_hello_world.robot</span></code></pre>\n    </div>\n<p>At first we define our custom view to be tested in\n<code>src/my_package/configure.zcml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">configure</span><span> </span><span class=\"cm-attribute\">xmlns</span><span>=</span><span class=\"cm-string\">\"http://namespaces.zope.org/zope\"</span><span>\n</span><span>           </span><span class=\"cm-attribute\">xmlns:browser</span><span>=</span><span class=\"cm-string\">\"http://namespaces.zope.org/browser\"</span><span class=\"cm-tag bracket\">&gt;</span><span>\n\n</span><span>    </span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">browser:page</span><span>\n</span><span>        </span><span class=\"cm-attribute\">name</span><span>=</span><span class=\"cm-string\">\"hello-world\"</span><span>\n</span><span>        </span><span class=\"cm-attribute\">for</span><span>=</span><span class=\"cm-string\">\"Products.CMFCore.interfaces.ISiteRoot\"</span><span>\n</span><span>        </span><span class=\"cm-attribute\">template</span><span>=</span><span class=\"cm-string\">\"hello_world.pt\"</span><span>\n</span><span>        </span><span class=\"cm-attribute\">permission</span><span>=</span><span class=\"cm-string\">\"zope2.View\"</span><span>\n</span><span>        </span><span class=\"cm-tag bracket\">/&gt;</span><span>\n\n</span><span class=\"cm-tag bracket\">&lt;/</span><span class=\"cm-tag\">configure</span><span class=\"cm-tag bracket\">&gt;</span></code></pre>\n    </div>\n<p>and in <code>src/my_package/hello_world.pt</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">html</span><span> </span><span class=\"cm-attribute\">xmlns</span><span>=</span><span class=\"cm-string\">\"http://www.w3.org/1999/xhtml\"</span><span> </span><span class=\"cm-attribute\">xml:lang</span><span>=</span><span class=\"cm-string\">\"en\"</span><span>\n</span><span>      </span><span class=\"cm-attribute\">xmlns:tal</span><span>=</span><span class=\"cm-string\">\"http://xml.zope.org/namespaces/tal\"</span><span>\n</span><span>      </span><span class=\"cm-attribute\">xmlns:metal</span><span>=</span><span class=\"cm-string\">\"http://xml.zope.org/namespaces/metal\"</span><span>\n</span><span>      </span><span class=\"cm-attribute\">xmlns:i18n</span><span>=</span><span class=\"cm-string\">\"http://xml.zope.org/namespaces/i18n\"</span><span>\n</span><span>      </span><span class=\"cm-attribute\">lang</span><span>=</span><span class=\"cm-string\">\"en\"</span><span>\n</span><span>      </span><span class=\"cm-attribute\">metal:use-macro</span><span>=</span><span class=\"cm-string\">\"context/main_template/macros/master\"</span><span>\n</span><span>      </span><span class=\"cm-attribute\">i18n:domain</span><span>=</span><span class=\"cm-string\">\"plone\"</span><span class=\"cm-tag bracket\">&gt;</span><span>\n</span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">body</span><span class=\"cm-tag bracket\">&gt;</span><span>\n\n</span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">metal:content-core</span><span> </span><span class=\"cm-attribute\">fill-slot</span><span>=</span><span class=\"cm-string\">\"content-core\"</span><span class=\"cm-tag bracket\">&gt;</span><span>\n</span><span>    </span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">metal:content-core</span><span> </span><span class=\"cm-attribute\">define-macro</span><span>=</span><span class=\"cm-string\">\"content-core\"</span><span class=\"cm-tag bracket\">&gt;</span><span>\n</span><span>      </span><span class=\"cm-tag bracket\">&lt;</span><span class=\"cm-tag\">p</span><span class=\"cm-tag bracket\">&gt;</span><span>Hello World!</span><span class=\"cm-tag bracket\">&lt;/</span><span class=\"cm-tag\">p</span><span class=\"cm-tag bracket\">&gt;</span><span>\n</span><span>    </span><span class=\"cm-tag bracket\">&lt;/</span><span class=\"cm-tag\">metal:content-core</span><span class=\"cm-tag bracket\">&gt;</span><span>\n</span><span class=\"cm-tag bracket\">&lt;/</span><span class=\"cm-tag\">metal:content-core</span><span class=\"cm-tag bracket\">&gt;</span><span>\n\n</span><span class=\"cm-tag bracket\">&lt;/</span><span class=\"cm-tag\">body</span><span class=\"cm-tag bracket\">&gt;</span><span>\n</span><span class=\"cm-tag bracket\">&lt;/</span><span class=\"cm-tag\">html</span><span class=\"cm-tag bracket\">&gt;</span></code></pre>\n    </div>\n<p>Then we define our custom test layer in <code>src/my_package/testing.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">plone</span><span>.</span><span class=\"cm-property\">app</span><span>.</span><span class=\"cm-property\">testing</span><span> </span><span class=\"cm-keyword\">import</span><span> (</span><span>\n</span><span>    </span><span class=\"cm-variable\">PloneSandboxLayer</span><span>,</span><span>\n</span><span>    </span><span class=\"cm-variable\">FunctionalTesting</span><span>,</span><span>\n</span><span>    </span><span class=\"cm-variable\">PLONE_FIXTURE</span><span>,</span><span>\n</span><span>)</span><span>\n\n</span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">plone</span><span>.</span><span class=\"cm-property\">testing</span><span>.</span><span class=\"cm-property\">z2</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">ZSERVER_FIXTURE</span><span>\n\n\n</span><span class=\"cm-keyword\">class</span><span> </span><span class=\"cm-def\">MyPackageLayer</span><span>(</span><span class=\"cm-variable\">PloneSandboxLayer</span><span>):</span><span>\n</span><span>    </span><span class=\"cm-variable\">defaultBases</span><span> </span><span class=\"cm-operator\">=</span><span> (</span><span class=\"cm-variable\">PLONE_FIXTURE</span><span>,)</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">setUpZope</span><span>(</span><span class=\"cm-variable-2\">self</span><span>, </span><span class=\"cm-variable\">app</span><span>, </span><span class=\"cm-variable\">configurationContext</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">my_package</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">loadZCML</span><span>(</span><span class=\"cm-variable\">package</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">my_package</span><span>)</span><span>\n\n\n</span><span class=\"cm-variable\">MY_PACKAGE_FIXTURE</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">MyPackageLayer</span><span>()</span><span>\n\n</span><span class=\"cm-variable\">MY_PACKAGE_ROBOT_TESTING</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">FunctionalTesting</span><span>(</span><span>\n</span><span>    </span><span class=\"cm-variable\">bases</span><span class=\"cm-operator\">=</span><span>(</span><span class=\"cm-variable\">MY_PACKAGE_FIXTURE</span><span>, </span><span class=\"cm-variable\">ZSERVER_FIXTURE</span><span>),</span><span>\n</span><span>    </span><span class=\"cm-variable\">name</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">\"MyPackage:Robot\"</span><span>)</span></code></pre>\n    </div>\n<p>Note, how we build on top of <strong>PloneSandboxLayer</strong> and how we create our\nfinal acceptance test layer by combining our custom\n<strong>MY_PACKAGE_FIXTURE</strong> and <strong>ZSERVER_FIXTURE</strong>. The latter would make\nour Plone sandbox served at <code>http://localhost:55001/</code>. Finally,\n<strong>FunctionalTesting</strong> gives us a clean isolated Plone site to be played\nwith for each test case.</p>\n<p>Finally, we write a new Robot Framework test suite into\n<code>src/my_package/tests/test_hello_world.robot</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"robotframework\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">*** Settings ***</span><span>\n\n</span><span class=\"cm-meta\">Library</span><span>  </span><span class=\"cm-string\">Selenium2Library</span><span>  </span><span class=\"cm-attribute\">timeout</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">10</span><span>  </span><span class=\"cm-attribute\">implicit_wait</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">0.5</span><span>\n\n</span><span class=\"cm-meta\">Suite Setup</span><span>  </span><span class=\"cm-keyword\">Start</span><span> </span><span class=\"cm-keyword\">browser</span><span>\n</span><span class=\"cm-meta\">Suite Teardown</span><span>  </span><span class=\"cm-keyword\">Close</span><span> </span><span class=\"cm-keyword\">All</span><span> </span><span class=\"cm-keyword\">Browsers</span><span>\n\n</span><span class=\"cm-header\">*** Test Cases ***</span><span>\n\n</span><span class=\"cm-string header\">Hello World</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Go</span><span> </span><span class=\"cm-keyword\">to</span><span>  </span><span class=\"cm-operator\">http://localhost:</span><span class=\"cm-string\">55001/plone/hello-world</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Page</span><span> </span><span class=\"cm-keyword\">should</span><span> </span><span class=\"cm-keyword\">contain</span><span>  </span><span class=\"cm-string\">Hello</span><span> </span><span class=\"cm-string\">World!</span><span>\n\n</span><span class=\"cm-header\">*** Keywords ***</span><span>\n\n</span><span class=\"cm-def\">Start</span><span> </span><span class=\"cm-def\">browser</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Open</span><span> </span><span class=\"cm-keyword\">browser</span><span>  </span><span class=\"cm-operator\">http://localhost:</span><span class=\"cm-string\">55001/plone/</span></code></pre>\n    </div>\n<p>We can now include our new test suite in\n<code>src/my_package/tests/test_robot.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">unittest</span><span>\n\n</span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">robotsuite</span><span>\n</span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">my_package</span><span>.</span><span class=\"cm-property\">testing</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">MY_PACKAGE_ROBOT_TESTING</span><span>\n</span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">plone</span><span>.</span><span class=\"cm-property\">app</span><span>.</span><span class=\"cm-property\">testing</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">PLONE_ZSERVER</span><span>\n</span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">plone</span><span>.</span><span class=\"cm-property\">testing</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">layered</span><span>\n\n\n</span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">test_suite</span><span>():</span><span>\n</span><span>    </span><span class=\"cm-variable\">suite</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">unittest</span><span>.</span><span class=\"cm-property\">TestSuite</span><span>()</span><span>\n</span><span>    </span><span class=\"cm-variable\">suite</span><span>.</span><span class=\"cm-property\">addTests</span><span>([</span><span>\n</span><span>        </span><span class=\"cm-variable\">layered</span><span>(</span><span class=\"cm-variable\">robotsuite</span><span>.</span><span class=\"cm-property\">RobotTestSuite</span><span>(</span><span class=\"cm-string\">\"test_accessibility.robot\"</span><span>),</span><span>\n</span><span>                </span><span class=\"cm-variable\">layer</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">PLONE_ZSERVER</span><span>),</span><span>\n</span><span>        </span><span class=\"cm-variable\">layered</span><span>(</span><span class=\"cm-variable\">robotsuite</span><span>.</span><span class=\"cm-property\">RobotTestSuite</span><span>(</span><span class=\"cm-string\">\"test_hello_world.robot\"</span><span>),</span><span>\n</span><span>                </span><span class=\"cm-variable\">layer</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">MY_PACKAGE_ROBOT_TESTING</span><span>),</span><span>\n</span><span>    ])</span><span>\n</span><span>    </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-variable\">suite</span></code></pre>\n    </div>\n<p>and re-run our tests:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-solarized\"><code><span>$ bin/test --list-tests\nListing my_package.testing.MyPackage:Robot tests:\n  Hello_World (test_hello_world.robot)\nListing plone.app.testing.layers.Plone:ZServer tests:\n  Plone_Accessibility (test_accessibility.robot)</span></code></pre>\n    </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-solarized\"><code><span>$ bin/test\nRunning my_package.testing.MyPackage:Robot tests:\n  Set up plone.testing.zca.LayerCleanup in 0.000 seconds.\n  Set up plone.testing.z2.Startup in 0.219 seconds.\n  Set up plone.app.testing.layers.PloneFixture in 7.204 seconds.\n  Set up my_package.testing.MyPackageLayer in 0.028 seconds.\n  Set up plone.testing.z2.ZServer in 0.503 seconds.\n  Set up my_package.testing.MyPackage:Robot in 0.000 seconds.\n  Ran 1 tests with 0 failures and 0 errors in 2.493 seconds.\nRunning plone.app.testing.layers.Plone:ZServer tests:\n  Tear down my_package.testing.MyPackage:Robot in 0.000 seconds.\n  Tear down my_package.testing.MyPackageLayer in 0.002 seconds.\n  Set up plone.app.testing.layers.Plone:ZServer in 0.000 seconds.\n  Ran 1 tests with 0 failures and 0 errors in 2.213 seconds.\nTearing down left over layers:\n  Tear down plone.app.testing.layers.Plone:ZServer in 0.000 seconds.\n  Tear down plone.app.testing.layers.PloneFixture in 0.091 seconds.\n  Tear down plone.testing.z2.ZServer in 5.155 seconds.\n  Tear down plone.testing.z2.Startup in 0.009 seconds.\n  Tear down plone.testing.zca.LayerCleanup in 0.005 seconds.\nTotal: 2 tests, 0 failures, 0 errors in 18.305 seconds.</span></code></pre>\n    </div>\n<h2>Logging in</h2>\n<p><code>plone.app.testing</code> defines a test user for our test site, but how could\nour Robot Framework test know her login credentials? Well, we have to\nmake our test to ask for the credentials by defining custom Robot\nFramework test keywords in Python.</p>\n<p>Let’s add a couple of more files, as in:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-solarized\"><code><span>src/my_package/testing_keywords.py\nsrc/my_package/tests/test_login.robot</span></code></pre>\n    </div>\n<p>At first, we type our custom Robot Framework keyword library with test\nkeywords for retrieving the test users credentials into\n<code>src/my_package/testing_keywords.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-keyword\">class</span><span> </span><span class=\"cm-def\">Keywords</span><span>(</span><span class=\"cm-builtin\">object</span><span>):</span><span>\n</span><span>    </span><span class=\"cm-string\">\"\"\"Robot Framework keyword library</span><span>\n</span><span class=\"cm-string\">    \"\"\"</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">get_test_user_name</span><span>(</span><span class=\"cm-variable-2\">self</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">plone</span><span>.</span><span class=\"cm-property\">app</span><span>.</span><span class=\"cm-property\">testing</span><span>\n</span><span>        </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-variable\">plone</span><span>.</span><span class=\"cm-property\">app</span><span>.</span><span class=\"cm-property\">testing</span><span>.</span><span class=\"cm-property\">interfaces</span><span>.</span><span class=\"cm-property\">TEST_USER_NAME</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">get_test_user_password</span><span>(</span><span class=\"cm-variable-2\">self</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">plone</span><span>.</span><span class=\"cm-property\">app</span><span>.</span><span class=\"cm-property\">testing</span><span>\n</span><span>        </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-variable\">plone</span><span>.</span><span class=\"cm-property\">app</span><span>.</span><span class=\"cm-property\">testing</span><span>.</span><span class=\"cm-property\">interfaces</span><span>.</span><span class=\"cm-property\">TEST_USER_PASSWORD</span></code></pre>\n    </div>\n<p>Then, we can write our new login test into\n<code>src/my_package/tests/test_login.robot</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"robotframework\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">*** Settings ***</span><span>\n\n</span><span class=\"cm-meta\">Library</span><span>  </span><span class=\"cm-string\">Selenium2Library</span><span>  </span><span class=\"cm-attribute\">timeout</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">10</span><span>  </span><span class=\"cm-attribute\">implicit_wait</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">0.5</span><span>\n</span><span class=\"cm-meta\">Library</span><span>  </span><span class=\"cm-string\">my_package.testing_keywords.Keywords</span><span>\n\n</span><span class=\"cm-meta\">Suite Setup</span><span>  </span><span class=\"cm-keyword\">Start</span><span> </span><span class=\"cm-keyword\">browser</span><span>\n</span><span class=\"cm-meta\">Suite Teardown</span><span>  </span><span class=\"cm-keyword\">Close</span><span> </span><span class=\"cm-keyword\">All</span><span> </span><span class=\"cm-keyword\">Browsers</span><span>\n\n</span><span class=\"cm-header\">*** Test Cases ***</span><span>\n\n</span><span class=\"cm-string header\">Log in</span><span>\n</span><span>    </span><span class=\"cm-variable-2\">${TEST_USER_NAME}</span><span> </span><span class=\"cm-operator\">=</span><span>  </span><span class=\"cm-keyword\">Get</span><span> </span><span class=\"cm-keyword\">test</span><span> </span><span class=\"cm-keyword\">user</span><span> </span><span class=\"cm-keyword\">name</span><span>\n</span><span>    </span><span class=\"cm-variable-2\">${TEST_USER_PASSWORD}</span><span> </span><span class=\"cm-operator\">=</span><span>  </span><span class=\"cm-keyword\">Get</span><span> </span><span class=\"cm-keyword\">test</span><span> </span><span class=\"cm-keyword\">user</span><span> </span><span class=\"cm-keyword\">password</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Go</span><span> </span><span class=\"cm-keyword\">to</span><span>  </span><span class=\"cm-operator\">http://localhost:</span><span class=\"cm-string\">55001/plone/login_form</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Page</span><span> </span><span class=\"cm-keyword\">should</span><span> </span><span class=\"cm-keyword\">contain</span><span> </span><span class=\"cm-keyword\">element</span><span>  </span><span class=\"cm-string em\">__</span><span class=\"cm-string\">ac_name</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Input</span><span> </span><span class=\"cm-keyword\">text</span><span>  </span><span class=\"cm-string em\">__</span><span class=\"cm-string\">ac_name</span><span>  </span><span class=\"cm-variable-2\">${TEST_USER_NAME</span><span class=\"cm-variable-2\">}</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Input</span><span> </span><span class=\"cm-keyword\">text</span><span>  </span><span class=\"cm-string em\">__</span><span class=\"cm-string\">ac_password</span><span>  </span><span class=\"cm-variable-2\">${TEST_USER_PASSWORD</span><span class=\"cm-variable-2\">}</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Click</span><span> </span><span class=\"cm-keyword\">Button</span><span>  </span><span class=\"cm-string\">Log</span><span> </span><span class=\"cm-string\">in</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Page</span><span> </span><span class=\"cm-keyword\">should</span><span> </span><span class=\"cm-keyword\">contain</span><span> </span><span class=\"cm-keyword\">element</span><span>  </span><span class=\"cm-attribute\">css</span><span class=\"cm-operator\">=</span><span class=\"cm-comment\">#user-name</span><span>\n\n</span><span class=\"cm-header\">*** Keywords ***</span><span>\n\n</span><span class=\"cm-def\">Start</span><span> </span><span class=\"cm-def\">browser</span><span>\n</span><span>    </span><span class=\"cm-keyword\">Open</span><span> </span><span class=\"cm-keyword\">browser</span><span>  </span><span class=\"cm-operator\">http://localhost:</span><span class=\"cm-string\">55001/plone/</span></code></pre>\n    </div>\n<p>Note, how we can import our custom keyword library right after\n<strong>Selenium2Libary</strong>. Also, see how we use our custom keywords to\nretrieve test user’s login credentials into Robot Framework test\nvariables and how we use them later in the test.</p>\n<p>We can now include our new test suite in\n<code>src/my_package/tests/test_robot.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">unittest</span><span>\n\n</span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">robotsuite</span><span>\n</span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">my_package</span><span>.</span><span class=\"cm-property\">testing</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">MY_PACKAGE_ROBOT_TESTING</span><span>\n</span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">plone</span><span>.</span><span class=\"cm-property\">app</span><span>.</span><span class=\"cm-property\">testing</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">PLONE_ZSERVER</span><span>\n</span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">plone</span><span>.</span><span class=\"cm-property\">testing</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">layered</span><span>\n\n\n</span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">test_suite</span><span>():</span><span>\n</span><span>    </span><span class=\"cm-variable\">suite</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">unittest</span><span>.</span><span class=\"cm-property\">TestSuite</span><span>()</span><span>\n</span><span>    </span><span class=\"cm-variable\">suite</span><span>.</span><span class=\"cm-property\">addTests</span><span>([</span><span>\n</span><span>        </span><span class=\"cm-variable\">layered</span><span>(</span><span class=\"cm-variable\">robotsuite</span><span>.</span><span class=\"cm-property\">RobotTestSuite</span><span>(</span><span class=\"cm-string\">\"test_accessibility.robot\"</span><span>),</span><span>\n</span><span>                </span><span class=\"cm-variable\">layer</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">PLONE_ZSERVER</span><span>),</span><span>\n</span><span>        </span><span class=\"cm-variable\">layered</span><span>(</span><span class=\"cm-variable\">robotsuite</span><span>.</span><span class=\"cm-property\">RobotTestSuite</span><span>(</span><span class=\"cm-string\">\"test_hello_world.robot\"</span><span>),</span><span>\n</span><span>                </span><span class=\"cm-variable\">layer</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">MY_PACKAGE_ROBOT_TESTING</span><span>),</span><span>\n</span><span>        </span><span class=\"cm-variable\">layered</span><span>(</span><span class=\"cm-variable\">robotsuite</span><span>.</span><span class=\"cm-property\">RobotTestSuite</span><span>(</span><span class=\"cm-string\">\"test_login.robot\"</span><span>),</span><span>\n</span><span>                </span><span class=\"cm-variable\">layer</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">PLONE_ZSERVER</span><span>),</span><span>\n</span><span>    ])</span><span>\n</span><span>    </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-variable\">suite</span></code></pre>\n    </div>\n<p>and re-run our tests:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-solarized\"><code><span>$ bin/test --list-tests\nListing my_package.testing.MyPackage:Robot tests:\n  Hello_World (test_hello_world.robot)\nListing plone.app.testing.layers.Plone:ZServer tests:\n  Plone_Accessibility (test_accessibility.robot)\n  Log_in (test_login.robot)</span></code></pre>\n    </div>\n<div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-solarized\"><code><span>$ bin/test\nRunning my_package.testing.MyPackage:Robot tests:\n  Set up plone.testing.zca.LayerCleanup in 0.000 seconds.\n  Set up plone.testing.z2.Startup in 0.217 seconds.\n  Set up plone.app.testing.layers.PloneFixture in 7.132 seconds.\n  Set up my_package.testing.MyPackageLayer in 0.026 seconds.\n  Set up plone.testing.z2.ZServer in 0.503 seconds.\n  Set up my_package.testing.MyPackage:Robot in 0.000 seconds.\n  Ran 1 tests with 0 failures and 0 errors in 2.473 seconds.\nRunning plone.app.testing.layers.Plone:ZServer tests:\n  Tear down my_package.testing.MyPackage:Robot in 0.000 seconds.\n  Tear down my_package.testing.MyPackageLayer in 0.002 seconds.\n  Set up plone.app.testing.layers.Plone:ZServer in 0.000 seconds.\n  Ran 2 tests with 0 failures and 0 errors in 7.766 seconds.\nTearing down left over layers:\n  Tear down plone.app.testing.layers.Plone:ZServer in 0.000 seconds.\n  Tear down plone.app.testing.layers.PloneFixture in 0.088 seconds.\n  Tear down plone.testing.z2.ZServer in 5.156 seconds.\n  Tear down plone.testing.z2.Startup in 0.009 seconds.\n  Tear down plone.testing.zca.LayerCleanup in 0.005 seconds.\nTotal: 3 tests, 0 failures, 0 errors in 23.765 seconds.</span></code></pre>\n    </div>\n<h2>Debugging</h2>\n<p>There’s one catch in debugging your code while running Robot Framework\ntests. It eats your standard input and output, which prevents you to\njust <code>import pdb; pdb.set_trace()</code>. Instead, you have to add a few more\nlines to reclaim your <code>I/O</code> at first, and only then let your debugger\nin:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">sys</span><span>\n</span><span class=\"cm-keyword\">for</span><span> </span><span class=\"cm-variable\">attr</span><span> </span><span class=\"cm-keyword\">in</span><span> (</span><span class=\"cm-string\">'stdin'</span><span>, </span><span class=\"cm-string\">'stdout'</span><span>, </span><span class=\"cm-string\">'stderr'</span><span>):</span><span>\n</span><span>    </span><span class=\"cm-builtin\">setattr</span><span>(</span><span class=\"cm-variable\">sys</span><span>, </span><span class=\"cm-variable\">attr</span><span>, </span><span class=\"cm-builtin\">getattr</span><span>(</span><span class=\"cm-variable\">sys</span><span>, </span><span class=\"cm-string\">'__%s__'</span><span> </span><span class=\"cm-operator\">%</span><span> </span><span class=\"cm-variable\">attr</span><span>))</span><span>\n</span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">pdb</span><span>; </span><span class=\"cm-variable\">pdb</span><span>.</span><span class=\"cm-property\">set_trace</span><span>()</span></code></pre>\n    </div>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://github.com/plone/plone.act/blob/master/src/plone/act/keywords.txt\">plone.act</a>\n(Plone keyword library candidate)</li>\n<li><a href=\"http://rtomac.github.com/robotframework-selenium2library/doc/Selenium2Library.html\">Selenium2Library\nkeywords</a></li>\n<li><a href=\"http://robotframework.googlecode.com/hg/doc/libraries/BuiltIn.html?r=2.7.7\">Robot Framework built-in\nkeywords</a></li>\n</ul>\n<p>That’s all about it to get started. Have fun!</p>","frontmatter":{"title":"Getting started with Robot Framework and plone.app.testing","tags":["Plone","Python","Robot Famework","Selenium","Testing"],"date":"September 01, 2012","published":"2012-09-01 06:00:00"}}},"pageContext":{"slug":"/2012/09/getting-started-with-robotframework-and.html/","previous":{"fields":{"slug":"/2012/06/running-robot-framework-tests-with.html/"},"frontmatter":{"title":"Running Robot Framework tests with Google App Engine SDK"}},"next":{"fields":{"slug":"/2012/09/speed-up-your-plone-add-on-tests-on.html/"},"frontmatter":{"title":"Speed up your Plone add-on tests on Travis CI with the Unified Installer"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}