{"componentChunkName":"component---src-templates-blog-post-js","path":"/2012/09/speed-up-your-plone-add-on-tests-on.html/","result":{"data":{"site":{"siteMetadata":{"title":"Asko Soukka","author":"Asko Soukka"}},"markdownRemark":{"id":"348fb5d3-d1e7-5e6d-81fc-5682d95a48da","fields":{"slug":"/2012/09/speed-up-your-plone-add-on-tests-on.html/"},"excerpt":"Many thanks for Héctor Verlarde for encouraging us to try out Travis CI\nfor testing our own Plone\nadd-ons.\nAlso, thanks for Godefroid Chapelle for showing me…","html":"<p>Many thanks for Héctor Verlarde for <a href=\"http://hvelarde.blogspot.fi/2012/08/integrating-travis-ci-with-your-plone.html\">encouraging us to try out Travis CI\nfor testing our own Plone\nadd-ons</a>.\nAlso, thanks for Godefroid Chapelle for showing me, <a href=\"https://github.com/gotcha/collective.jekyll/blob/master/.travis.yml#L13\">how to run Selenium\ntests on a headless\nserver</a>,\ne.g. on <a href=\"http://about.travis-ci.org/docs/user/gui-and-headless-browsers/\">Travis\nCI</a>.</p>\n<p>As you may already know, the main issue in testing Plone add-ons on\nTravis CI is its <strong>strict 15 minute time limit on running your test\nsuite</strong>. And as you may also know, 15 minutes is not much time for our\ndear buildout to gather all the required dependencies of Plone or\n<a href=\"http://pypi.python.org/pypi/plone.app.testing/\">plone.app.testing</a>, and\nstill run our test after the buildout.</p>\n<p>As expected, neither did I get far without having issues with the time\nlimit. And for some reason, I couldn’t get the earlier solutions to\nwork for me. Eventually, I found out a new solution, surprisingly, with\nthe help of <a href=\"http://plone.org/products/plone/releases/\">Plone Unified\nInstaller</a>.</p>\n<p>Because <strong>Plone Unified Installer comes in a single downloadable package\nand includes a complete buildout-cache</strong> usable also in a test buildout,\nI realized, that it could speed up my test buildout a lot, and it did.\nYet, with Plone 4.3 shipping with Dexterity, I would expect it to speed\nit up even more.</p>\n<p><strong>Update</strong>: The method described here is adopted as part of\n<a href=\"https://github.com/collective/buildout.plonetest\">buildout.plonetest</a>,\nwhich includes more generic configuration to work with all\nPlone-versions.</p>\n<p>Enough talk. Here’s my setup:</p>\n<h2>buildout.cfg</h2>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[buildout]</span><span>\n</span><span class=\"cm-def\">extends </span><span>=</span><span class=\"cm-quote\"> http</span><span>:</span><span class=\"cm-quote\">//dist.plone.org/release/4.2.1/versions.cfg</span><span>\n</span><span class=\"cm-def\">develop </span><span>=</span><span class=\"cm-quote\"> .</span><span>\n</span><span class=\"cm-def\">parts </span><span>=</span><span class=\"cm-quote\"> test</span><span>\n</span><span class=\"cm-def\">versions </span><span>=</span><span class=\"cm-quote\"> versions</span><span>\n\n</span><span class=\"cm-header\">[test]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> zc.recipe.testrunner</span><span>\n</span><span class=\"cm-def\">eggs </span><span>=</span><span class=\"cm-quote\"> my_package[test]</span></code></pre>\n    </div>\n<p>Nothing special here. I expect <code>setup.py</code> of the tested package to\ninclude complete <code>extras_require={'test': ... }</code> with all the required\ndependencies for testing.</p>\n<p>So, on a local machine, <code>python bootstrap.py</code>, <code>bin/buildout</code> and\n<code>bin/test</code> combo should run tests for a freshly cloned package\nrepository just as expected.</p>\n<h2>travis.cfg</h2>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-header\">[buildout]</span><span>\n</span><span class=\"cm-def\">extends </span><span>=</span><span class=\"cm-quote\"> buildout.cfg</span><span>\n</span><span class=\"cm-def\">parts </span><span>=</span><span>\n</span><span class=\"cm-def\">    download</span><span>\n</span><span class=\"cm-def\">    install</span><span>\n</span><span class=\"cm-def\">    test</span><span>\n</span><span class=\"cm-def\">eggs-directory </span><span>=</span><span class=\"cm-quote\"> buildout-cache/eggs</span><span>\n</span><span class=\"cm-def\">download-cache </span><span>=</span><span class=\"cm-quote\"> buildout-cache/downloads</span><span>\n\n</span><span class=\"cm-header\">[download]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> hexagonit.recipe.download</span><span>\n</span><span class=\"cm-def\">url </span><span>=</span><span class=\"cm-quote\"> https</span><span>:</span><span class=\"cm-quote\">//launchpad.net/plone/4.2/4.2.1/+download/Plone-4.2.1-UnifiedInstaller.tgz</span><span>\n\n</span><span class=\"cm-header\">[install]</span><span>\n</span><span class=\"cm-def\">recipe </span><span>=</span><span class=\"cm-quote\"> collective.recipe.cmd</span><span>\n</span><span class=\"cm-def\">on_install </span><span>=</span><span class=\"cm-quote\"> true</span><span>\n</span><span class=\"cm-def\">cmds </span><span>=</span><span class=\"cm-quote\"> tar jxvf ${download</span><span>:</span><span class=\"cm-quote\">location}/Plone-4.2.1-UnifiedInstaller/packages/buildout-cache.tar.bz2 1&gt;/dev/null</span></code></pre>\n    </div>\n<p>Here’s the magic for re-using Plone Unified Installer for your test\nbuildout:</p>\n<ol>\n<li>At first, download and unpack the installer in <code>[download]</code> part</li>\n<li>then extract its <strong>buildout-cache</strong> in <code>[install]</code> part into the\nlocations defined in <code>[buildout]</code> part.</li>\n</ol>\n<p>As you might guessed, after this, buildout needs to download only the\nextra requirements of the tested package! Long live Plone Unified\nInstaller!</p>\n<h2>.travis.yml</h2>\n<div class=\"gatsby-highlight\" data-language=\"yaml\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-atom\">language</span><span class=\"cm-meta\">: </span><span>python</span><span>\n</span><span class=\"cm-atom\">python</span><span class=\"cm-meta\">: </span><span class=\"cm-string\">\"2.7\"</span><span>\n</span><span class=\"cm-atom\">install</span><span class=\"cm-meta\">:</span><span>\n</span><span class=\"cm-meta\">  - </span><span>mkdir -p buildout-cache/downloads</span><span>\n</span><span class=\"cm-meta\">  - </span><span>python bootstrap.py -c travis.cfg</span><span>\n</span><span class=\"cm-meta\">  - </span><span>bin/buildout -N -t 3 -c travis.cfg</span><span>\n</span><span class=\"cm-atom\">script</span><span class=\"cm-meta\">: </span><span>bin/test</span></code></pre>\n    </div>\n<p>Note, how we need to create a <strong>buildout-cache</strong>-directory for downloads\nas defined earlier in <code>travis.cfg</code>. The rest should be easy: we just do\nthe bootstrap and run our tests with sane buildout-options, and…\nthat’s all.</p>\n<h2>.travis.yml for robotsuite</h2>\n<p>Oh, in the beginning, I mentiond about learning something important from\nGodefroid. Well, if you have followed me on <a href=\"http://datakurre.pandala.org/2012/09/getting-started-with-robotframework-and.html\">creating\nzope.testrunner-compatible Robot Framework -tests with\nplone.app.testing</a>,\nyou only need to add a few extra lines to make your Robot Framework\ntests runnable on Travis CI:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-atom\">language</span><span class=\"cm-meta\">: </span><span>python</span><span>\n</span><span class=\"cm-atom\">python</span><span class=\"cm-meta\">: </span><span class=\"cm-string\">\"2.7\"</span><span>\n</span><span class=\"cm-atom\">install</span><span class=\"cm-meta\">:</span><span>\n</span><span class=\"cm-meta\">  - </span><span>mkdir -p buildout-cache/downloads</span><span>\n</span><span class=\"cm-meta\">  - </span><span>python bootstrap.py -c travis.cfg</span><span>\n</span><span class=\"cm-meta\">  - </span><span>bin/buildout -N -t 3 -c travis.cfg</span><span>\n</span><span class=\"cm-atom\">before_script</span><span class=\"cm-meta\">:</span><span>\n</span><span class=\"cm-meta\">  - </span><span class=\"cm-string\">\"export DISPLAY=:99.0\"</span><span>\n</span><span class=\"cm-meta\">  - </span><span class=\"cm-string\">\"sh -e /etc/init.d/xvfb start\"</span><span>\n</span><span class=\"cm-atom\">script</span><span class=\"cm-meta\">: </span><span>bin/test</span></code></pre>\n    </div>\n<p>If you think, this is cool, please, <a href=\"https://love.travis-ci.org\">give some love for the Travis CI\nteam</a>!</p>","frontmatter":{"title":"Speed up your Plone add-on tests on Travis CI with the Unified Installer","tags":["Plone","Testing","Travis CI"],"date":"September 09, 2012","published":"2012-09-09 06:00:00"}}},"pageContext":{"slug":"/2012/09/speed-up-your-plone-add-on-tests-on.html/","previous":{"fields":{"slug":"/2012/09/getting-started-with-robotframework-and.html/"},"frontmatter":{"title":"Getting started with Robot Framework and plone.app.testing"}},"next":{"fields":{"slug":"/2012/10/embedding-robot-framework-tests-and.html/"},"frontmatter":{"title":"Embedding Robot Framework tests and keywords into Sphinx documentation"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}