{"componentChunkName":"component---src-templates-blog-post-js","path":"/2012/10/embedding-robot-framework-tests-and.html/","result":{"data":{"site":{"siteMetadata":{"title":"Asko Soukka","author":"Asko Soukka"}},"markdownRemark":{"id":"9fb3327b-8fe2-5aa6-bddd-6ddedea08146","fields":{"slug":"/2012/10/embedding-robot-framework-tests-and.html/"},"excerpt":"Robot Framework ships with\ndecent tools for generating reference documentation out of your robot\nkeywords and test data (see\nlibdoc\nand\ntestdoc).\nYet, when Timo…","html":"<p><a href=\"http://code.google.com/p/robotframework/\">Robot Framework</a> ships with\ndecent tools for generating reference documentation out of your robot\nkeywords and test data (see\n<a href=\"http://robotframework.googlecode.com/hg/doc/userguide/RobotFrameworkUserGuide.html?r=2.7.7#library-documentation-tool-libdoc\">libdoc</a>\nand\n<a href=\"http://robotframework.googlecode.com/hg/doc/userguide/RobotFrameworkUserGuide.html?r=2.7.7#test-data-documentation-tool-testdoc\">testdoc</a>).\nYet, when Timo Stollenwerk <a href=\"http://de.slideshare.net/tisto/testdriven-development-with-plone\">presented Robot Framework as part of his is\ntalk about TDD at PloneConf\n2012</a>,\nthe first question from the audience was, would you be able to include\ntests as examples into <em>narrative</em> documentation of your package.</p>\n<p>I’m not sure, how much effort would it require to make Robot Framework\nsupport <em>testable documentation</em> (similarly to\n<a href=\"http://docs.python.org/library/doctest.html\">doctest</a>-module), or would\nit even make any sense…</p>\n<p>The other way around, however, is easy.</p>\n<h2>Introducing sphinxcontrib-robotdoc</h2>\n<p><a href=\"http://sphinx.pocoo.org/\">Sphinx</a> is the current state-of-art document\ngeneration tool of the Python community. Sphinx is based on\n<a href=\"http://docutils.sourceforge.net/\">Docutils</a>, which makes it very easy\nto <a href=\"http://sphinx.pocoo.org/extensions.html\">extend</a> its\n<a href=\"http://docutils.sourceforge.net/rst.html\">reStructuredText</a>-markup with\ncustom directives.</p>\n<p>There’s also a real killer app for it:\n<a href=\"https://readthedocs.org/\">ReadTheDocs</a>.</p>\n<p>So, in the spirit <a href=\"http://sphinx.pocoo.org/ext/autodoc.html\">autodoc</a>\nextension for Sphinx, I wanted to use my sprint time at the PloneConf\nfor starting up a new Sphinx extension for embedding Robot Framework\ntests and user keywords into narrative package documentation.</p>\n<p>This work is now available as:\n<a href=\"http://pypi.python.org/pypi/sphinxcontrib-robotdoc/\">sphinxcontrib-robotdoc</a>.</p>\n<h2>And robot_-directives</h2>\n<p><code>sphinxcontrib-robotdoc</code> introduces two new custom Docutils-directives\nto be used in Sphinx documentation:</p>\n<ol>\n<li><code>robot_tests</code> and</li>\n<li><code>robot_keywords</code>.</li>\n</ol>\n<p>Both directives accept 1) optional regular expression filter and 2)\nmandatory <strong>source</strong>-option with a relative path to locate your Robot\nFramework test data or resource file. In addition,\n<code>robot_tests</code>-directive accepts also an 3) optional comma separated list\nof <strong>tags</strong> to select embedded tests from the parsed test data.</p>\n<p>For example:</p>\n<ol>\n<li>\n<p>Embed all tests from a test suite:</p>\n<div class=\"gatsby-highlight\" data-language=\"rst\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-meta\">.. </span><span class=\"cm-keyword\">robot_tests</span><span class=\"cm-meta\">::</span><span>\n</span><span>    </span><span class=\"cm-meta\">:</span><span class=\"cm-keyword\">source</span><span class=\"cm-meta\">:</span><span> ../src/my_package/tests/acceptance/my_suite.txt</span></code></pre>\n    </div>\n</li>\n<li>\n<p>Embed all tests starting with <strong>Log in</strong> from a test suite:</p>\n<div class=\"gatsby-highlight\" data-language=\"rst\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-meta\">.. </span><span class=\"cm-keyword\">robot_tests</span><span class=\"cm-meta\">:: </span><span>Log in.*</span><span>\n</span><span>   </span><span class=\"cm-meta\">:</span><span class=\"cm-keyword\">source</span><span class=\"cm-meta\">:</span><span> ../src/my_package/tests/acceptance/my_suite.txt</span></code></pre>\n    </div>\n</li>\n<li>\n<p>Embed all tests tagged with <strong>login</strong> or <strong>logout</strong> from a test\nsuite:</p>\n<div class=\"gatsby-highlight\" data-language=\"rst\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-meta\">.. </span><span class=\"cm-keyword\">robot_tests</span><span class=\"cm-meta\">::</span><span>\n</span><span>   </span><span class=\"cm-meta\">:</span><span class=\"cm-keyword\">source</span><span class=\"cm-meta\">:</span><span> ../src/my_package/tests/acceptance/my_suite.txt</span><span>\n</span><span>   </span><span class=\"cm-meta\">:</span><span class=\"cm-keyword\">tags</span><span class=\"cm-meta\">:</span><span> login, logout</span></code></pre>\n    </div>\n</li>\n<li>\n<p>Embed all user keywords from a test or a resource file:</p>\n<div class=\"gatsby-highlight\" data-language=\"rst\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-meta\">.. </span><span class=\"cm-keyword\">robot_keywords</span><span class=\"cm-meta\">::</span><span>\n</span><span>   </span><span class=\"cm-meta\">:</span><span class=\"cm-keyword\">source</span><span class=\"cm-meta\">:</span><span> ../src/my_package/tests/acceptance/my_suite.txt</span></code></pre>\n    </div>\n</li>\n<li>\n<p>Embed all user keywords starting with <strong>Log in</strong> from a test or a\nresource file:</p>\n<div class=\"gatsby-highlight\" data-language=\"rst\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-meta\">.. </span><span class=\"cm-keyword\">robot_keywords</span><span class=\"cm-meta\">:: </span><span>Log in.*</span><span>\n</span><span>   </span><span class=\"cm-meta\">:</span><span class=\"cm-keyword\">source</span><span class=\"cm-meta\">:</span><span> ../src/my_package/tests/acceptance/my_suite.txt</span></code></pre>\n    </div>\n</li>\n</ol>\n<p>When test cases or user keywords contain documentation, it gets parsed\nwith something called <strong>nested</strong> Docutils parser. This supports also\nlinks between keywords and links from narrative to keywords as long as\nboth the link and its target are embedded onto the same Sphinx page.</p>\n<h2>Enabling for ReadTheDocs</h2>\n<p>If you are new to <a href=\"https://readthedocs.org/\">ReadTheDocs</a>, you should start with their <a href=\"http://read-the-docs.readthedocs.org/en/latest/getting_started.html\">Getting\nStarted</a>\n-guide.</p>\n<p>ReadTheDocs does support custom Sphinx-plugins (the ones that are not\ndistributed with Sphinx’s main distribution), but there are a few\nthings to know about it:</p>\n<ol>\n<li>\n<p>As usual, you must add the plugin into the extensions list of your\nSphinx configuration (usually <code>conf.py</code>). Also, remember to convert\ndashes in package names to underscores:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-variable\">extensions</span><span> </span><span class=\"cm-operator\">=</span><span> [</span><span class=\"cm-string\">'sphinxcontrib_robotdoc'</span><span>]</span></code></pre>\n    </div>\n</li>\n<li>\n<p>The required plugin must be published (probably at\n<a href=\"http://pypi.python.org/\">PyPi</a>) like\n<a href=\"http://pypi.python.org/pypi/sphinxcontrib-robotdoc/\">sphinxcontrib-robotdoc</a>.</p>\n</li>\n<li>\n<p>You must edit your ReadTheDocs-project through their dashboard to\n<strong>Use virtualenv</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-solarized\"><code><span>Use virtualenv\n[x]  Install your project inside a virtualenv using setup.py install</span></code></pre>\n    </div>\n</li>\n<li>\n<p>Your package must include a <a href=\"http://www.pip-installer.org/en/latest/requirements.html\">pip requirements\nfile</a>\nrequiring the Sphinx plugin (and the possibly required minimum\nversion) you are using:</p>\n<div class=\"gatsby-highlight\" data-language=\"properties\">\n      <pre class=\" cm-s-solarized\"><code><span class=\"cm-def\">sphinxcontrib-robotdoc&gt;</span><span>=</span><span class=\"cm-quote\">0.3.4</span></code></pre>\n    </div>\n</li>\n<li>\n<p>The requirements file itself could be made specific for ReadTheDocs\nby placing it under a package subdirectory, e.g.\n<code>./docs/requirements.txt</code>.</p>\n</li>\n<li>\n<p>Finally, your must edit your ReadTheDocs-project through their\ndasboard to find your requirement file:</p>\n<div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-solarized\"><code><span>Requirements file:\ndocs/requirements.txt</span></code></pre>\n    </div>\n</li>\n</ol>\n<p>Done. Now, the next ReadTheDocs-build for your documentation should be\nable to use your custom Sphinx-plugin, e.g. <code>sphinxcontrib-robotdoc</code>.</p>\n<h2>With a full example</h2>\n<p>At the PloneConf, I had a presentation with <a href=\"https://twitter.com/jukkao\">Jukka\nOjaniemi</a> on doing <a href=\"http://www.slideshare.net/datakurre/plone-rabbit-mq-and-messaging-that-just-works\">AMQP based system\nintegrations for\nPlone</a>.\nFor the presentation, I wrote <a href=\"https://github.com/datakurre/pubsubannouncements/\">a minimal publish-subscribe -example for\nPlone</a> containing\nalso a pair of acceptance tests written with Robot Framework.</p>\n<p>Here goes my</p>\n<ul>\n<li><a href=\"https://github.com/datakurre/pubsubannouncements/blob/master/docs/conf.py\">Sphinx-configuration</a></li>\n<li><a href=\"https://github.com/datakurre/pubsubannouncements/blob/master/docs/requirements.txt\">pip requirements\n-file</a></li>\n<li><a href=\"https://github.com/datakurre/pubsubannouncements/blob/master/docs/index.rst\">documentation\nsource</a></li>\n<li><a href=\"https://github.com/datakurre/pubsubannouncements/blob/master/src/pubsubannouncements/tests/test_announcement.txt\">Robot Framework test\ndata</a></li>\n</ul>\n<p>and, finally, <a href=\"http://zamqp-pubsubannouncements.readthedocs.org/en/latest/\">the results at\nReadTheDocs</a>.</p>\n<h2>And then what?</h2>\n<p>So, if you do acceptance driven development, shouldn’t your acceptance\ncriteria be good enough to be embedded as examples of your product’s\nusage into its narrative documentation?</p>\n<p>Actually, I don’t want to argue more on that… I’ll describe a real\nuse case instead:</p>\n<p><a href=\"https://github.com/plone/plone.act/\">plone.act</a> is the new acceptance\ntest library for Plone and Plone add-on-developers. It is implemented as\nan importable resource of Robot Framework user keywords built on top of\nRobot Framework’s <a href=\"http://robotframework.googlecode.com/hg/doc/libraries/BuiltIn.html?r=2.7.7\">built-in\nkeywords</a>\nand\n<a href=\"http://rtomac.github.com/robotframework-selenium2library/doc/Selenium2Library.html\">Selenium2Library-keywords</a>.\nOf course, it’s still far from complete.</p>\n<p>For plone.act, we do need to write <a href=\"http://ploneact.readthedocs.org/en/latest/index.html\">a narrative tutorial-like\ndocumentation</a>,\nincluding descriptions of the available keywords and examples of their\nuse in custom test cases. The best way to do this and keep it in sync\nwith the current implementation, I believe, would be to embed the actual\nkeywords and tests cases into the documentation.</p>\n<p>And, I hope, we can do that with\n<a href=\"http://pypi.python.org/pypi/sphinxcontrib-robotdoc/\">sphinxcontrib-robotdoc</a>\nand enhance it a lot during the process.</p>","frontmatter":{"title":"Embedding Robot Framework tests and keywords into Sphinx documentation","tags":["Plone","Python","Robot Framework","Sphinx","Testing"],"date":"October 22, 2012","published":"2012-10-22 06:00:00"}}},"pageContext":{"slug":"/2012/10/embedding-robot-framework-tests-and.html/","previous":{"fields":{"slug":"/2012/09/speed-up-your-plone-add-on-tests-on.html/"},"frontmatter":{"title":"Speed up your Plone add-on tests on Travis CI with the Unified Installer"}},"next":{"fields":{"slug":"/2013/01/create-custom-views-for-dexterity-types.html/"},"frontmatter":{"title":"Create custom views for Dexterity-types TTW"}}}},"staticQueryHashes":["63159454"],"slicesMap":{}}